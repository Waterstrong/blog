<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Watersrong Blog</title>
  <subtitle>Enjoy this moment!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.waterstrong.me/"/>
  <updated>2016-09-06T15:45:40.000Z</updated>
  <id>http://blog.waterstrong.me/</id>
  
  <author>
    <name>Waterstrong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Stubby4J</title>
    <link href="http://blog.waterstrong.me/using-stubby4j/"/>
    <id>http://blog.waterstrong.me/using-stubby4j/</id>
    <published>2016-09-05T14:29:26.000Z</published>
    <updated>2016-09-06T15:45:40.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是stubby4j？&quot;&gt;&lt;a href=&quot;#什么是stubby4j？&quot; class=&quot;headerlink&quot; title=&quot;什么是stubby4j？&quot;&gt;&lt;/a&gt;什么是stubby4j？&lt;/h2&gt;&lt;p&gt;Stubby4J是基于Java编写的，该项目是由个人发起的开源项目，它是一款非常灵活可配置的基于HTTP(s)协议测试Web服务交互的工具，采用内嵌式的Jetty作为HTTP服务器，它的主要作用在于，可以在集成测试时，用来模拟第三方Web服务的API行为，比如，目前比较流行的RESTful架构风格的Web服务。&lt;/p&gt;
&lt;h2 id=&quot;为什么使用Stubby4J？&quot;&gt;&lt;a href=&quot;#为什么使用Stubby4J？&quot; class=&quot;headerlink&quot; title=&quot;为什么使用Stubby4J？&quot;&gt;&lt;/a&gt;为什么使用Stubby4J？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;模拟HTTP请求，Stub第三方API的返回数据&lt;/li&gt;
&lt;li&gt;在写集成测试时，Mock第三方API更加便捷&lt;/li&gt;
&lt;li&gt;能够验证发送的所有参数并指定详细返回数据&lt;/li&gt;
&lt;li&gt;目前支持所有HTTP方法：GET, POST, PUT, PATCH, DELETE, HEAD等&lt;/li&gt;
&lt;li&gt;支持HTTP和HTTPS协议，同时可模拟返回的错误码&lt;/li&gt;
&lt;li&gt;在性能测试和稳定性测试时，支持定义延时返回&lt;/li&gt;
&lt;li&gt;使用相对简单，配置非常便捷，启动也很快速&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何使用Stubby4J？&quot;&gt;&lt;a href=&quot;#如何使用Stubby4J？&quot; class=&quot;headerlink&quot; title=&quot;如何使用Stubby4J？&quot;&gt;&lt;/a&gt;如何使用Stubby4J？&lt;/h2&gt;&lt;h4 id=&quot;Gradle中配置依赖&quot;&gt;&lt;a href=&quot;#Gradle中配置依赖&quot; class=&quot;headerlink&quot; title=&quot;Gradle中配置依赖&quot;&gt;&lt;/a&gt;Gradle中配置依赖&lt;/h4&gt;&lt;p&gt;在&lt;code&gt;build.gradle&lt;/code&gt;中加入其依赖：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile &amp;apos;by.stub:stubby4j:3.3.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;启动与停止stubby4j&quot;&gt;&lt;a href=&quot;#启动与停止stubby4j&quot; class=&quot;headerlink&quot; title=&quot;启动与停止stubby4j&quot;&gt;&lt;/a&gt;启动与停止stubby4j&lt;/h4&gt;&lt;p&gt;在集成测试启动之前执行&lt;code&gt;startJetty&lt;/code&gt;，常用启动方法如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;startJetty(&amp;quot;stubby4j.yml&amp;quot;)  # localhost默认端口: Stubs(8882), Admin(8889) and SslStubs portals(7443) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;startJetty(8882, &amp;quot;stubby4j.yml&amp;quot;) # 可以指定Stubs端口，其它为默认值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;startJetty(8882, 8889， &amp;quot;stubby4j.yml&amp;quot;) # 可以指定Stubs和Admin端口，其它为默认值&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在集成测试运行完成后需要关闭stubby4j服务：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;stopJetty()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;基于YAML文件的示例&quot;&gt;&lt;a href=&quot;#基于YAML文件的示例&quot; class=&quot;headerlink&quot; title=&quot;基于YAML文件的示例&quot;&gt;&lt;/a&gt;基于YAML文件的示例&lt;/h4&gt;&lt;p&gt;示例一：模拟GET请求并返回Json格式Payload&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-  request:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      method: GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      url: /users/111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   response:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      status: 200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      headers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         content-type: application/json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body: &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      	&amp;#123;&amp;quot;userId&amp;quot;: 111, &amp;quot;userName&amp;quot;: &amp;quot;Peter&amp;quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;示例二：在request时指定多个methods&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-  request:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      url: /anything&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      method: [GET, HEAD]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-  request:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      url: /anything&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      method:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         -  GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         -  HEAD&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;示例三：可以指定查询参数&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;示例四：POST时指定发送的Payload&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;示例五：返回的Response是Json文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更多示例可以参考&lt;a href=&quot;https://github.com/azagniotov/stubby4j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github stubby4j&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/azagniotov/stubby4j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github stubby4j&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Stubby4J一款灵活可配置的基于HTTP(s)协议测试Web服务交互的工具，采用内嵌式的Jetty作为HTTP服务器，它的主要作用在于，可以在集成测试时，用来模拟第三方Web服务的API行为，比如，目前比较流行的RESTful架构风格的Web服务，
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="Stub" scheme="http://blog.waterstrong.me/tags/Stub/"/>
    
      <category term="Mock" scheme="http://blog.waterstrong.me/tags/Mock/"/>
    
      <category term="HTTP" scheme="http://blog.waterstrong.me/tags/HTTP/"/>
    
      <category term="REST" scheme="http://blog.waterstrong.me/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>快速掌握和使用Flyway</title>
    <link href="http://blog.waterstrong.me/flyway-in-practice/"/>
    <id>http://blog.waterstrong.me/flyway-in-practice/</id>
    <published>2016-08-31T13:32:16.000Z</published>
    <updated>2016-09-04T10:40:16.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是Flyway&quot;&gt;&lt;a href=&quot;#什么是Flyway&quot; class=&quot;headerlink&quot; title=&quot;什么是Flyway?&quot;&gt;&lt;/a&gt;什么是Flyway?&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Flyway is an open-source database migration tool. It strongly favors simplicity and convention over configuration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Flyway是一款开源的数据库版本管理工具，它更倾向于规约优于配置的方式。Flyway可以独立于应用实现管理并跟踪数据库变更，支持数据库版本自动升级，并且有一套默认的规约，不需要复杂的配置，Migrations可以写成SQL脚本，也可以写在Java代码中，不仅支持Command Line和Java API，还支持Build构建工具和Spring Boot等，同时在分布式环境下能够安全可靠地升级数据库，同时也支持失败恢复等。&lt;/p&gt;
&lt;p&gt;Flyway主要基于6种基本命令：&lt;code&gt;Migrate&lt;/code&gt;, &lt;code&gt;Clean&lt;/code&gt;, &lt;code&gt;Info&lt;/code&gt;, &lt;code&gt;Validate&lt;/code&gt;, &lt;code&gt;Baseline&lt;/code&gt; and &lt;code&gt;Repair&lt;/code&gt;，稍候会逐一分析讲解。目前支持的数据库主要有：Oracle, SQL Server, SQL Azure, DB2, DB2 z/OS, MySQL(including Amazon RDS), MariaDB, Google Cloud SQL, PostgreSQL(including Amazon RDS and Heroku), Redshift, Vertica, H2, Hsql, Derby, SQLite, SAP HANA, solidDB, Sybase ASE and Phoenix.&lt;/p&gt;
&lt;p&gt;关于Flyway的优势，支持的数据库以及与其他数据库版本工具的对比，可以阅读&lt;a href=&quot;https://flywaydb.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flyway官网介绍&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;为什么使用Flyway&quot;&gt;&lt;a href=&quot;#为什么使用Flyway&quot; class=&quot;headerlink&quot; title=&quot;为什么使用Flyway?&quot;&gt;&lt;/a&gt;为什么使用Flyway?&lt;/h2&gt;&lt;p&gt;通常在项目开始时会针对数据库进行全局设计，但在开发产品新特性过程中，难免会遇到需要更新数据库Schema的情况，比如：添加新表，添加新字段和约束等，这种情况在实际项目中也经常发生。那么，当开发人员完成了对数据库更的SQL脚本后，如何快速地在其他开发者机器上同步？并且如何在测试服务器上快速同步？以及如何保证集成测试能够顺利执行并通过呢？&lt;/p&gt;
&lt;p&gt;假设以Spring Boot技术栈项目为例，可能有人会说，本地使用Hibernate自动更新数据库Schema模式，然后让QA或DEV到测试服务器上手动执行SQL脚本，同时可以写一个Gradle任务自动执行更新。&lt;/p&gt;
&lt;p&gt;个人觉得，对于Hibernate自动更新数据库，感觉不靠谱，不透明，控制自由度不高，而且有时很容易就会犯错，比如：用SQL创建的某个字段为VARCHAR类型，而在Entity中配置的为CHAR类型，那么在运行集成测试时，自动创建的数据库表中的字段为CHAR类型，而实际SQL脚本期望的是VARCHAR类型，虽然测试通过了，但不是期望的行为，并且在本地bootRun或服务器上运行Service时都会失败。另外，到各测试服务器上手动执行SQL脚本费时费神费力的，干嘛不自动化呢，当然，对于高级别和PROD环境，还是需要DBA手动执行的。最后，写一段自动化程序来自动执行更新，想法是很好的，那如果已经有了一些插件或库可以帮助你更好地实现这样的功能，为何不好好利用一下呢，当然，如果是为了学习目的，重复造轮子是无可厚非的。&lt;/p&gt;
&lt;p&gt;其实，以上问题可以通过Flyway工具来解决，Flyway可以实现自动化的数据库版本管理，并且能够记录数据库版本更新记录，Flyway官网对&lt;a href=&quot;https://flywaydb.org/getstarted/why&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why database migrations&lt;/a&gt;结合示例进行了详细的阐述，有兴趣可以参阅一下。&lt;/p&gt;
&lt;h2 id=&quot;Flyway如何工作的&quot;&gt;&lt;a href=&quot;#Flyway如何工作的&quot; class=&quot;headerlink&quot; title=&quot;Flyway如何工作的?&quot;&gt;&lt;/a&gt;Flyway如何工作的?&lt;/h2&gt;&lt;p&gt;Flyway对数据库进行版本管理主要由Metadata表和6种命令完成，Metadata主要用于记录元数据，每种命令功能和解决的问题范围不一样，以下分别对metadata表和这些命令进行阐述，其中的示意图都来自Flyway的官方文档。&lt;/p&gt;
&lt;h4 id=&quot;Metadata-Table&quot;&gt;&lt;a href=&quot;#Metadata-Table&quot; class=&quot;headerlink&quot; title=&quot;Metadata Table&quot;&gt;&lt;/a&gt;Metadata Table&lt;/h4&gt;&lt;p&gt;Flyway中最核心的就是用于记录所有版本演化和状态的Metadata表，在Flyway首次启动时会创建默认名为&lt;code&gt;SCHEMA_VERSION&lt;/code&gt;的元数据表，其表结构为(以MySQL为例)：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Field&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Type&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Null&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Key&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;version_rank&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;int(11)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;MUL&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;installed_rank&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;int(11)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;MUL&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;version&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;varchar(50)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;PRI&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;description&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;varchar(200)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;type&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;varchar(20)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;script&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;varchar(1000)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;checksum&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;int(11)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;installed_by&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;varchar(100)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;installed_on&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;timestamp&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;CURRENT_TIMESTAMP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;execution_time&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;int(11)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;success&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;tinyint(1)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;MUL&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Flyway官网上提供了一个很清晰的示例&lt;a href=&quot;https://flywaydb.org/getstarted/how&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Flyway works&lt;/a&gt;，可以参阅一下。&lt;/p&gt;
&lt;h4 id=&quot;Migrate&quot;&gt;&lt;a href=&quot;#Migrate&quot; class=&quot;headerlink&quot; title=&quot;Migrate&quot;&gt;&lt;/a&gt;Migrate&lt;/h4&gt;&lt;p&gt;Migrate是指把数据库Schema迁移到最新版本，是Flyway工作流的核心功能，Flyway在Migrate时会检查Metadata(元数据)表，如果不存在会创建Metadata表，Metadata表主要用于记录版本变更历史以及Checksum之类的。&lt;br&gt;&lt;img src=&quot;/assets/flyway-in-practice/command_migrate.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Migrate时会扫描指定文件系统或Classpath下的Migrations(可以理解为数据库的版本脚本)，并且会逐一比对Metadata表中的已存在的版本记录，如果有未应用的Migrations，Flyway会获取这些Migrations并按次序Apply到数据库中，否则不需要做任何事情。另外，通常在应用程序启动时应默认执行Migrate操作，从而避免程序和数据库的不一致性。&lt;/p&gt;
&lt;h4 id=&quot;Clean&quot;&gt;&lt;a href=&quot;#Clean&quot; class=&quot;headerlink&quot; title=&quot;Clean&quot;&gt;&lt;/a&gt;Clean&lt;/h4&gt;&lt;p&gt;Clean相对比较容易理解，即清除掉对应数据库Schema中的所有对象，包括表结构，视图，存储过程，函数以及所有的数据等都会被清除。&lt;br&gt;&lt;img src=&quot;/assets/flyway-in-practice/command_clean.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Clean操作在开发和测试阶段是非常有用的，它能够帮助快速有效地更新和重新生成数据库表结构，但特别注意的是：不应在Production的数据库上使用！&lt;/p&gt;
&lt;h4 id=&quot;Info&quot;&gt;&lt;a href=&quot;#Info&quot; class=&quot;headerlink&quot; title=&quot;Info&quot;&gt;&lt;/a&gt;Info&lt;/h4&gt;&lt;p&gt;Info用于打印所有Migrations的详细和状态信息，其实也是通过Metadata表和Migrations完成的，下图很好地示意了Info打印出来的信息。&lt;br&gt;&lt;img src=&quot;/assets/flyway-in-practice/command_info.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Info能够帮助快速定位当前的数据库版本，以及查看执行成功和失败的Migrations。&lt;/p&gt;
&lt;h4 id=&quot;Validate&quot;&gt;&lt;a href=&quot;#Validate&quot; class=&quot;headerlink&quot; title=&quot;Validate&quot;&gt;&lt;/a&gt;Validate&lt;/h4&gt;&lt;p&gt;Validate是指验证已经Apply的Migrations是否有变更，Flyway是默认是开启验证的。&lt;br&gt;&lt;img src=&quot;/assets/flyway-in-practice/command_validate.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Validate原理是对比Metadata表与本地Migrations的Checksum值，如果值相同则验证通过，否则验证失败，从而可以防止对已经Apply到数据库的本地Migrations的无意修改。&lt;/p&gt;
&lt;h4 id=&quot;Baseline&quot;&gt;&lt;a href=&quot;#Baseline&quot; class=&quot;headerlink&quot; title=&quot;Baseline&quot;&gt;&lt;/a&gt;Baseline&lt;/h4&gt;&lt;p&gt;Baseline针对已经存在Schema结构的数据库的一种解决方案，即实现在非空数据库中新建Metadata表，并把Migrations应用到该数据库。&lt;br&gt;&lt;img src=&quot;/assets/flyway-in-practice/command_baseline.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Baseline可以应用到特定的版本，这样在已有表结构的数据库中也可以实现添加Metadata表，从而利用Flyway进行新Migrations的管理了。&lt;/p&gt;
&lt;h4 id=&quot;Repair&quot;&gt;&lt;a href=&quot;#Repair&quot; class=&quot;headerlink&quot; title=&quot;Repair&quot;&gt;&lt;/a&gt;Repair&lt;/h4&gt;&lt;p&gt;Repair操作能够修复Metadata表，该操作在Metadata表出现错误时是非常有用的。&lt;br&gt;&lt;img src=&quot;/assets/flyway-in-practice/command_repair.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Repair会修复Metadata表的错误，通常有两种用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;移除失败的Migration记录，该问题只是针对不支持DDL事务的数据库。&lt;/li&gt;
&lt;li&gt;重新调整已经应用的Migratons的Checksums值，比如：某个Migratinon已经被应用，但本地进行了修改，又期望重新应用并调整Checksum值，不过尽量不要这样操作，否则可能造成其它环境失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何使用Flyway&quot;&gt;&lt;a href=&quot;#如何使用Flyway&quot; class=&quot;headerlink&quot; title=&quot;如何使用Flyway?&quot;&gt;&lt;/a&gt;如何使用Flyway?&lt;/h2&gt;&lt;p&gt;这里将主要关注在Gradle和Spring Boot中集成并使用Flyway，数据库通常会采用MySQL、PostgreSQL、H2或Hsql等。&lt;/p&gt;
&lt;h4 id=&quot;正确创建Migrations&quot;&gt;&lt;a href=&quot;#正确创建Migrations&quot; class=&quot;headerlink&quot; title=&quot;正确创建Migrations&quot;&gt;&lt;/a&gt;正确创建Migrations&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Migrations&lt;/strong&gt;是指Flyway在更新数据库时是使用的版本脚本，比如：一个基于Sql的Migration命名为&lt;code&gt;V1__init_tables.sql&lt;/code&gt;，内容即是创建所有表的sql语句，另外，Flyway也支持基于Java的Migration。Flyway加载Migrations的默认Locations为&lt;code&gt;classpath:db/migration&lt;/code&gt;，也可以指定&lt;code&gt;filesystem:/project/folder&lt;/code&gt;，其加载是在Runtime自动递归地执行的。&lt;br&gt;&lt;img src=&quot;/assets/flyway-in-practice/sql_migration_base_dir.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;除了需要指定Location外，Flyway对Migrations的扫描还必须遵从一定的命名模式，Migration主要分为两类：Versioned和Repeatable。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Versioned migrations&lt;/strong&gt;&lt;br&gt;一般常用的是Versioned类型，用于版本升级，每一个版本都有一个唯一的标识并且只能被应用一次，并且不能再修改已经加载过的Migrations，因为Metadata表会记录其Checksum值。其中的version标识版本号，由一个或多个数字构成，数字之间的分隔符可以采用点或下划线，在运行时下划线其实也是被替换成点了，每一部分的前导零会被自动忽略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Repeatable migrations&lt;/strong&gt;&lt;br&gt;Repeatable是指可重复加载的Migrations，其每一次的更新会影响Checksum值，然后都会被重新加载，并不用于版本升级。对于管理不稳定的数据库对象的更新时非常有用。Repeatable的Migrations总是在Versioned之后按顺序执行，但开发者必须自己维护脚本并且确保可以重复执行，通常会在sql语句中使用&lt;code&gt;CREATE OR REPLACE&lt;/code&gt;来保证可重复执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认情况下基于Sql的Migration文件的命令规则如下图所示：&lt;br&gt;&lt;img src=&quot;/assets/flyway-in-practice/sql_migration_naming.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中的文件名由以下部分组成，除了使用默认配置外，某些部分还可自定义规则。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prefix: 可配置，前缀标识，默认值&lt;code&gt;V&lt;/code&gt;表示Versioned，&lt;code&gt;R&lt;/code&gt;表示Repeatable&lt;/li&gt;
&lt;li&gt;version: 标识版本号，由一个或多个数字构成，数字之间的分隔符可用点&lt;code&gt;.&lt;/code&gt;或下划线&lt;code&gt;_&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;separator: 可配置，用于分隔版本标识与描述信息，默认为两个下划线&lt;code&gt;__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;description: 描述信息，文字之间可以用下划线或空格分隔&lt;/li&gt;
&lt;li&gt;suffix: 可配置，后续标识，默认为&lt;code&gt;.sql&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，关于如何使用基于Java的Migrations，有兴趣可以参考&lt;a href=&quot;https://flywaydb.org/documentation/migration/java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java-based migrations&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;支持的数据库&quot;&gt;&lt;a href=&quot;#支持的数据库&quot; class=&quot;headerlink&quot; title=&quot;支持的数据库&quot;&gt;&lt;/a&gt;支持的数据库&lt;/h4&gt;&lt;p&gt;目前Flyway支持的数据库还是挺多的，包括：Oracle, SQL Server, SQL Azure, DB2, DB2 z/OS, MySQL(including Amazon RDS), MariaDB, Google Cloud SQL, PostgreSQL(including Amazon RDS and Heroku), Redshift, Vertica, H2, Hsql, Derby, SQLite, SAP HANA, solidDB, Sybase ASE and Phoenix。&lt;br&gt;目前来说，个人用得比较多的数据库是&lt;a href=&quot;https://flywaydb.org/documentation/database/postgresql&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PostgreSQL&lt;/a&gt;、&lt;a href=&quot;https://flywaydb.org/documentation/database/mysql&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MySQL&lt;/a&gt;、&lt;a href=&quot;https://flywaydb.org/documentation/database/h2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;H2&lt;/a&gt;和&lt;a href=&quot;https://flywaydb.org/documentation/database/hsql&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hsql&lt;/a&gt;，针对每种数据库的&lt;code&gt;flyway.url&lt;/code&gt;示例配置为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# PostgreSQL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.url = jdbc:postgresql://localhost:5432/postgres?currentSchema=myschema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# MySQL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.url = jdbc:mysql://localhost:3306/testdb?serverTimezone=UTC&amp;amp;useSSL=true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# H2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.url = jdbc:h2:./.tmp/testdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Hsql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.url = jdbc:hsqldb:hsql//localhost:1476/testdb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Flyway命令行&quot;&gt;&lt;a href=&quot;#Flyway命令行&quot; class=&quot;headerlink&quot; title=&quot;Flyway命令行&quot;&gt;&lt;/a&gt;Flyway命令行&lt;/h4&gt;&lt;p&gt;Flyway的命令行工具支持直接在命令行中运行&lt;code&gt;Migrate&lt;/code&gt;, &lt;code&gt;Clean&lt;/code&gt;, &lt;code&gt;Info&lt;/code&gt;, &lt;code&gt;Validate&lt;/code&gt;, &lt;code&gt;Baseline&lt;/code&gt;和&lt;code&gt;Repair&lt;/code&gt;6种命令，不需要借助其他Build工具，不需要应用程序运行在JVM中，只需要单纯的命令行即可，但需要根据不同的操作系统&lt;a href=&quot;https://flywaydb.org/documentation/commandline/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载&lt;/a&gt;并安装该命令行工具。Flyway会依次搜索以下配置文件，越靠后的配置会覆盖靠前的配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;install-dir&gt;/conf/flyway.conf&lt;/install-dir&gt;&lt;/li&gt;
&lt;li&gt;&lt;user-home&gt;/flyway.conf&lt;/user-home&gt;&lt;/li&gt;
&lt;li&gt;&lt;current-dir&gt;/flyway.conf&lt;/current-dir&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个典型Flyway项目示例目录结构如下：&lt;br&gt;&lt;img src=&quot;/assets/flyway-in-practice/cli_directory_structure.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;更多关于Flyway命令行使用可以参考&lt;a href=&quot;https://flywaydb.org/documentation/commandline/migrate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flyway Command-line&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;在Gradle中的应用&quot;&gt;&lt;a href=&quot;#在Gradle中的应用&quot; class=&quot;headerlink&quot; title=&quot;在Gradle中的应用&quot;&gt;&lt;/a&gt;在Gradle中的应用&lt;/h4&gt;&lt;p&gt;首先需要在Gradle中引入Flyway插件，通常有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方式一：采用buildscript依赖方式。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mavenCentral()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath(&amp;quot;org.flywaydb:flyway-gradle-plugin:4.0.3&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;org.flywaydb.flyway&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方式二（推荐）：采用DSL方式引用Plugins。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;plugins &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id &amp;quot;org.flywaydb.flyway&amp;quot; version &amp;quot;4.0.3&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而在Gradle中配置Flyway Properties有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方式一：在&lt;code&gt;build.gradle&lt;/code&gt;中配置Flyway Properties。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flyway &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	url = jdbc:h2:./.tmp/testdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	user = sa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	password = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 或者写成：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project.ext[&amp;apos;flyway.url&amp;apos;] = &amp;apos;jdbc:h2:./.tmp/testdb&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project.ext[&amp;apos;flyway.user&amp;apos;] = &amp;apos;sa&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project.ext[&amp;apos;flyway.password&amp;apos;] = &amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方式二：在&lt;code&gt;gradle.properties&lt;/code&gt;中配置Flyway Properties。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flyway.url = jdbc:h2:./.tmp/testdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.user = sa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.password =&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果期望在运行Gradle Clean/Build Tasks时自动执行Flyway的某些任务，可以设置&lt;code&gt;dependsOn&lt;/code&gt;，若不期望隐式执行Flyway任务，可以不配置。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clean.dependsOn flywayRepair  # To repair the Flyway metadata table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;build.dependsOn flywayMigrate  # To migrate the schema to the latest version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另外，其它Tasks：&lt;code&gt;flywayInfo&lt;/code&gt;, &lt;code&gt;flywayValidate&lt;/code&gt;, &lt;code&gt;flywayBaseline&lt;/code&gt;分别对应到Flyway的命令。在使用Spring Boot时，运行&lt;code&gt;./gradlew bootRun&lt;/code&gt;会自动检查并加载最新的db.migration脚本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特别注意：&lt;/strong&gt;在Production环境中不应执行&lt;code&gt;./gradlew flywayClean&lt;/code&gt;，除非你知道自己的行为和目的，因为该命令会清除所有的数据库对象，相当危险。&lt;/p&gt;
&lt;p&gt;更多关于Flyway在Gradle中的使用请参阅&lt;a href=&quot;https://flywaydb.org/documentation/gradle/migrate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flyway Gradle Plugin&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;与Spring-Boot集成&quot;&gt;&lt;a href=&quot;#与Spring-Boot集成&quot; class=&quot;headerlink&quot; title=&quot;与Spring Boot集成&quot;&gt;&lt;/a&gt;与Spring Boot集成&lt;/h4&gt;&lt;p&gt;在Spring Boot中，如果加入Flyway的依赖，则会&lt;u&gt;自动引用Flyway并使用默认值&lt;/u&gt;，但可以修改并配置&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v1.4.0.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayProperties.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FlywayProperties&lt;/a&gt;。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flyway.baseline-description= # The description to tag an existing schema with when executing baseline.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.baseline-version=1 # Version to start migration.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.baseline-on-migrate=false # Whether to execute migration against a non-empty schema with no metadata table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.check-location=false # Check that migration scripts location exists.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.clean-on-validation-error=false # will clean all objects. Warning! Do NOT enable in production!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.enabled=true # Enable flyway.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.encoding=UTF-8 # The encoding of migrations.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.ignore-failed-future-migration=true # Ignore future migrations when reading the metadata table.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.locations=classpath:db/migration # locations of migrations scripts.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.out-of-order=false # Allows migrations to be run &amp;quot;out of order&amp;quot;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.placeholder-prefix=$&amp;#123; # The prefix of every placeholder.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.placeholder-replacement=true # Whether placeholders should be replaced.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.placeholder-suffix=&amp;#123; # The suffix of every placeholder.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.placeholders.*= # Placeholders to replace in Sql migrations.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.schemas= # Default schema of the connection and updating&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.sql-migration-prefix=V # The file name prefix for Sql migrations&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.sql-migration-separator=__ # The file name separator for Sql migrations&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.sql-migration-suffix=.sql # The file name suffix for Sql migrations&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.table=schema_version # The name of Flyway&amp;apos;s metadata table.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.user= # Login user of the database to migrate. If not set, use spring.datasource.username value.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.password= # JDBC password if you want Flyway to create its own DataSource.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flyway.validate-on-migrate=true # Validate sql migration CRC32 checksum in classpath.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;若使用Gradle，通常在&lt;code&gt;build.gradle&lt;/code&gt;引入&lt;code&gt;org.flywaydb:flyway-core:4.0.3&lt;/code&gt;依赖后即可使用。可能会有以下几种需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在本地Run和Tests都会使用内存数据库，其中的&lt;code&gt;spring.jpa.hibernate.ddl-auto&lt;/code&gt;都设置为&lt;code&gt;validate&lt;/code&gt;，Schema不需要Hibernate自动生成，并期望使用Flyway，而在线上环境会使用真实数据库，并不期望使用Flyway，如何实现呢？&lt;br&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;可以在&lt;code&gt;common.properties&lt;/code&gt;中配置&lt;code&gt;flyway.enabled=false&lt;/code&gt;，然后在local或dev的配置中启用Flyway即可。通常推荐使用此模式，毕竟可以对不同的环境进行控制，另外本地Run不会依赖真实数据库，又能保证数据库Schema是按脚本创建的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在运行Tests会使用内存数据库，有单独的配置文件，不使用Flyway，而在本地bootRun时会使用真实数据库，使用Flyway，毕竟不想每次Schema改后都在本地手动去执行脚本，如何实现？&lt;br&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;设置&lt;code&gt;bootRun.dependsOn&lt;/code&gt;动态添加Flyway的依赖即可：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;addFlywayDenpendency &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	doLast &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			compile(&amp;apos;org.flywaydb:flyway-core:4.0.3&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bootRun.dependsOn=addFlywayDenpendency&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若项目有多个团队同时开发不同的功能，需要新建多个分支，并且都会涉及到数据库Schema更改，当后期Merge时，Migration的版本如何控制并且不会产生数据库更改的冲突呢？&lt;br&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;如果两个分支的数据库更改有冲突，要么最初数据库设计不合理，要么目前数据库更改不合理，所以需要团队进行全局考虑和协调。而针对数据库在同一段时间有修改，但不会造成冲突的情况，通常实际项目中主要存在这样的情况，那可以设置&lt;code&gt;flyway.out-of-order=true&lt;/code&gt;，这样允许当v1和v3已经被应用后，v2出现时同样也可以被应用。其实在本地使用内存数据库不会存在该问题，因为数据库所有对象会自动清除掉，而在local或dev中使用真实数据库时可遇到这样的问题，因此需要注意一下了。&lt;br&gt;另外，值得一提的是Flyway的参数&lt;code&gt;ignore-failed-future-migration&lt;/code&gt;默认为&lt;code&gt;true&lt;/code&gt;，使用情形为：当Rollback数据库更改到旧版本，而metadata表中已存在了新版本时，Flyway会忽略此错误，只会显示警告信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;结束语&quot;&gt;&lt;a href=&quot;#结束语&quot; class=&quot;headerlink&quot; title=&quot;结束语&quot;&gt;&lt;/a&gt;结束语&lt;/h2&gt;&lt;p&gt;总得来说，Flyway可以有效改善数据库版本管理方式，如果项目中还未使用，不防尝试一下。如果有兴趣，也可以关注&lt;a href=&quot;http://mybatis.github.io/migrations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MyBatis Migration&lt;/a&gt;，功能支持没有Flyway多，属于更轻量级的数据库版本管理工具。如果在使用过程中遇到了问题或坑，欢迎留言一起交流讨论。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://flywaydb.org/documentation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flyway Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://flywaydb.org/documentation/gradle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Plugin: Flyway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Common application properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html#howto-execute-flyway-database-migrations-on-startup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Execute Flyway database migrations on startup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Flyway是一款开源的数据库版本管理工具，它更倾向于规约优于配置的方式。Flyway可以独立于应用实现管理并跟踪数据库变更，支持数据库版本自动升级，并且有一套默认的规约，不需要复杂的配置，不仅支持命令行和Java API，还支持Build构建工具和Spring Boot等，同时在分布式环境下能够安全可靠地升级数据库。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="数据库" scheme="http://blog.waterstrong.me/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Spring Boot" scheme="http://blog.waterstrong.me/tags/Spring-Boot/"/>
    
      <category term="Gradle" scheme="http://blog.waterstrong.me/tags/Gradle/"/>
    
      <category term="Flyway" scheme="http://blog.waterstrong.me/tags/Flyway/"/>
    
      <category term="Migration" scheme="http://blog.waterstrong.me/tags/Migration/"/>
    
  </entry>
  
  <entry>
    <title>代码质量管理SonarQube</title>
    <link href="http://blog.waterstrong.me/sonarqube-by-step/"/>
    <id>http://blog.waterstrong.me/sonarqube-by-step/</id>
    <published>2016-08-20T14:23:48.000Z</published>
    <updated>2016-08-31T14:56:58.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;SonarQube是一个开源的代码质量管理平台，它能够快速分析并定位代码中明显或潜在错误信息，目前支持&lt;a href=&quot;http://docs.sonarqube.org/display/PLUG/Plugin+Library&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20+种语言&lt;/a&gt;，并且有很多&lt;a href=&quot;http://docs.sonarqube.org/display/PLUG/SonarSource+Plugins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;插件Plugins&lt;/a&gt;可以集成。接下来将大致讲解SonarQube的安装、配置及使用。&lt;/p&gt;
&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;&lt;p&gt;以下所有操作均在CentOS下进行，其他系统的过程基本类似，只需要替换成对应命令即可，假设CentOS分配的IP地址为&lt;code&gt;192.168.56.105&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Install-the-SonarQube&quot;&gt;&lt;a href=&quot;#Install-the-SonarQube&quot; class=&quot;headerlink&quot; title=&quot;Install the SonarQube&quot;&gt;&lt;/a&gt;Install the SonarQube&lt;/h4&gt;&lt;p&gt;首先到&lt;a href=&quot;http://www.sonarqube.org/downloads/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SonarQube Download&lt;/a&gt;页面下载压缩包，然后解压到&lt;code&gt;~/sonarqube&lt;/code&gt;文件夹，最后运行命令启动服务，需要Java8运行环境支持。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ~/sonarqube/bin/linux-x86-64/sonar.sh start  # 启动SonarQube服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Usage: ./sonar.sh &amp;#123; console | start | stop | restart | status | dump &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后访问&lt;a href=&quot;http://192.168.56.105:9000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.56.105:9000&lt;/a&gt;将能够看到SonarQube页面，这里需要替换成你的IP地址，SonarQube会默认监听9000端口。&lt;br&gt;&lt;img src=&quot;/assets/sonarqube-by-step/sonarqube_home.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中，默认的管理员登录用户名和密码为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Login: &lt;code&gt;admin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Password: &lt;code&gt;admin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然可以访问了，但当前SonarQube使用的是Embedded数据库，只能用于评估目的，不支持扩展和升级，更不支持数据迁移，因此强烈建议安装一款数据库引擎，不过别着急，稍候会涉及到配置PostgreSQL的操作过程。&lt;/p&gt;
&lt;h4 id=&quot;Install-the-Scanner&quot;&gt;&lt;a href=&quot;#Install-the-Scanner&quot; class=&quot;headerlink&quot; title=&quot;Install the Scanner&quot;&gt;&lt;/a&gt;Install the Scanner&lt;/h4&gt;&lt;p&gt;为了实现扫描项目代码并上传到SonarQube Server的目的，需要再到&lt;a href=&quot;http://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SonarQube Scanner Download&lt;/a&gt;页面下载压缩包并解压，如解压到&lt;code&gt;~/sonar-scanner&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ~/sonar-scanner/bin/sonar-scanner --version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO: Scanner configuration file: ~/sonar-scanner/conf/sonar-scanner.properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO: Project root configuration file: NONE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO: SonarQube Scanner 2.6.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO: Java 1.8.0_66 Oracle Corporation (64-bit)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO: Linux 3.10.0-327.18.2.el7.x86_64 amd64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Configuration&quot;&gt;&lt;a href=&quot;#Configuration&quot; class=&quot;headerlink&quot; title=&quot;Configuration&quot;&gt;&lt;/a&gt;Configuration&lt;/h2&gt;&lt;p&gt;为了使用SonarQube的更多功能，支持扩展、升级和数据迁移，需要配置SonarQube，若安装目录为&lt;code&gt;~/sonarqube&lt;/code&gt;，则需要在安装目录中的&lt;code&gt;conf/sonar.properties&lt;/code&gt;中配置一些参数，主要针对数据库引擎配置和WEB访问地址和端口配置。&lt;/p&gt;
&lt;h4 id=&quot;Database&quot;&gt;&lt;a href=&quot;#Database&quot; class=&quot;headerlink&quot; title=&quot;Database&quot;&gt;&lt;/a&gt;Database&lt;/h4&gt;&lt;p&gt;以配置PostgresSQL为例，首先需要确保安装了PostgresSQL数据库引擎。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Database Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.jdbc.username=postgres  # 好的方式是单独创建一个用户，并且授予读写库权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.jdbc.password=postgres  # 若postgresql设置trust本机，则无需提供密码，md5时需提供密码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# PostgreSQL URL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube  # 需要先创建sonarqube数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# MySQL JDBC URL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;rewriteBatchedStatements=true&amp;amp;useConfigs=maxPerformance&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在命令行中登录postgresql，创建命为&lt;code&gt;sonarqube&lt;/code&gt;的数据库，这里为了方便，直接使用postgres用户。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ psql -U postgres&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ CREATE DATABASE sonarqube WITH OWNER postgres ENCODING &amp;apos;UTF8&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;假设遇到了postgresql的登录问题，需要以root权限在&lt;code&gt;/var/lib/pgsql/data/pg_hba.conf&lt;/code&gt;中修改&lt;code&gt;localhost&lt;/code&gt;和&lt;code&gt;127.0.0.1&lt;/code&gt;的&lt;code&gt;peer&lt;/code&gt;为&lt;code&gt;trust&lt;/code&gt;或&lt;code&gt;md5&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#TYPE DATABASE  USER    ADDRESS        METHOD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;local    all    all                    trust&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host     all    all    127.0.0.1/32    trust&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更多其他数据库配置可以参阅&lt;a href=&quot;http://docs.sonarqube.org/display/SONAR/Installing+the+Server&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Installing the Server&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/a&gt;Web&lt;/h4&gt;&lt;p&gt;可以修改&lt;code&gt;sonar.properties&lt;/code&gt;中的Web相关配置控制访问地址和端口。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# The default port is &amp;quot;9000&amp;quot; and the context path is &amp;quot;/&amp;quot;. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# These values can be changed in sonar.properties.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.web.host=0.0.0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.web.port=80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.web.context=/sonarqube&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;若以&lt;code&gt;80&lt;/code&gt;端口启动，可能会遇到权限的错误，需要切换为root用户运行sonar启动命令，可在&lt;code&gt;~/sonarqube/logs/sonar.log&lt;/code&gt;中查看日志。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Failed to initialize end point associated with ProtocolHandler [&amp;quot;http-nio-0.0.0.0-80&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java.net.SocketException: Permission denied&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置完成后重启SonarQube服务，再访问&lt;a href=&quot;http://192.168.56.105/sonarqube&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.56.105/sonarqube&lt;/a&gt;，并且页面底端的红色警告消失了。&lt;br&gt;&lt;img src=&quot;/assets/sonarqube-by-step/sonarqube_home_new.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Analyzing-with-Scanner&quot;&gt;&lt;a href=&quot;#Analyzing-with-Scanner&quot; class=&quot;headerlink&quot; title=&quot;Analyzing with Scanner&quot;&gt;&lt;/a&gt;Analyzing with Scanner&lt;/h2&gt;&lt;h4 id=&quot;Runner&quot;&gt;&lt;a href=&quot;#Runner&quot; class=&quot;headerlink&quot; title=&quot;Runner&quot;&gt;&lt;/a&gt;Runner&lt;/h4&gt;&lt;p&gt;通常可以直接运行Runner实现对支持语言的项目代码进行扫描。假设Sonar Scanner被解压到&lt;code&gt;~/sonar-scanner&lt;/code&gt;文件夹中，随意找一个项目代码，并在其中添加&lt;code&gt;sonar-project.properties&lt;/code&gt;配置文件，针对Java项目的配置如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Default SonarQube server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# sonar.host.url=http://localhost:9000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.host.url=http://192.168.56.105/sonarqube&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Must be unique in a given SonarQube instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.projectKey=twee:qas-service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# This is the name displayed in the SonarQube UI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.projectName=QAS Service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.projectVersion=1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Comma-separated paths to directories with sources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Path is relative to the sonar-project.properties file. Replace &amp;quot;\&amp;quot; by &amp;quot;/&amp;quot; on Windows.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Since SonarQube 4.2, this property is optional if sonar.modules is set. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# If not set, SonarQube starts looking for source code from the directory containing &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# the sonar-project.properties file.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.sources=src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Language&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.language=java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Encoding of the source code. Default is default system encoding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.sourceEncoding=UTF-8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果暂时自己没有适合的代码，也可以使用官方提供的&lt;a href=&quot;https://github.com/SonarSource/sonar-examples/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Project Samples&lt;/a&gt;，然后在项目代码目录下运行如下命令进行Sonar Scanner扫描代码。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;~/sonar-scanner/bin/sonar-scanner  # 当然也可以直接把bin目录加入环境变量中&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行后sonarqube runner后，界面上显示一条最新的Item记录：&lt;br&gt;&lt;img src=&quot;/assets/sonarqube-by-step/runner_scan_item.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;更多配置和用法可以参阅&lt;a href=&quot;http://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Analyzing with SonarQube Scanner&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Gradle&quot;&gt;&lt;a href=&quot;#Gradle&quot; class=&quot;headerlink&quot; title=&quot;Gradle&quot;&gt;&lt;/a&gt;Gradle&lt;/h4&gt;&lt;p&gt;SonarQube支持Gradle 2.0以上的版本，以下来将配置&lt;code&gt;build.gradle&lt;/code&gt;文件，使得支持SonarQube任务。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Uses DSL plugins resolution introduced in Gradle 2.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plugins &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  id &amp;quot;org.sonarqube&amp;quot; version &amp;quot;2.0.1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonarqube &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    properties &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        property &amp;quot;sonar.projectName&amp;quot;, &amp;quot;QAS Service&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        property &amp;quot;sonar.projectKey&amp;quot;, &amp;quot;tw.wee:qas-service&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        property &amp;quot;sonar.projectVersion&amp;quot;, &amp;quot;v1.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        property &amp;quot;sonar.jacoco.reportPath&amp;quot;, &amp;quot;$&amp;#123;project.buildDir&amp;#125;/jacoco/test.exec&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还需要在&lt;code&gt;gradle.properties&lt;/code&gt;中配置SonarQube地址和登录信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemProp.sonar.host.url=http://192.168.56.105/sonarqube&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 当sonar.forceAuthentication被设置成true时需要提供登录信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.login=admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sonar.password=admin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Gradle的Task为：&lt;code&gt;./gradlew sonarqube&lt;/code&gt;，并且可以指定HOST和PASSWORD，这样就避免了把密码明文写在配置文件中。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./gradlew sonarqube -Dsonar.host.url=http://xxx/sonar -Dsonar.jdbc.password=*** -Dsonar.verbose=true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行sonarqube tasks后，刷新界面，又多了一条新记录：&lt;br&gt;&lt;img src=&quot;/assets/sonarqube-by-step/gradle_scan_item.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击进入查看详细扫描结果：&lt;br&gt;&lt;img src=&quot;/assets/sonarqube-by-step/scanner_results.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;更多关于Gradle的配置可以参阅&lt;a href=&quot;http://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Gradle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Analyzing with SonarQube Scanner for Gradle&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;SonarQube扫描还可以与Jenkins集成，有兴趣可以参阅&lt;a href=&quot;http://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Jenkins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Analyzing with SonarQube Scanner for Jenkins&lt;/a&gt;实现步骤。&lt;/p&gt;
&lt;p&gt;除此之外，还可以对SonarQube的Dashboard进行配置，针对项目选择并添加一些需要关注和分析的Widget。&lt;br&gt;&lt;img src=&quot;/assets/sonarqube-by-step/widget_dashboard.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sonarqube.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SonarQube官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.percona.com/blog/2007/11/01/innodb-performance-optimization-basics/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Innodb Performance Optimization Basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      SonarQube是一个开源的代码质量管理平台，它能够快速分析并定位代码中明显或潜在错误信息，目前支持20+种语言的分析，并且有很多插件可以集成。
    
    </summary>
    
      <category term="Platforms" scheme="http://blog.waterstrong.me/categories/Platforms/"/>
    
    
      <category term="Code Quality" scheme="http://blog.waterstrong.me/tags/Code-Quality/"/>
    
      <category term="Sonar Qube" scheme="http://blog.waterstrong.me/tags/Sonar-Qube/"/>
    
  </entry>
  
  <entry>
    <title>优雅地使用Git</title>
    <link href="http://blog.waterstrong.me/master-git/"/>
    <id>http://blog.waterstrong.me/master-git/</id>
    <published>2016-08-12T14:29:48.000Z</published>
    <updated>2016-08-31T14:56:58.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;前几天遇到一些关于权限和rebase的问题，另外，之前也有被多次问到在某某情况下怎么处理，某某操作是什么命令，某某命令怎么用等等的问题，当然，还有一些其他不常用的Git命令，但真正需要的时候又比较棘手，估计大部分人只会使用一些简单常规并且在正常流程下的命令，鉴于此，觉得还是有必要分享一下。&lt;/p&gt;
&lt;p&gt;如果你已经是Git高手了，这篇博客对你意义不大，不过可以下方留言，补充更多的信息。如果你是从来没有使用过Git的，这篇博客也不太适合你，不过我会给出一些简单说明和入门教程的链接，如果你有兴趣学习的话，想必能够帮到你。如果你是Git新用户，或者使用Git有一段时间了，但经常会遇到一些棘手问题不知所措，那本博客应该会对你有一些帮助。&lt;/p&gt;
&lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Git是一款免费且开源的分布式版本控制系统(DVCS)，Git是由Linux之父Linus Torvalds在2005年创造出来最初用于管理Linux内核代码，解决与其他贡献者协同开发的问题，Git能以非常高效的方式管理各种规模的项目，分布式意味着每个人的电脑都是一个完整的版本控制库，并且工作时都不需要联网，相对于其他版本控制管理系统，优势不只是一个两个数量级，目前算是世界上最先进的分布式版本控制系统。&lt;/p&gt;
&lt;p&gt;首先特别需要提一下Git的三种状态: committed(已提交), modified(已修改)和staged(已暂存)，同时也需要理解一下git directory(Git版本库), working directory(工作区)和staging area(暂存区)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git Directory(Repository): Git版本库，有一个&lt;code&gt;.git&lt;/code&gt;的隐藏目录，即版本库，存放了元数据和数据库文件。&lt;/li&gt;
&lt;li&gt;Working Directory: 工作区，指正在工作的目录，&lt;code&gt;.git&lt;/code&gt;版本库目录除外。&lt;/li&gt;
&lt;li&gt;Staging Area: 暂存区，在版本库中，一个包含待提交信息或缓存的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，Git工作的一般流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在工作区中添加或修改文件&lt;/li&gt;
&lt;li&gt;将文件快照添加到暂存区中&lt;/li&gt;
&lt;li&gt;将暂存区的文件提交并永久存入版本库&lt;br&gt;&lt;img src=&quot;/assets/master-git/areas.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多细节和原理介绍可以阅读&lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git官网介绍&lt;/a&gt;，这里就不再赘述。&lt;/p&gt;
&lt;h2 id=&quot;Git准备&quot;&gt;&lt;a href=&quot;#Git准备&quot; class=&quot;headerlink&quot; title=&quot;Git准备&quot;&gt;&lt;/a&gt;Git准备&lt;/h2&gt;&lt;p&gt;首先必需要提出来的是，强烈建议使用CLI，不要总想着GUI，如果你能对你执行的操作有完全掌控，你不必担心出现一些非意料的问题，并且当你使用熟练后你会发现CLI比GUI效率高很多，另外，当你从鼠标转移到了键盘上后，你才会感受到，原来生活可以变得如此美好。接下来会简单列举入门准备的步骤：&lt;/p&gt;
&lt;h4 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h4&gt;&lt;p&gt;请根据操作系统下载并安装Git，请参见&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git Downloads&lt;/a&gt;。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git --version  # 查看安装版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git help -a  # 列出所有子命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git help &amp;lt;command&amp;gt;  # 查看某个子命令的帮助&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git help -g  # 列出一些概念引导&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git help &amp;lt;concept&amp;gt;  # 查看某个概念引导，比如git help tutorial&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Configuration&quot;&gt;&lt;a href=&quot;#Configuration&quot; class=&quot;headerlink&quot; title=&quot;Configuration&quot;&gt;&lt;/a&gt;Configuration&lt;/h4&gt;&lt;p&gt;因为Git是分布式的，需要在本地配置Git用户名和邮箱作为一个标识。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &amp;quot;your_name&amp;quot;  # 若无参数，则表示查看当前配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &amp;quot;your_email&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;加上&lt;code&gt;--global&lt;/code&gt;参数表明所有Project都使用这一配置，如果需要针对某个单独Project进行设置，可以在指定的Project中输入上述命令，但不需要&lt;code&gt;--global&lt;/code&gt;参数。&lt;/p&gt;
&lt;h4 id=&quot;Repository&quot;&gt;&lt;a href=&quot;#Repository&quot; class=&quot;headerlink&quot; title=&quot;Repository&quot;&gt;&lt;/a&gt;Repository&lt;/h4&gt;&lt;p&gt;现在可以在本地创建一个Git仓库并进行版本管理，最最基础的常用命令如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init  # 初始化一个版本库，会生成.git文件夹，可以添加.gitignore文件来标识需要忽略的项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git clone git@github.com:xxx/demo.git [new_name]  # 克隆远程库，可指定新目录名，默认与远程库相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git status  # 查看状态，该命令会非常频繁地用到，建议每一步都check一下状态，确保操作都正确了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add xxx  # 添加指定的文件到暂存区，可以用Regex匹配，如&amp;apos;*.txt&amp;apos;，对于新增文件可以直接指定&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add -u  # 添加已版本管理并修改了的文件，新增文件不会加入，相对保险，建议使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add .  # 添加当前目录下所有新增或修改的文件，可能会无意加入其他不想加入的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add -A  # --all 添加全部文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;quot;here is the comment&amp;quot;  # 提交并加入必要的注释说明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit --amend  # 重新编辑当前提交的注释信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit --amend -m &amp;quot;new message&amp;quot;  # 覆盖已提交的注释信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git pull origin master  # 从远端仓库拉取master代码，需要设置origin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin master  # 将代码Push到远端仓库的master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;GitHub-SSH-Key&quot;&gt;&lt;a href=&quot;#GitHub-SSH-Key&quot; class=&quot;headerlink&quot; title=&quot;GitHub + SSH Key&quot;&gt;&lt;/a&gt;GitHub + SSH Key&lt;/h4&gt;&lt;p&gt;如果希望自己的代码上传到&lt;a href=&quot;http://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;，可以阅读Github官方Demo教程&lt;a href=&quot;https://guides.github.com/activities/hello-world/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Guides&lt;/a&gt;，当然也可以上传到其它代码托管平台，原理步骤基本相同。另外，如果需要添加SSH Key，可以参考&lt;a href=&quot;https://help.github.com/articles/generating-an-ssh-key/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating an SSH key&lt;/a&gt;。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t rsa -b 4096 -C &amp;quot;your_email@example.com&amp;quot;  # 生成新的SSH Key，需要替换自己的Email&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -f ~/.ssh/id_rsa -p  # 修改已生成私钥文件的密码 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh-add ~/.ssh/id_rsa  # 添加已有私钥到ssh-agent中&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Git初阶&quot;&gt;&lt;a href=&quot;#Git初阶&quot; class=&quot;headerlink&quot; title=&quot;Git初阶&quot;&gt;&lt;/a&gt;Git初阶&lt;/h2&gt;&lt;p&gt;除了熟练掌握上述的一些基本命令外，还不能顺畅地使用Git，还需要对更多的命令进行掌握才能达到流畅使用Git的程度，除了&lt;a href=&quot;https://git-scm.com/docs/git-init&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;init&lt;/a&gt;,&lt;a href=&quot;https://git-scm.com/docs/git-clone&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clone&lt;/a&gt;,&lt;a href=&quot;https://git-scm.com/docs/git-status&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;status&lt;/a&gt;,&lt;a href=&quot;https://git-scm.com/docs/git-add&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;add&lt;/a&gt;和&lt;a href=&quot;https://git-scm.com/docs/git-commit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commit&lt;/a&gt;命令外，接下来会分别介绍一些其他的常用命令及参数。&lt;/p&gt;
&lt;h4 id=&quot;git-config&quot;&gt;&lt;a href=&quot;#git-config&quot; class=&quot;headerlink&quot; title=&quot;git config&quot;&gt;&lt;/a&gt;git config&lt;/h4&gt;&lt;p&gt;除了上节提到的使用&lt;a href=&quot;https://git-scm.com/docs/git-config&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git config&lt;/a&gt;命令来配置&lt;code&gt;user.name&lt;/code&gt;和&lt;code&gt;user.email&lt;/code&gt;外，还有一些其他常用参数。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global -l  # --list 显示所有的全局配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name  # 显示全局配置的用户名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global push.default simple  # 配置push的默认方式为simple匹配&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.s status  # 配置status的别名为s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Git配置有三种级别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System: &lt;code&gt;--system&lt;/code&gt;，一般很少会修改系统级配置，对应的系统配置在&lt;code&gt;/etc/gitconfig&lt;/code&gt;中。&lt;/li&gt;
&lt;li&gt;Global: &lt;code&gt;--global&lt;/code&gt;，通常会修改全局配置，对应的全局配置在&lt;code&gt;~/.gitconfig&lt;/code&gt;或&lt;code&gt;~/.config/git/config&lt;/code&gt;中。&lt;/li&gt;
&lt;li&gt;Local: &lt;code&gt;--local&lt;/code&gt;默认值，需要对某个项目单独配置时使用，对应的配置在项目目录下的&lt;code&gt;.git/config&lt;/code&gt;中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;git-remote&quot;&gt;&lt;a href=&quot;#git-remote&quot; class=&quot;headerlink&quot; title=&quot;git remote&quot;&gt;&lt;/a&gt;git remote&lt;/h4&gt;&lt;p&gt;在初始化新项目时，可能需要添加远程库链接，或是在现有项目中修改远程库链接，或同时指定多个源等，&lt;a href=&quot;https://git-scm.com/docs/git-remote&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git remote&lt;/a&gt;命令相当有用，特别是&lt;code&gt;add&lt;/code&gt;和&lt;code&gt;set-url&lt;/code&gt;还是会常用到的。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote -v  # --verbose 查看当前已添加的远程库地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote show  # 查看已添加了哪些远程库源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote show origin  # 查看指定远程库源origin的详细信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin https://github.com/xxx/demo.git  # 添加origin并指定其远程库地址，通常默认为origin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote set-url origin git@github.com:xxx/demo.git  # 修改origin，使用HTTPS或SSH，取决于你的权限&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然还有更多的用法和参数，更多特殊场景用途可以参数官方的文档说明，但个人认为以上用法足够应对平时使用了。&lt;/p&gt;
&lt;h4 id=&quot;git-pull&quot;&gt;&lt;a href=&quot;#git-pull&quot; class=&quot;headerlink&quot; title=&quot;git pull&quot;&gt;&lt;/a&gt;git pull&lt;/h4&gt;&lt;p&gt;在平常的Git使用过程中，&lt;a href=&quot;https://git-scm.com/docs/git-pull&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git pull&lt;/a&gt;命令使用相当频繁，用于从远端仓库拉取代码，其实是包括了两个命令：&lt;a href=&quot;https://git-scm.com/docs/git-fetch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git fetch&lt;/a&gt;和&lt;a href=&quot;https://git-scm.com/docs/git-merge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git merge&lt;/a&gt;。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git pull origin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git pull -r  # --rebase 把当前分支衍合到upstream的顶端，使得Network保持一条线，更加清晰直接&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;git-push&quot;&gt;&lt;a href=&quot;#git-push&quot; class=&quot;headerlink&quot; title=&quot;git push&quot;&gt;&lt;/a&gt;git push&lt;/h4&gt;&lt;p&gt;另一个常用的命令就是推送&lt;a href=&quot;https://git-scm.com/docs/git-push&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git push&lt;/a&gt;，用于把本地的提交推送到远端仓库。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push -u origin master  # 首次Push时需要加-u参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push --set-upstream origin master  # 建立upstream与当前分支master的关联关系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push  # 建立关联关系后默认会推送到对应分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push -f  # --force, 强制Push&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;git-diff&quot;&gt;&lt;a href=&quot;#git-diff&quot; class=&quot;headerlink&quot; title=&quot;git diff&quot;&gt;&lt;/a&gt;git diff&lt;/h4&gt;&lt;p&gt;Git中对比命令&lt;a href=&quot;https://git-scm.com/docs/git-diff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git diff&lt;/a&gt;用于对比提交文件或工作区文件的修改情况，通常在准备提交之前可检查一下修改，防止提交不期望的文件。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git diff [&amp;lt;filename&amp;gt;]  # 对比unstaged文件与HEAD的区别，可以指定特定文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff HEAD [&amp;lt;filename&amp;gt;]  # 相对最近commit对比修改前后内容，无论是否staged，可指定特定文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff --staged [&amp;lt;filename&amp;gt;]  # 对比已经加入暂存区的文件与最近commit区别，可指定特定文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通常大家更倾向于使用IDE来对比修改，这一点倒觉得没什么问题，毕竟IDE界面上的对比有更强的视觉感，在某种程度上会减少出错的概率。&lt;/p&gt;
&lt;h4 id=&quot;git-branch&quot;&gt;&lt;a href=&quot;#git-branch&quot; class=&quot;headerlink&quot; title=&quot;git branch&quot;&gt;&lt;/a&gt;git branch&lt;/h4&gt;&lt;p&gt;通常需要查看、创建、修改或删除一个分支时需要用到&lt;a href=&quot;https://git-scm.com/docs/git-branch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git branch&lt;/a&gt;，假设示例中使用的分支名为&lt;code&gt;feature/card1&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git branch -a  # --all 列出所有分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch --list &amp;lt;pattern&amp;gt;  # 列出符合条件的分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -r  # --remotes 列出远程分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -vv  # 查看分支情况，显示sha1, commit和upstream分支信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch feature/card1  # 创建一个新分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout feature/card1  # 切换到该分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b feature/card1  # 创建并切换到该分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -m feature/renamed  # --move 修改所在分支的名字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -M feature/renamed  # --move --force 强制修改所在分支的名字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -d feature/card1  # --delete 删除本地分支，不能删除当前所在分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -D feature/card1  # --delete --force 强制删除本地分支，不能删除当前所在分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -dr origin/feature/card1  # --delete --remotes 删除远程仓库分支Tracking&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin :feature/card1  # 把空分支push到远端，相当于删除远程仓库分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch --set-upstream-to=origin/&amp;lt;branch&amp;gt; master  # 把远程分支和本地分支关联起来&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch --unset-upstream [&amp;lt;branchname&amp;gt;]  # 移除关联的上游分支，默认针对当前分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch --merged  # 列出已经合并到当前分支的所有分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch --no-merged  # 列出未合并到当前分支的所有分支&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;git-checkout&quot;&gt;&lt;a href=&quot;#git-checkout&quot; class=&quot;headerlink&quot; title=&quot;git checkout&quot;&gt;&lt;/a&gt;git checkout&lt;/h4&gt;&lt;p&gt;再来介绍一下检出命令&lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git checkout&lt;/a&gt;，除了对分支切换操作，还可以用于丢弃修改，常用的方式如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout master  # 切换到master分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout tag1  # 切换到指定的Tag上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b &amp;lt;new_branch&amp;gt;  # 基于当前分支，创建并切换到一个新分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout --orphan &amp;lt;new_branch&amp;gt;  # 创建一个孤儿分支，没有父节点，属于全新的分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -- &amp;lt;target&amp;gt;  # 针对unstaged的文件丢弃其修改&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;git-merge&quot;&gt;&lt;a href=&quot;#git-merge&quot; class=&quot;headerlink&quot; title=&quot;git merge&quot;&gt;&lt;/a&gt;git merge&lt;/h4&gt;&lt;p&gt;通常需要在分支间进行分支合并操作，需要用到&lt;a href=&quot;https://git-scm.com/docs/git-merge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git merge&lt;/a&gt;命令，比如把&lt;code&gt;topic&lt;/code&gt;分支merge到&lt;code&gt;master&lt;/code&gt;上。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git merge topic  # 合并topic分支到当前所在分支&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然，也可以指定一些其他参数或是合并策略等，用法非常灵活。在merge时通常会遇到合并冲突问题，如果遇到，在自己熟悉的编辑方式下解决冲突，然后运行添加命令&lt;code&gt;git add -u&lt;/code&gt;，最后根据提示运行&lt;code&gt;git rebase --continue&lt;/code&gt;即可，&lt;strong&gt;切记勿再commit&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;git-rm&quot;&gt;&lt;a href=&quot;#git-rm&quot; class=&quot;headerlink&quot; title=&quot;git rm&quot;&gt;&lt;/a&gt;git rm&lt;/h4&gt;&lt;p&gt;删除命令&lt;a href=&quot;https://git-scm.com/docs/git-rm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git rm&lt;/a&gt;用于从Git的工作树和索引中删除文件。另外，还有一个类似的&lt;a href=&quot;https://git-scm.com/docs/git-mv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git mv&lt;/a&gt;命令，但不太常用，主要作用是改名或移动文件，只作简单了解即可。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git rm &amp;lt;target&amp;gt;  # 从工作树中移除对象，Git会记录该操作，相当于rm后再git add&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git rm --cached &amp;lt;target&amp;gt;  # 从Git索引管理中移除对象，若需要忽略已提交的文件时应使用此命令删除缓存&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--cached&lt;/code&gt;参数相当有用的，通常的使用场景是，当某个文件已经被添加到Git管理，但后来又需要在&lt;code&gt;.gitignore&lt;/code&gt;中忽略。&lt;/p&gt;
&lt;h4 id=&quot;git-log&quot;&gt;&lt;a href=&quot;#git-log&quot; class=&quot;headerlink&quot; title=&quot;git log&quot;&gt;&lt;/a&gt;git log&lt;/h4&gt;&lt;p&gt;有时需要查看提交记录日志，可以使用命令&lt;a href=&quot;https://git-scm.com/docs/git-log&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git log&lt;/a&gt;。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git log [&amp;lt;options&amp;gt;]  # 显示提交记录，可以指定文件或regex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git log -5  # 查看最近5条历史提交记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git log -p  # 按补丁格式显示每个更新之间的差异&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git log --stat  # 显示每次提交文件的变更统计&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git log --graph  # 显示ASCII字符图形表示的每个提交所在的分支及其衍合情况&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git log --graph --oneline --all  # 以更详细的信息展示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git log --pretty=oneline  # 以单行的格式显示提交记录，只显示哈希值和提交注释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git log --decorate[=short|full|auto|no]  # 显示出更多的信息，包括ref name等&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;git-revert&quot;&gt;&lt;a href=&quot;#git-revert&quot; class=&quot;headerlink&quot; title=&quot;git revert&quot;&gt;&lt;/a&gt;git revert&lt;/h4&gt;&lt;p&gt;Git提供了撤销某次操作的命令&lt;a href=&quot;https://git-scm.com/docs/git-revert&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git revert&lt;/a&gt;，相当于对某次提交的回滚操作，该命令会保留之前的所有提交记录，并把撤销操作当作一次新的提交。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git revert HEAD  # HEAD~0 撤销最近一次提交&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git revert HEAD^  # HEAD~1 撤销上上次的提交&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git revert 6a7c70c  # 撤销该HASH对应的提交&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git revert [--edit]  # 撤销操作时需要编程注释，默认参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git revert --no-edit  # 撤销操作时使用默认的注释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git revert -n  # --no-commit 只在本地撤销，不自动提交，可以用于Revert多个commits&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以上就是一些常用命令，需要自己练习进行掌握，可以花15分钟在&lt;a href=&quot;https://try.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Try Git&lt;/a&gt;进行简单学习，另外，&lt;a href=&quot;http://learngitbranching.js.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learn Git Branching&lt;/a&gt;提供了交互式动画教学和动手实践结合的学习方式，有兴趣可以学习下，同时，也推荐一篇&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5OTA1MDUyMA==&amp;amp;mid=201723758&amp;amp;idx=1&amp;amp;sn=e5b7c27caec76992c348bf30e4bd30e8&amp;amp;scene=2&amp;amp;from=timeline&amp;amp;isappinstalled=0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《手把手教你用Git》&lt;/a&gt;，练习完成一系列教程后基本就可以流畅地使用Git的常用功能了。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Git进阶&quot;&gt;&lt;a href=&quot;#Git进阶&quot; class=&quot;headerlink&quot; title=&quot;Git进阶&quot;&gt;&lt;/a&gt;Git进阶&lt;/h2&gt;&lt;p&gt;除了掌握常用的命令外，还需要在实践中不断地练习，在真正遇到一些问题并解决后才能提升，踩了坑才能更深有体会，正所谓在实践中学习，在跌倒中成长。&lt;/p&gt;
&lt;h4 id=&quot;数据恢复&quot;&gt;&lt;a href=&quot;#数据恢复&quot; class=&quot;headerlink&quot; title=&quot;数据恢复&quot;&gt;&lt;/a&gt;数据恢复&lt;/h4&gt;&lt;p&gt;只要在Git管理过的对象几乎总是可以恢复的，即使通过回退到了之前的版本，或者执行了一系列的错误操作，看似某些提交被丢失了，但可以通过查看到操作记录日志，并使用&lt;a href=&quot;https://git-scm.com/docs/git-reset&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git reset&lt;/a&gt;命令实现回退或恢复。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard HEAD~3  # 将HEAD指向HEAD~3，回退到HEAD~3的版本，即删除最近三次提交HEAD, HEAD^, HEAD~2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard 6a7c70c  # 回退到6a7c70c所在的版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard origin/master  # 将本地版本回退到和远程相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard HEAD  # 回退到最近提交的版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard HEAD^ xxx  # 回退xxx文件到上一个版本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;除了&lt;code&gt;--hard&lt;/code&gt;参数外，还有另外两个参数，分别进行解释说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;–soft: 暂存区和工作区都不会被改变，被reset的文件会在暂存区等待新的提交&lt;/li&gt;
&lt;li&gt;–mixed: 默认选项，暂存区会被reset，但工作区不受影响&lt;/li&gt;
&lt;li&gt;–hard: 暂存区和工作区都被reset，直接回退到指定提交&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了实现回退或恢复，需要查看日志，除了&lt;code&gt;git log&lt;/code&gt;命令外，还有&lt;a href=&quot;https://git-scm.com/docs/git-reflog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git reflog&lt;/a&gt;命令查看Git的引用日志，即操作记录，该命令非常有用，可以检查丢失提交，或查看操作记录Hash并用于重置及撤销等操作。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git reflog [--all]  # 查看所有引用日志，获取操作记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git reflog  # 查看到引用日志SHA值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6a7c70c HEAD@&amp;#123;0&amp;#125;: checkout: moving from master to develop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;627d359 HEAD@&amp;#123;1&amp;#125;: checkout: moving from testbranch1 to master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6811ed6 HEAD@&amp;#123;2&amp;#125;: checkout: moving from release/v2 to testbranch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6811ed6 HEAD@&amp;#123;3&amp;#125;: rebase finished: returning to refs/heads/release/v2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6811ed6 HEAD@&amp;#123;4&amp;#125;: rebase: checkout 6811ed6f7b0128b293ecf17ad365508620d92116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b632cfd HEAD@&amp;#123;5&amp;#125;: checkout: moving from develop to release/v2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6a7c70c HEAD@&amp;#123;6&amp;#125;: rebase finished: returning to refs/heads/develop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6a7c70c HEAD@&amp;#123;7&amp;#125;: pull -r: checkout 6a7c70c3f852da407980147d710850c1b5150ddc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;938f88d HEAD@&amp;#123;8&amp;#125;: checkout: moving from feature/card6 to develop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fe9366d HEAD@&amp;#123;9&amp;#125;: commit: feature card 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git log -g  # 以标准格式显示提交和引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git reset --hard 8a0c223  # 恢复到之前的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git branch recovery fe9366d  # 创建一个新恢复分支，并且指向某个引用日志记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git fsck --full  # 若无reflog了，可用fsck命令显示所有未被其它对象指向的对象，fsck会检查数据库的完整性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git fsck --lost-found  # 文件系统检测丢失更改&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;暂存现场&quot;&gt;&lt;a href=&quot;#暂存现场&quot; class=&quot;headerlink&quot; title=&quot;暂存现场&quot;&gt;&lt;/a&gt;暂存现场&lt;/h4&gt;&lt;p&gt;暂存命令&lt;a href=&quot;https://git-scm.com/docs/git-stash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git stash&lt;/a&gt;用于保存工作区的修改现场，以便快速切换到其他工作，再在适当时机恢复之前的工作。&lt;code&gt;stash@{0}&lt;/code&gt;指最近一次暂存记录，&lt;code&gt;stash@{1}&lt;/code&gt;指上上次的暂存记录，类似于压栈的操作。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git stash  # 把当前的工作暂存起来 等以后恢复现场后继续工作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash list  # 查看所有被暂存的文件记录列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash show -p stash@&amp;#123;0&amp;#125;  # 查看最近一次的暂存的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash apply  # 恢复最近一次被暂存的文件，但不删除该暂存记录与内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash apply stash@&amp;#123;1&amp;#125;  # 指定恢复指定的暂存记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash pop  # 恢复被暂存的文件同时，也删除该暂存文件与记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash drop  # 删除最近一次被暂存的所有文件与记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash drop stash@&amp;#123;1&amp;#125;  # 删除指定的暂存记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash clear  # 清除所有暂存记录列表&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;部分提交&quot;&gt;&lt;a href=&quot;#部分提交&quot; class=&quot;headerlink&quot; title=&quot;部分提交&quot;&gt;&lt;/a&gt;部分提交&lt;/h4&gt;&lt;p&gt;通常提交是针对一个文件，要么都提交，要么都不提交，但有时候需要在修改某个文件后，只希望暂时提交其中部分已修改内容，其他修改内容打算后续再提交。针对这种对文件进行了多次修改并希望分别提交的场景，首先需要进行部分修改暂存，然后提交，再暂存其它修改，再提交。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git add -p xxx  # --patch, 可以暂存并提交部分内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stage this hunk [y,n,q,a,d,/,e,?]? s # 输入s表示分割该块为更小块，通常是第一步&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stage this hunk [y,n,q,a,d,/,e,?]? y # 依次处理，输入y表示暂存该块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stage this hunk [y,n,q,a,d,/,e,?]? n # 依次处理，输入n表示不暂存该块&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入s表示分割该块为更小块&lt;/li&gt;
&lt;li&gt;输入y表示暂存该块&lt;/li&gt;
&lt;li&gt;输入n表示不暂存该块&lt;/li&gt;
&lt;li&gt;输入e表示手工编辑该块&lt;/li&gt;
&lt;li&gt;输入a表示暂存当前块以及当前文件的后续块&lt;/li&gt;
&lt;li&gt;输入d表示退出当前文件，不处理后续块，但会转到下一个文件&lt;/li&gt;
&lt;li&gt;输入q表示退出，不再处理后续块和文件&lt;/li&gt;
&lt;li&gt;输入/表示搜索匹配给定Regex的块&lt;/li&gt;
&lt;li&gt;输入?表示查看帮助信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;分支衍合&quot;&gt;&lt;a href=&quot;#分支衍合&quot; class=&quot;headerlink&quot; title=&quot;分支衍合&quot;&gt;&lt;/a&gt;分支衍合&lt;/h4&gt;&lt;p&gt;分支衍合命令&lt;a href=&quot;https://git-scm.com/docs/git-rebase&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git rebase&lt;/a&gt;非常实用，能够自动把分支结点衍合到upstream顶端从而保证提交树的整洁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在拉取代码时加上&lt;code&gt;--rebase&lt;/code&gt;参数总是好的，也推荐使用，即&lt;code&gt;git pull -r&lt;/code&gt;，这样就会把当前分支衍合到upstream的顶端，使得Network保持一条线，更加清晰直接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当在处理Merge或Patch时，会遇到冲突，当解决完成冲突后，会使用到&lt;code&gt;rebase&lt;/code&gt;命令。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git rebase --continue  # 继续完成之前的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git rebase --abort  # 放弃rebase过程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git rebase --skip  # 跳过当前rebase过程&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当需要把多个提交点合并成一个commit时，可以使用&lt;code&gt;rebase&lt;/code&gt;命令，比如，把&lt;code&gt;6a7c70c&lt;/code&gt;之前的所有提交合并。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git rebase -i 6a7c70c  # --interactive, 以交互的方式进行rebase操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 通常会保留每一个为pick，其他改为squash，千万不要移除中间的任何一次提交，保存退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Commands:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# p, pick = use commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# r, reword = use commit, but edit the commit message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# e, edit = use commit, but stop for amending&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# s, squash = use commit, but meld into previous commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# f, fixup = like &amp;quot;squash&amp;quot;, but discard this commit&amp;apos;s log message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# x, exec = run command (the rest of the line) using shell&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当出现了Infinity分支，或者需要简化分支的树，可以使用&lt;code&gt;rebase&lt;/code&gt;命令，假设在release/v2上需要rebase到develop的6a7c70c点上。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout release/v2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git rebase 6a7c70c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push -f&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;使用标签&quot;&gt;&lt;a href=&quot;#使用标签&quot; class=&quot;headerlink&quot; title=&quot;使用标签&quot;&gt;&lt;/a&gt;使用标签&lt;/h4&gt;&lt;p&gt;使用&lt;a href=&quot;https://git-scm.com/docs/git-tag&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git tag&lt;/a&gt;命令可以帮助建立一系列的Tags，与Branch用法相似，但相对于分支来说更轻量级，并且很适合在workshop中使用，当然也可以作为轻量级项目管理release版本的策略。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git tag  # 显示本地所有标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag v1.0  # 在当前点创建名为v1.0的轻量级标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag v1.0 46a359f  # 在46a359f提交点创建轻量级标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag -a v1.0 -m “message here&amp;quot;  # --annotate, --message, 在当前点创建带注释的新标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag -a v1.2 46a359f  # 在某个commit点添加Tag，会弹出输入注释编辑框&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag -l ‘v1.*’  # --list 列出匹配模式的标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag -ln  # --list, --num, 显示当前所有的标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git show v1.0  # 显示标签的详细信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push v1.0  # 把指定的标签push到远程库，可指定remote&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push --tags  # 把所有标签push到远程仓库，可指定remote&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout v1.0  # 切换到标签v1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b relese1.0 v1.0  # 为标签v1.0创建一个新的分支release1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag -d v1.0  # --delete 删除本地指定的标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push -d origin v1.0  # --delete 删除origin中的标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin :refs/tags/v1.0  # 删除远程仓库中的标签&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;修改权限&quot;&gt;&lt;a href=&quot;#修改权限&quot; class=&quot;headerlink&quot; title=&quot;修改权限&quot;&gt;&lt;/a&gt;修改权限&lt;/h4&gt;&lt;p&gt;通常在管理可执行脚本时，执行权限默认不会被Git管理，比如&lt;code&gt;gradlew&lt;/code&gt;在本地创建完成并且也可以运行，但在服务器上拉取代码后发现没有执行权限，因此会导致执行脚本任务失败，为了解决这一问题，需要用到&lt;a href=&quot;https://git-scm.com/docs/git-update-index&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git update-index&lt;/a&gt;命令。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git update-index --chmod=+x gradlew  # 添加执行权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git update-index --chmod=-x test.sh  # 移除执行权限&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;补丁技巧&quot;&gt;&lt;a href=&quot;#补丁技巧&quot; class=&quot;headerlink&quot; title=&quot;补丁技巧&quot;&gt;&lt;/a&gt;补丁技巧&lt;/h4&gt;&lt;p&gt;有时会需要在某个分支上针对某个commit打patch，然后再应用到另一个分支上，作为一种补丁的形式出现。首先介绍一下&lt;a href=&quot;https://git-scm.com/docs/git-cherry-pick&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git cherry-pick&lt;/a&gt;命令，该命令允许从其他分支上选取某一个Commit，再应用到当前分支上。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout test_branch  # 首先切到某个需要被补丁的分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git cherry-pick 46a329f  # 然后应用某个其他分支上的commit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另外还有两个命令&lt;a href=&quot;https://git-scm.com/docs/git-format-patch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git format-patch&lt;/a&gt;和&lt;a href=&quot;https://git-scm.com/docs/git-apply&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git apply&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;回收垃圾&quot;&gt;&lt;a href=&quot;#回收垃圾&quot; class=&quot;headerlink&quot; title=&quot;回收垃圾&quot;&gt;&lt;/a&gt;回收垃圾&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://git-scm.com/docs/git-gc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git gc&lt;/a&gt;和&lt;a href=&quot;https://git-scm.com/docs/git-count-objects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git count-objects&lt;/a&gt;命令用于回收垃圾和查看数据库占用空间的。如果有太多松散对象和大文件对象，占用了太多空间，可以尝试手动运行一些命令减少空间占用。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git gc  # 压缩文件，回收垃圾，同时查看数据库占用空间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git gc --auto  # 手动执行自动垃圾回收&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git count-objects -v  # 查看对象数量和占用空间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git prune --expire now  # 删除过期的文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;谁的代码&quot;&gt;&lt;a href=&quot;#谁的代码&quot; class=&quot;headerlink&quot; title=&quot;谁的代码&quot;&gt;&lt;/a&gt;谁的代码&lt;/h4&gt;&lt;p&gt;还有一个很有用的命令&lt;a href=&quot;https://git-scm.com/docs/git-blame&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git blame&lt;/a&gt;，可以查看到某个文件的每一行修改记录，有时需要确认是谁修改了某一行代码，该命令会很有帮助。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git blame xxx  #  查看文件的每一行作者、最新提交和操作时间等&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;高效别名&quot;&gt;&lt;a href=&quot;#高效别名&quot; class=&quot;headerlink&quot; title=&quot;高效别名&quot;&gt;&lt;/a&gt;高效别名&lt;/h4&gt;&lt;p&gt;为了提升Git命令的操作效率，通常会配置Git别名来简化命令输入，其中一种方式是自己在&lt;code&gt;~/.gitconfig&lt;/code&gt;中配置，但不是首选推荐使用。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[alias]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;co = checkout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ci = commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pl = pull&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ps = push&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;st = stash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = branch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;formatlog = log --pretty=format:\&amp;quot;%h %ad | %s%d [%an]\&amp;quot; --graph --date=short&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type = cat-file -t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dump = cat-file -p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有一种推荐使用的方式，如果你使用的&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Oh My Zsh&lt;/a&gt;+&lt;a href=&quot;http://www.iterm2.com/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTerm2&lt;/a&gt;的命令行方案，那么你可以感受到&lt;code&gt;Oh My Zsh&lt;/code&gt;带来的优势了，提供了&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git plugin&lt;/a&gt;并设定了统一的更加简短的别名，常用的Alias如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gst  # git status  ★★★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ga  # git add  ★★★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gaa  # git add --all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gb  # git branch  ★★★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gba  # git branch -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gl  # git pull  ★★★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gup  # git pull --rebase  ★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gupv  # git pull --rebase -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gp  # git push  ★★★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc  # git commit -v  ★★★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gc!  # git commit -v --amend  ★★★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcmsg # git commit -m  ★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gca  # git commit -v -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcam  # git commit -a -m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gca!  # git commit -v -a --amend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gco  # git checkout  ★★★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcm  # git checkout master  ★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcb  # git checkout -b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gd  # git diff  ★★★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gdca  # git diff --cached  ★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gsta  # git stash  ★★★★★&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gstaa  # git stash apply&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gstd  # git stash drop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gstl  # git stash list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gstp  # git stash pop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gsts  # git stash show --text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcf  # git config --list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcp  # git cherry-pick&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;★★★★★&lt;/code&gt;表示强烈推荐使用的项，太多Alias会导致记忆混乱，个人觉得记住基本命令的简写即可，参数由自己显示决定，另外，还是需要掌握全称更好，毕竟不是每台电脑的配置都和你的一样，但自己使用确实会方便快捷很多。&lt;/p&gt;
&lt;h2 id=&quot;结束语&quot;&gt;&lt;a href=&quot;#结束语&quot; class=&quot;headerlink&quot; title=&quot;结束语&quot;&gt;&lt;/a&gt;结束语&lt;/h2&gt;&lt;p&gt;对于Git初阶部分，都是平常自己使用的一些命令，对于Git进阶部分，除了补充一些命令外，也是自己使用Git的一些心得体会和技巧，无论怎样，只有通过自己亲身实践，不断练习才能真正掌握。以上所有都只是作为一名普通Git用户的实践方式，如果需要开发一些基于Git的应用等，那就需要了解更深层次的底层命令和原理了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/doc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/docs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/tag/git/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;更多Git相关文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Git是一款免费且开源的分布式版本控制系统(DVCS)，Git是由Linux之父Linus Torvalds在2005年创造出来最初用于管理Linux内核代码，解决与其他贡献者协同开发的问题，Git能以非常高效的方式管理各种规模的项目，目前算是世界上最先进的分布式版本控制系统。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="GitHub" scheme="http://blog.waterstrong.me/tags/GitHub/"/>
    
      <category term="Git" scheme="http://blog.waterstrong.me/tags/Git/"/>
    
      <category term="VCS" scheme="http://blog.waterstrong.me/tags/VCS/"/>
    
      <category term="SCM" scheme="http://blog.waterstrong.me/tags/SCM/"/>
    
  </entry>
  
  <entry>
    <title>Java Checkstyle in Gradle</title>
    <link href="http://blog.waterstrong.me/java-checkstyle/"/>
    <id>http://blog.waterstrong.me/java-checkstyle/</id>
    <published>2016-08-11T14:31:37.000Z</published>
    <updated>2016-08-13T12:21:43.000Z</updated>
    
    <content type="html">&lt;p&gt;Checkstyle是一个帮助Java开发者遵守某些编码规范的工具，它能够自动化代码规范检查过程，从而使得开发者从这项重要但枯燥的任务中解脱出来，Checkstyle通常适合那些需要强制执行编码规范标准的项目。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Checkstyle is a development tool to help programmers write Java code that adheres to a coding standard. It automates the process of checking Java code to spare humans of this boring (but important) task. This makes it ideal for projects that want to enforce a coding standard.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常的检查项目包括Javadoc注释、命名约定、Title标题、Import语句、文件大小、空白、修饰符、代码块、类设计、混合检查等。可以阅读&lt;a href=&quot;http://checkstyle.sourceforge.net/checks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Checkstyle Checks&lt;/a&gt;了解更多。&lt;/p&gt;
&lt;p&gt;在Gradle中，实现对Java的编码规范检查，只需要三步即可：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1) 在&lt;code&gt;build.gradle&lt;/code&gt;中引入Checkstyle插件&lt;code&gt;apply plugin: &amp;#39;checkstyle&amp;#39;&lt;/code&gt;，默认执行check会触发编码规范检查&lt;code&gt;checkstyleMain&lt;/code&gt;和&lt;code&gt;checkstyleTest&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2) 在项目目录下添加默认的文件夹&lt;code&gt;config/checkstyle&lt;/code&gt;，然后新建默认配置文件&lt;code&gt;checkstyle.xml&lt;/code&gt;文件，并配置编码规范检查规则，比如这里给出一个编码规范配置的示例：&lt;a href=&quot;/assets/java-checkstyle/checkstyle.xml&quot;&gt;checkstyle.xml&lt;/a&gt;，对于每个Module的解释可以在&lt;a href=&quot;http://checkstyle.sourceforge.net/checks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Checks&lt;/a&gt;中找到。&lt;br&gt;当然，除了使用默认文件名外，也可以在&lt;code&gt;build.gradle&lt;/code&gt;中自定义规范检查的配置文件，并且可以针对Main和Test类代码的编码规范分别配置，因为通常对Test类代码的编码规范检查并没有那么严格。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;checkstyle &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	configProperties.rootDir = project.projectDir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	checkstyleMain.configFile = new File(project.projectDir, &amp;apos;/config/checkstyle/checkstyle-main.xml&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	checkstyleTest.configFile = new File(project.projectDir, &amp;apos;/config/checkstyle/checkstyle-test.xml&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3) 在同一目录下新建默认忽略检查规范的文件&lt;code&gt;suppressions.xml&lt;/code&gt;，可以配置忽略对某个文件的某个规则的检查，比如一个配置示例：&lt;a href=&quot;/assets/java-checkstyle/suppressions.xml&quot;&gt;suppressions.xml&lt;/a&gt;。&lt;br&gt;该&lt;code&gt;suppressions.xml&lt;/code&gt;需要在&lt;code&gt;checkstyle.xml&lt;/code&gt;文件中配置，另外，也可以配置&lt;code&gt;class-header.txt&lt;/code&gt;文件来要求每个类都包括header信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;module name=&amp;quot;Checker&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;module name=&amp;quot;SuppressionFilter&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;property name=&amp;quot;file&amp;quot; value=&amp;quot;$&amp;#123;rootDir&amp;#125;/config/checkstyle/suppressions.xml&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;module name=&amp;quot;RegexpHeader&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;lt;property name=&amp;quot;headerFile&amp;quot; value=&amp;quot;$&amp;#123;rootDir&amp;#125;/config/checkstyle/class-header.txt&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;module name=&amp;quot;TreeWalker&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;lt;property name=&amp;quot;cacheFile&amp;quot; value=&amp;quot;$&amp;#123;rootDir&amp;#125;/config/checkstyle/main.cache&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;lt;module name=&amp;quot;ImportControl&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&amp;lt;property name=&amp;quot;file&amp;quot; value=&amp;quot;$&amp;#123;rootDir&amp;#125;/config/checkstyle/import-control.xml&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;lt;/module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OK，配置完成后可以放心写代码了，再也不用担心团队成员编码规范不统一的问题了，Enjoy~&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://checkstyle.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sourceforge Checkstyle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://checkstyle.sourceforge.net/reports/google-java-style.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Java Style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/checkstyle_plugin.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Checkstyle Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Checkstyle是一个帮助Java开发者遵守某些编码规范的工具，它能够自动化代码规范检查过程，从而使得开发者从这项重要但枯燥的任务中解脱出来，Checkstyle通常适合那些需要强制执行编码规范标准的项目。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="Java" scheme="http://blog.waterstrong.me/tags/Java/"/>
    
      <category term="Checkstyle" scheme="http://blog.waterstrong.me/tags/Checkstyle/"/>
    
  </entry>
  
  <entry>
    <title>Java Code Coverage in Gradle</title>
    <link href="http://blog.waterstrong.me/java-code-coverage/"/>
    <id>http://blog.waterstrong.me/java-code-coverage/</id>
    <published>2016-07-31T11:53:11.000Z</published>
    <updated>2016-08-07T03:42:36.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Code-Coverage介绍&quot;&gt;&lt;a href=&quot;#Code-Coverage介绍&quot; class=&quot;headerlink&quot; title=&quot;Code Coverage介绍&quot;&gt;&lt;/a&gt;Code Coverage介绍&lt;/h2&gt;&lt;h3 id=&quot;什么是代码覆盖率？&quot;&gt;&lt;a href=&quot;#什么是代码覆盖率？&quot; class=&quot;headerlink&quot; title=&quot;什么是代码覆盖率？&quot;&gt;&lt;/a&gt;什么是代码覆盖率？&lt;/h3&gt;&lt;p&gt;代码覆盖率是用于衡量源代码被测试粒度和程度的，在一定程序上能够衡量代码质量，通常作为发现未被测试覆盖的代码的一种手段，可以直接反映部分测试遗漏点。&lt;/p&gt;
&lt;p&gt;覆盖率主要用于尽可能减少代码Defects和Bugs及降低出错风险，较高的测试覆盖率能够增加开发人员的信心，但并不代表代码测试覆盖率越高越好，也不需要实现100%的覆盖率，并且这也很难实现，通常对核心逻辑才会增加测试粒度，根据经验值，覆盖率在85%左右为宜，即增加团队成员信心，也减少不必要的工作量。&lt;/p&gt;
&lt;p&gt;另外，代码覆盖率粒度通常分为类(Class)、方法(Method)、块(Block)、分支(Branch)、行(Line)、指令(instruction)以圈(complexity)覆盖。&lt;/p&gt;
&lt;p&gt;需要注意的是，不应把测试覆盖率作为代码质量唯一指标，而应作为发现未被测试覆盖的代码的手段，并且代码覆盖率不能完全作为衡量代码质量的标准。&lt;/p&gt;
&lt;h3 id=&quot;代码覆盖率统计原理&quot;&gt;&lt;a href=&quot;#代码覆盖率统计原理&quot; class=&quot;headerlink&quot; title=&quot;代码覆盖率统计原理&quot;&gt;&lt;/a&gt;代码覆盖率统计原理&lt;/h3&gt;&lt;p&gt;主流代码覆盖率工具都采用字节码插桩模式，通过钩子的方式来记录代码执行轨迹信息。以Java为例，目前常用的工具为Jacoco和Cobertura，其对字节码进行插桩，主要分为on-the-fly和offine两种模式。一般的过程为：首先执行测试用例，收集程序执行轨迹信息，并存入内存中，然后数据处理器结合程序执行轨迹信息和代码结构信息分析生成代码覆盖率报告，最后将代码覆盖率报告以图形化方式展示出来。&lt;/p&gt;
&lt;h4 id=&quot;On-The-Fly插桩&quot;&gt;&lt;a href=&quot;#On-The-Fly插桩&quot; class=&quot;headerlink&quot; title=&quot;On-The-Fly插桩&quot;&gt;&lt;/a&gt;On-The-Fly插桩&lt;/h4&gt;&lt;p&gt;On-The_Fly也可分为基于Java Agent和Class Loader两种方式。&lt;/p&gt;
&lt;p&gt;Java Agent原理如下: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JVM中通过&lt;code&gt;-javaagent&lt;/code&gt;参数指定特定的jar文件启动Instrumentation的代理程序&lt;/li&gt;
&lt;li&gt;代理程序在每装载一个class文件前判断是否已经转换修改了该文件，如果没有则需要将探针插入class文件中&lt;/li&gt;
&lt;li&gt;代码覆盖率就可以在JVM执行代码的时候实时获取&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Class Loader原理为：自定义Class Loader实现自己的类装载策略，在类加载之前将探针插入class文件中。&lt;/p&gt;
&lt;p&gt;On-The-Fly模式优点在于无需修改源代码，无需提前进行字节码插桩，更加方便的获取代码覆盖率，可以在系统不停机的情况下，实时获取和收集代码覆盖率信息。&lt;/p&gt;
&lt;h4 id=&quot;Offline插桩&quot;&gt;&lt;a href=&quot;#Offline插桩&quot; class=&quot;headerlink&quot; title=&quot;Offline插桩&quot;&gt;&lt;/a&gt;Offline插桩&lt;/h4&gt;&lt;p&gt;在测试之前先对文件进行插桩，生成插过桩的class文件或者jar包，执行插过桩的class文件或者jar包之后，会生成覆盖率信息到文件，最后统一对覆盖率信息进行处理，并生成报告。Offline插桩又分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Replace：替换方式，修改字节码生成新的class文件&lt;/li&gt;
&lt;li&gt;Inject：注入方式，在原有字节码文件上进行修改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Offine模式优点在于系统启动不需要额外开启代理，但只能在系统停机的情况下才能获取代码覆盖率。Offline模式适用于以下场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行环境不支持Java Agent&lt;/li&gt;
&lt;li&gt;部署环境不允许设置JVM参数&lt;/li&gt;
&lt;li&gt;字节码需要被转换成其他虚拟机字节码&lt;/li&gt;
&lt;li&gt;动态修改字节码过程中和其他Agent冲突&lt;/li&gt;
&lt;li&gt;无法自定义用户加载类&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;在Java中应用Code-Coverage&quot;&gt;&lt;a href=&quot;#在Java中应用Code-Coverage&quot; class=&quot;headerlink&quot; title=&quot;在Java中应用Code Coverage&quot;&gt;&lt;/a&gt;在Java中应用Code Coverage&lt;/h2&gt;&lt;p&gt;本博客将主要讲解如何在Java中实现对代码测试覆盖统计和检查，采用Gradle构建工具，以Jacoco和Cobertura覆盖率工具为例，分别给出实现步骤和代码。&lt;/p&gt;
&lt;h3 id=&quot;Gradle-Jacoco&quot;&gt;&lt;a href=&quot;#Gradle-Jacoco&quot; class=&quot;headerlink&quot; title=&quot;Gradle + Jacoco&quot;&gt;&lt;/a&gt;Gradle + Jacoco&lt;/h3&gt;&lt;p&gt;Jacoco是开源的Java代码测试覆盖率检查工具，使用ASM修改字节码，插桩主要基于对字节码的on-the-fly和offline的方式，支持提供method, class, line, branch, instruction以及complexity的覆盖率报告。接下来将讲解如何在Gradle中配置Jacoco，实现对Java代码的测试覆盖率检查。&lt;/p&gt;
&lt;h4 id=&quot;Apply-Jacoco-Plugin&quot;&gt;&lt;a href=&quot;#Apply-Jacoco-Plugin&quot; class=&quot;headerlink&quot; title=&quot;Apply Jacoco Plugin&quot;&gt;&lt;/a&gt;Apply Jacoco Plugin&lt;/h4&gt;&lt;p&gt;首先，新建一个名为&lt;a href=&quot;/assets/java-code-coverage/jacoco.gradle&quot;&gt;jacoco.gradle&lt;/a&gt;的文件，并加入以下脚本代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;jacoco&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    limits = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;apos;instruction&amp;apos;: 95,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;apos;branch&amp;apos;     : 90,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;apos;line&amp;apos;       : 90,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;apos;complexity&amp;apos; : 90,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;apos;method&amp;apos;     : 95,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;apos;class&amp;apos;      : 95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jacocoTestReport &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    group = &amp;quot;Reporting&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    description = &amp;quot;Generate and check jacoco coverage reports after running tests.&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reports &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xml.enabled true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        html.enabled true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        csv.enabled false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    afterEvaluate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classDirectories = files(classDirectories.files.collect &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fileTree(dir: it, exclude: [&amp;apos;**/Application**&amp;apos;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    doLast &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new TestCoverage(jacoco).check(limits)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;check.dependsOn jacocoTestReport&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;limits&lt;/code&gt;用于配置代码覆盖率检查满足的最小阈值，可以根据项目需要自定义修改，在&lt;code&gt;exclude&lt;/code&gt;中也可以配置不接收覆盖率检查的Package或Class。&lt;/p&gt;
&lt;h4 id=&quot;Create-TestCoverage-Class&quot;&gt;&lt;a href=&quot;#Create-TestCoverage-Class&quot; class=&quot;headerlink&quot; title=&quot;Create TestCoverage Class&quot;&gt;&lt;/a&gt;Create TestCoverage Class&lt;/h4&gt;&lt;p&gt;另外，还需要创建一个用于测试覆盖率检查的类，可以在&lt;a href=&quot;/assets/java-code-coverage/jacoco.gradle&quot;&gt;jacoco.gradle&lt;/a&gt;中追加以下代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import org.slf4j.Logger&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import static org.slf4j.LoggerFactory.getLogger&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class TestCoverage &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static Logger logger = getLogger(TestCoverage.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def xmlReport&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def htmlReport&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def metrics&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TestCoverage(jacoco) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xmlReport = new File(&amp;quot;$&amp;#123;jacoco.reportsDir&amp;#125;/test/jacocoTestReport.xml&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        htmlReport = new File(&amp;quot;$&amp;#123;jacoco.reportsDir&amp;#125;/test/html/index.html&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        initMetrics()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void check(limits) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logger.lifecycle(&amp;quot;Checking coverage results: $&amp;#123;xmlReport&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logger.lifecycle(&amp;quot;Html report: $&amp;#123;htmlReport&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        showResult checkMetrics(limits)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void showResult(failures, improvements) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (failures) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logger.quiet(&amp;quot;--------------------- Jacoco Code Coverage Failed ---------------------&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            failures.each &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                logger.quiet(it)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logger.quiet(&amp;quot;-----------------------------------------------------------------------&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            throw new GradleException(&amp;quot;Jacoco Code coverage failed&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (improvements) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logger.quiet(&amp;quot;-------------------- Jacoco Code Coverage Improved --------------------&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            improvements.each &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                logger.quiet(it)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logger.quiet(&amp;quot;-----------------------------------------------------------------------&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private List checkMetrics(limits) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        def failures = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        def improvements = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        metrics.each &amp;#123; key, value -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            def limit = limits[key] as Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (value &amp;lt; limit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                failures.add(&amp;quot;- $&amp;#123;key&amp;#125; coverage rate is: $&amp;#123;value&amp;#125;%, minimum is $&amp;#123;limit&amp;#125;%&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (value &amp;gt; limit + 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                improvements.add(&amp;quot;- $key coverage rate is: $&amp;#123;value&amp;#125;%, minimum is $&amp;#123;limit&amp;#125;%&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [failures, improvements]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void initMetrics() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        def parser = new XmlParser()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parser.setFeature(&amp;quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&amp;quot;, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parser.setFeature(&amp;quot;http://apache.org/xml/features/disallow-doctype-decl&amp;quot;, false)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        def counters = parser.parse(xmlReport).counter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        def percentage = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            def covered = it ? it.&amp;apos;@covered&amp;apos; as Double : 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            def missed = it ? it.&amp;apos;@missed&amp;apos; as Double : 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ((covered / (covered + missed)) * 100).round(2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        metrics = [:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        metrics &amp;lt;&amp;lt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;apos;instruction&amp;apos;: percentage(counters.find &amp;#123; it.&amp;apos;@type&amp;apos;.equals(&amp;apos;INSTRUCTION&amp;apos;) &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;apos;branch&amp;apos;     : percentage(counters.find &amp;#123; it.&amp;apos;@type&amp;apos;.equals(&amp;apos;BRANCH&amp;apos;) &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;apos;line&amp;apos;       : percentage(counters.find &amp;#123; it.&amp;apos;@type&amp;apos;.equals(&amp;apos;LINE&amp;apos;) &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;apos;complexity&amp;apos; : percentage(counters.find &amp;#123; it.&amp;apos;@type&amp;apos;.equals(&amp;apos;COMPLEXITY&amp;apos;) &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;apos;method&amp;apos;     : percentage(counters.find &amp;#123; it.&amp;apos;@type&amp;apos;.equals(&amp;apos;METHOD&amp;apos;) &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;apos;class&amp;apos;      : percentage(counters.find &amp;#123; it.&amp;apos;@type&amp;apos;.equals(&amp;apos;CLASS&amp;apos;) &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Use-Custom-Jacoco-Script&quot;&gt;&lt;a href=&quot;#Use-Custom-Jacoco-Script&quot; class=&quot;headerlink&quot; title=&quot;Use Custom Jacoco Script&quot;&gt;&lt;/a&gt;Use Custom Jacoco Script&lt;/h4&gt;&lt;p&gt;最后需要在&lt;code&gt;build.gradle&lt;/code&gt;中引用自定义脚本和依赖：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply from: &amp;apos;jacoco.gradle&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testRuntime &amp;apos;org.slf4j:slf4j-api:1.7.21&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在命令行中运行&lt;code&gt;./gradlew build&lt;/code&gt;可以生成代码覆盖率报告并检查覆盖率是否通过。&lt;br&gt;&lt;img src=&quot;/assets/java-code-coverage/jacoco_console.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/assets/java-code-coverage/jacoco_report.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Gradle-Cobertura&quot;&gt;&lt;a href=&quot;#Gradle-Cobertura&quot; class=&quot;headerlink&quot; title=&quot;Gradle + Cobertura&quot;&gt;&lt;/a&gt;Gradle + Cobertura&lt;/h3&gt;&lt;p&gt;Cobertura是开源的Java代码测试覆盖率检查工具，它主要基于对字节码offline插桩的方式实现，支持提供branch和line覆盖率报告。接下来将讲解如何在Gradle中使用Cobertura，并配置实现对Java代码的测试覆盖率检查。&lt;/p&gt;
&lt;h4 id=&quot;Apply-Cobertura-Plugin&quot;&gt;&lt;a href=&quot;#Apply-Cobertura-Plugin&quot; class=&quot;headerlink&quot; title=&quot;Apply Cobertura Plugin&quot;&gt;&lt;/a&gt;Apply Cobertura Plugin&lt;/h4&gt;&lt;p&gt;首先在&lt;code&gt;build.gradle&lt;/code&gt;文件开始处加入构建脚本依赖并引用cobertura插件。一般有两种方式，第一种方式支持在所有版本的Gradle中使用：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &amp;quot;net.saliman:gradle-cobertura-plugin:2.3.2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;net.saliman.cobertura&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第二种方式如下，直接引用plugins DSL的机制，但只支持在Gradle 2.1及以后的版本使用，但特别注意，该script代码只能放在&lt;code&gt;buildscript&lt;/code&gt;之后，其他script代码之前：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;plugins &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id &amp;apos;net.saliman.cobertura&amp;apos; version &amp;apos;2.3.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后可以在同一脚本&lt;code&gt;build.gradle&lt;/code&gt;文件中或另外新增一个名为&lt;a href=&quot;/assets/java-code-coverage/cobertura.gradle&quot;&gt;cobertura.gradle&lt;/a&gt;的脚本，并写入如下代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cobertura &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageFormats = [&amp;apos;html&amp;apos;, &amp;apos;xml&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageEncoding = &amp;apos;UTF-8&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageExcludes = [&amp;apos;.*Application.*&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageIgnoreMethodAnnotations = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckBranchRate = 90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckLineRate = 90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckPackageBranchRate = 90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckPackageLineRate = 90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckTotalBranchRate = 90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckTotalLineRate = 90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageIgnoreTrivial = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckHaltOnFailure = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;check.dependsOn &amp;apos;coberturaCheck&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后，简单写一些测试代码，在命令行中运行&lt;code&gt;./gradlew clean build&lt;/code&gt;来查看代码覆盖率检查是否配置成功，默认cobertura生成的报告在当前项目的&lt;code&gt;build/reports/cobertura/&lt;/code&gt;下，可以查看&lt;code&gt;index.html&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/java-code-coverage/cobertura_report.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;另外，如果在项目中使用cobertura作为代码测试覆盖率检查工具，但未使用&lt;a href=&quot;http://www.slf4j.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SLF4J&lt;/a&gt;日志库，在运行时会报出关于slf4j的&lt;code&gt;NoClassDefFoundError&lt;/code&gt;问题，只需要在&lt;code&gt;build.gradle&lt;/code&gt;中添加testRuntime的依赖即可：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testRuntime &amp;apos;org.slf4j:slf4j-api:1.7.21&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Cobertura-Configuration&quot;&gt;&lt;a href=&quot;#Cobertura-Configuration&quot; class=&quot;headerlink&quot; title=&quot;Cobertura Configuration&quot;&gt;&lt;/a&gt;Cobertura Configuration&lt;/h4&gt;&lt;p&gt;Cobertura的行为是由&lt;code&gt;cobertura&lt;/code&gt;块中的设置选项控制的，以下将列举常用的选项并简单解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;coberturaVersion = &amp;lt;version&amp;gt;&lt;/code&gt;: 指定使用哪个版本的Cobertura来Run测试覆盖率报告，默认值为2.1.1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageDirs = [ &amp;lt;dirnames&amp;gt; ]&lt;/code&gt;: 指定包含代码覆盖率检查的一个或多个Class目录，默认为[ project.sourceSets.main.classesDir.path ]。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageReportDir = &amp;lt;dir&amp;gt;&lt;/code&gt;: 代码覆盖率报告生成目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageFormats = [ &amp;lt;formats&amp;gt; ]&lt;/code&gt;: 指定Cobertura生成报告的格式，支持&lt;code&gt;html&lt;/code&gt;和&lt;code&gt;xml&lt;/code&gt;，默认为html。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageEncoding&lt;/code&gt;: 生成覆盖率报告时的编码，比如&lt;code&gt;UTF-8&lt;/code&gt;，如果未设置将自动跟随操作系统编码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageSourceDirs = &amp;lt;set of directories&amp;gt;&lt;/code&gt;: 指定需要进行覆盖率检查以及将include在报告中的源文件，默认为project.sourceSets.main.java.srcDirs, project.sourceSets.main.groovy.srcDirs和project.sourceSets.main.scala.srcDirs。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageIncludes = [ &amp;lt;regexes&amp;gt; ]&lt;/code&gt;: 指定包含满足正则表达式的类文件，比如&lt;code&gt;coverageIncludes = [&amp;#39;.*net.saliman.someapp.logger.*&amp;#39;]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageExcludes = [ &amp;lt;regexes&amp;gt; ]&lt;/code&gt;: 指定不需要进行覆盖检查的类文件，比如&lt;code&gt;coverageExcludes = [&amp;#39;.*net.saliman.someapp.logger.*&amp;#39;]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageIgnores = [ &amp;lt;regexes&amp;gt; ]&lt;/code&gt;: 指定在源代码级别忽略的正则表达语句，比如一些用于日志记录的代码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageIgnoreTrivial = &amp;lt;true|false&amp;gt;&lt;/code&gt;: 在版本2.0中的新选项，指定是否忽略简单的getters和setters，默认为false。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageIgnoreMethodAnnotations = [ &amp;lt;annotations&amp;gt; ]&lt;/code&gt;: 在2.0版本中，可以指定忽略的方法级注解。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckBranchRate = &amp;lt;percent&amp;gt;&lt;/code&gt;: 指定每个Class的分支覆盖率阈值，0~100的整型值，在运行&lt;code&gt;coberturaCheck&lt;/code&gt;时有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckLineRate = &amp;lt;percent&amp;gt;&lt;/code&gt;: 指定每个Class的行覆盖率阈值，其余同上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckPackageBranchRate = &amp;lt;percent&amp;gt;&lt;/code&gt;: 指定每个Packge的分支覆盖率阈值，其余同上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckPackageLineRate = &amp;lt;percent&amp;gt;&lt;/code&gt;: 指定每个Packge的行覆盖率阈值，其余同上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckTotalBranchRate = &amp;lt;percent&amp;gt;&lt;/code&gt;: 指定整体分支覆盖率阈值，其余同上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckTotalLineRate = &amp;lt;percent&amp;gt;&lt;/code&gt;: 指定整体行覆盖率阈值，其余同上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckRegexes = [ &amp;lt;regexes&amp;gt; ]&lt;/code&gt;: 用于更细粒度的控制，可以指定每个独立类的分支和行覆盖率阈值，每个表达式包含三个键值对，比如:&lt;code&gt;coverageCheckRegexes = [ [ regex: &amp;#39;com.example.reallyimportant.*&amp;#39;, branchRate: 80, lineRate: 90 ], [ regex: &amp;#39;com.example.boringcode.*&amp;#39;, branchRate: 40, lineRate: 30 ] ]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckHaltOnFailure = &amp;lt;true|false&amp;gt;&lt;/code&gt;: 指定&lt;code&gt;coberturaCheck&lt;/code&gt;在不满足最小覆盖率时是否失败的开关，默认为false。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Cobertura-Tasks&quot;&gt;&lt;a href=&quot;#Cobertura-Tasks&quot; class=&quot;headerlink&quot; title=&quot;Cobertura Tasks&quot;&gt;&lt;/a&gt;Cobertura Tasks&lt;/h4&gt;&lt;p&gt;Cobertura创建了三个Tasks用于生成和检查覆盖率报告：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;coberturaReport&lt;/code&gt;: 只用于在测试后生成覆盖率报告，该Task不会触发运行测试，需要Gradle单独处理test，通常用于multi-project中需要合并测试报告的情况。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cobertura&lt;/code&gt;: 运行&lt;code&gt;test&lt;/code&gt;任务并生成覆盖率报告，包含了&lt;code&gt;coberturaReport&lt;/code&gt;任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coberturaCheck&lt;/code&gt;: 在生成覆盖率报告后进行覆盖率检查，但不会运行test。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果需要了解更多，可以参阅&lt;a href=&quot;https://github.com/stevesaliman/gradle-cobertura-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Cobertura Plugin&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Jacoco-vs-Cobertura&quot;&gt;&lt;a href=&quot;#Jacoco-vs-Cobertura&quot; class=&quot;headerlink&quot; title=&quot;Jacoco vs Cobertura&quot;&gt;&lt;/a&gt;Jacoco vs Cobertura&lt;/h3&gt;&lt;p&gt;Jacoco与Cobertura的区别在于插桩的方式，前者是off-line和on-the-fly，而后者只是off-line，Jacoco支持的覆盖率粒度要多于Cobertura(只支持line和branch)，二者都支持&lt;a href=&quot;http://www.sonarqube.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SonarQube&lt;/a&gt;集成，报告都支持HTML和XML格式，Jacoco性能要略优于Cobertura。另外，目前Cobertura2.3版本对Java1.8支持不太好，在使用过程中会遇到ParseException的错误。&lt;/p&gt;
&lt;p&gt;更多对比请参阅&lt;a href=&quot;https://confluence.atlassian.com/display/CLOVER/Comparison+of+code+coverage+tools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Comparison of code coverage tools&lt;/a&gt;和&lt;a href=&quot;https://onlysoftware.wordpress.com/2012/12/19/code-coverage-tools-jacoco-cobertura-emma-comparison-in-sonar/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code Coverage Tools Comparison in Sonar&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;The-End&quot;&gt;&lt;a href=&quot;#The-End&quot; class=&quot;headerlink&quot; title=&quot;The End&quot;&gt;&lt;/a&gt;The End&lt;/h2&gt;&lt;p&gt;总之，在开发过程中进行测试覆盖率检查在一定程度上能够保证代码的质量，可以作为发现未被测试覆盖的代码的一种手段，可以直接反映部分测试遗漏点，从而尽可能减少代码Defects和Bugs及降低出错风险，提高团队成员的信心，至于使用哪种覆盖率工具需要根据项目代码性质决定，大多数情况下建议选择Jacoco。以上就是对Jacoco和Cobertura的基本概念和实践的介绍，现在就可以自己动手试一下吧。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_coverage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code coverage Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Code_Coverage_Tools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java Code Coverage Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/jacoco_plugin.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The JaCoCo Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/springfox/springfox&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;springfox jacoco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://scratchpad.pietschy.com/gradle/logging.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/stevesaliman/gradle-cobertura-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gradle-cobertura-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://plugins.gradle.org/plugin/net.saliman.cobertura&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;net.saliman.cobertura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://confluence.atlassian.com/display/CLOVER/Comparison+of+code+coverage+tools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Comparison of code coverage tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tuicool.com/articles/aq6rUz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅谈代码覆盖率&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://onlysoftware.wordpress.com/2012/12/19/code-coverage-tools-jacoco-cobertura-emma-comparison-in-sonar/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code Coverage Tools Comparison in Sonar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      代码覆盖率是用于衡量源代码被测试粒度和程度的，在一定程序上能够衡量代码质量，通常作为发现未被测试覆盖的代码的一种手段，可以直接反映部分测试遗漏点。覆盖率主要用于尽可能减少代码缺陷和Bugs及降低出错风险，较高的测试覆盖率能够增加开发人员的信心。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="Java" scheme="http://blog.waterstrong.me/tags/Java/"/>
    
      <category term="Code Coverage" scheme="http://blog.waterstrong.me/tags/Code-Coverage/"/>
    
      <category term="Jacoco" scheme="http://blog.waterstrong.me/tags/Jacoco/"/>
    
      <category term="Cobertura" scheme="http://blog.waterstrong.me/tags/Cobertura/"/>
    
  </entry>
  
  <entry>
    <title>Travis CI Step by Step</title>
    <link href="http://blog.waterstrong.me/travisci-by-step/"/>
    <id>http://blog.waterstrong.me/travisci-by-step/</id>
    <published>2016-07-15T13:57:02.000Z</published>
    <updated>2016-07-27T14:35:18.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Travis-CI介绍&quot;&gt;&lt;a href=&quot;#Travis-CI介绍&quot; class=&quot;headerlink&quot; title=&quot;Travis CI介绍&quot;&gt;&lt;/a&gt;Travis CI介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Travis CI is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Travis CI是一款提供托管与分布式持续集成(Continuous Integration)服务的CI工具，与GitHub高度集成，能够构建和测试托管在GitHub上的软件项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/travisci-by-step/travis_ci_home.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Travis CI主要为开源免费提供轻量级可定制化的持续持续集成环境和服务，而对于非开源项目，会按照相应的标准收取一定的费用。Travis CI不仅支持多种语言，而且支持在容器中运行Builds，与GitHub集成度很好，支持Pull Request等。一般通过简单配置&lt;code&gt;.travis.yml&lt;/code&gt;文件即可使用，也省去了自己搭建和维护CI服务器的繁琐工作，但它不支持pipeline，只能支持简单的构建。&lt;/p&gt;
&lt;h2 id=&quot;Travis-CI集成&quot;&gt;&lt;a href=&quot;#Travis-CI集成&quot; class=&quot;headerlink&quot; title=&quot;Travis CI集成&quot;&gt;&lt;/a&gt;Travis CI集成&lt;/h2&gt;&lt;p&gt;Travis CI与GitHub集成只需要简单的几步即可，通过访问&lt;a href=&quot;https://github.com/integrations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Integrations&lt;/a&gt;搜索&lt;code&gt;Travis CI&lt;/code&gt;选择进入子页面，可以看到对Travis CI的集成的基本介绍。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/integrations.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;GitHub登录授权&quot;&gt;&lt;a href=&quot;#GitHub登录授权&quot; class=&quot;headerlink&quot; title=&quot;GitHub登录授权&quot;&gt;&lt;/a&gt;GitHub登录授权&lt;/h4&gt;&lt;p&gt;Travis CI与GitHub集成需要登录GitHub帐号，一般有两种入口方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;a href=&quot;https://github.com/integrations/travis-ci&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Travis CI Integration&lt;/a&gt;页面中点击&lt;code&gt;Add to GitHub&lt;/code&gt;-&amp;gt;&lt;code&gt;Authorize application&lt;/code&gt;进行授权。&lt;/li&gt;
&lt;li&gt;对于&lt;strong&gt;Public&lt;/strong&gt;项目直接访问&lt;a href=&quot;https://travis-ci.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;travis-ci.org&lt;/a&gt;并登录GitHub帐号授权，而&lt;strong&gt;Private&lt;/strong&gt;项目应访问&lt;a href=&quot;https://travis-ci.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;travis-ci.com&lt;/a&gt;。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/authorize_travis_ci.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，若需要管理Travis CI的权限(Revoke/Grant Access)，可以在登录&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;后点击头像下拉菜单中的&lt;a href=&quot;https://github.com/settings/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Settings&lt;/a&gt;，选择左边导航栏中的&lt;a href=&quot;https://github.com/settings/applications&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OAuth applications&lt;/a&gt;，进入&lt;code&gt;Travis CI&lt;/code&gt;应用进行操作，对于未授权的Organization，通常需要手动点击&lt;code&gt;Grant access&lt;/code&gt;确认才能授权Travis CI访问。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/oauth_travis_ci.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;激活GitHub仓库&quot;&gt;&lt;a href=&quot;#激活GitHub仓库&quot; class=&quot;headerlink&quot; title=&quot;激活GitHub仓库&quot;&gt;&lt;/a&gt;激活GitHub仓库&lt;/h4&gt;&lt;p&gt;Travis CI触发Build的原理是基于GitHub的Service Hook钩子实现，而需要Travis CI应用到自己的项目，需要在Travis CI的&lt;a href=&quot;https://travis-ci.org/profile/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Profile&lt;/a&gt; (&lt;code&gt;Yourname&lt;/code&gt;-&amp;gt;&lt;code&gt;Accounts&lt;/code&gt;)中选择对应的Repository并开启Hook，若没有看到项目列出，请点击&lt;code&gt;Sync account&lt;/code&gt;同步一下。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/hook_switch.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;若需要设定某些配置项或设置环境变量，可以点击齿轮状的按钮进行设置页面，更多可参阅&lt;a href=&quot;https://docs.travis-ci.com/user/cron-jobs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Travis CI Docs&lt;/a&gt;。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/travis_ci_settings.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;配置TRAVIS-YML文件&quot;&gt;&lt;a href=&quot;#配置TRAVIS-YML文件&quot; class=&quot;headerlink&quot; title=&quot;配置TRAVIS YML文件&quot;&gt;&lt;/a&gt;配置TRAVIS YML文件&lt;/h4&gt;&lt;p&gt;Travis CI支持多种语言的项目，只需要在项目目录下新建文件&lt;code&gt;.travis.yml&lt;/code&gt;，加入几行配置即可，比如选择&lt;a href=&quot;https://docs.travis-ci.com/user/languages/java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java&lt;/a&gt;项目(Gradle+Java8)，一个简单的示例配置如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;language: java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;install: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;script: ./gradlew clean build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;before_cache:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cache:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  directories:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - $HOME/.gradle/caches/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - $HOME/.gradle/wrapper/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jdk:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - oraclejdk8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以针对多个Java版本进行测试，保证项目的兼容性，只需要设置jdk即可：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jdk:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - oraclejdk8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - oraclejdk7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - openjdk6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再比如&lt;a href=&quot;https://docs.travis-ci.com/user/languages/javascript-with-nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript Node.js&lt;/a&gt;项目(NodeJs+Gulp+Bower+Redis)的简单示例配置如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;language: node_js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node_js:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - &amp;quot;6&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;before_script:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - npm install -g gulp bower&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - bower install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;script: gulp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;services:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - redis-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另外，也支持&lt;a href=&quot;https://docs.travis-ci.com/user/installing-dependencies/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Installing Dependencies&lt;/a&gt;, &lt;a href=&quot;https://docs.travis-ci.com/user/database-setup/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting up Databases&lt;/a&gt;, &lt;a href=&quot;https://docs.travis-ci.com/user/deployment/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployments and Uploads&lt;/a&gt;以及&lt;a href=&quot;https://docs.travis-ci.com/user/notifications/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Configuring Build Notifications&lt;/a&gt;等。更多配置项详情请参阅&lt;a href=&quot;https://docs.travis-ci.com/user/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Started&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;触发Build构建&quot;&gt;&lt;a href=&quot;#触发Build构建&quot; class=&quot;headerlink&quot; title=&quot;触发Build构建&quot;&gt;&lt;/a&gt;触发Build构建&lt;/h4&gt;&lt;p&gt;当所有配置完成后，下一次提交代码时就会触发Build，可以看到Build的一些详细信息，包括Build号，Commit号，Elapsed用时，Log日志等信息，如果成功就显示绿色，失败则显示红色。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/trigger_build.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;除了查看Current当前的Build，也可以选择查看Branches分支状态或Build History历史记录等。&lt;/p&gt;
&lt;h4 id=&quot;关联Build状态&quot;&gt;&lt;a href=&quot;#关联Build状态&quot; class=&quot;headerlink&quot; title=&quot;关联Build状态&quot;&gt;&lt;/a&gt;关联Build状态&lt;/h4&gt;&lt;p&gt;为了显示指明项目与Travis CI的关系与状态，可以在项目README.md中关联Build状态图标，点击项目右边的状态图片&lt;img src=&quot;/assets/travisci-by-step/passing_status.svg&quot; alt=&quot;&quot;&gt;，然后会弹出一个Status Image链接的页面，选择Markdown格式，然后复制链接到项目的README.md中即可。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/link_build_status.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Build状态标识的Markdown格式为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[![Build Status](https://travis-ci.org/GITHUB_NAME/PROJECT_NAME.svg?branch=master)](https://travis-ci.org/GITHUB_NAME/PROJECT_NAME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# E.g. GITHUB_MAME=tw-wee, PROJECT_NAME=qas-service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[![Build Status](https://travis-ci.org/tw-wee/qas-service.svg?branch=master)](https://travis-ci.org/tw-wee/qas-service)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;The-End&quot;&gt;&lt;a href=&quot;#The-End&quot; class=&quot;headerlink&quot; title=&quot;The End&quot;&gt;&lt;/a&gt;The End&lt;/h2&gt;&lt;p&gt;总体说来，对于公司或企业项目，更倾向于选择GoCD或Jenkins这样的产品，个人或社区开源项目建议采用Travis CI来快速实现持续集成服务。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.travis-ci.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Travis CI Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Travis_CI&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Travis CI Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Travis CI是一款提供托管与分布式持续集成服务的CI工具，与GitHub高度集成，能够构建和测试托管在GitHub上的软件项目。主要为开源免费提供轻量级可定制化的持续持续集成环境和服务。Travis CI不仅支持多种语言，而且支持在容器中运行Builds，通过简单配置.travis.yml文件即可使用，也省去了自己搭建和维护CI服务器的繁琐工作。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="DevOps" scheme="http://blog.waterstrong.me/tags/DevOps/"/>
    
      <category term="CI/CD" scheme="http://blog.waterstrong.me/tags/CI-CD/"/>
    
      <category term="TravisCI" scheme="http://blog.waterstrong.me/tags/TravisCI/"/>
    
      <category term="GitHub" scheme="http://blog.waterstrong.me/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins Step by Step</title>
    <link href="http://blog.waterstrong.me/jenkins-by-step/"/>
    <id>http://blog.waterstrong.me/jenkins-by-step/</id>
    <published>2016-07-06T13:30:44.000Z</published>
    <updated>2016-07-27T04:46:53.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Jenkins-Introduction&quot;&gt;&lt;a href=&quot;#Jenkins-Introduction&quot; class=&quot;headerlink&quot; title=&quot;Jenkins Introduction&quot;&gt;&lt;/a&gt;Jenkins Introduction&lt;/h2&gt;&lt;p&gt;Jenkins是一款开源的跨平台的可扩展的持续集成(Continuous Integration)工具。作为目前使用最广泛，用户量最大的CI工具，无论是在GUI操作上，插件生态系统管理，稳定性、可靠性、功能性以及扩展性等方面都表现得较为出色，而且简单易学，入门上手快，当然Jenkins的优势还有很多，之前的项目上都一直在使用Jenkins，对于大多项目来说是完全满足条件的。这里以Jenkins 2.x为例演示如何安装、配置和使用Jenkins。&lt;br&gt;下图摘自官网，展示了持续交付场景下应用示例一般流程。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/pipeline_flow.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Jenkins-Installation&quot;&gt;&lt;a href=&quot;#Jenkins-Installation&quot; class=&quot;headerlink&quot; title=&quot;Jenkins Installation&quot;&gt;&lt;/a&gt;Jenkins Installation&lt;/h2&gt;&lt;p&gt;Jenkins由Java编写的开源产品，支持跨平台，安装也非常方便，可以到&lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenkins官网&lt;/a&gt;下载需要的版本并安装。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/download.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下大致列举出几种常用的安装和使用方式，在安装之前请确保已经安装了Java运行环境。&lt;/p&gt;
&lt;h4 id=&quot;War包安装方式&quot;&gt;&lt;a href=&quot;#War包安装方式&quot; class=&quot;headerlink&quot; title=&quot;War包安装方式&quot;&gt;&lt;/a&gt;War包安装方式&lt;/h4&gt;&lt;p&gt;可以直接下载自带Jetty的&lt;code&gt;*.war&lt;/code&gt;包并运行，非常方便，比较推荐使用，Jenkins默认会运行在&lt;code&gt;8080&lt;/code&gt;端口。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -O http://ftp.tsukuba.wide.ad.jp/software/jenkins/war-stable/2.7.1/jenkins.war&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java -jar jenkins.war&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以下载最新版本的&lt;a href=&quot;http://mirrors.jenkins-ci.org/war-stable/latest/jenkins.war&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jenkins.war&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Docker镜像方式&quot;&gt;&lt;a href=&quot;#Docker镜像方式&quot; class=&quot;headerlink&quot; title=&quot;Docker镜像方式&quot;&gt;&lt;/a&gt;Docker镜像方式&lt;/h4&gt;&lt;p&gt;可以直接下载Docker镜像来使用，无需进行安装，但需要有docker环境。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull jenkinsci/jenkins&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -p 8080:8080 -p 50000:50000 -v /your/home:/var/jenkins_home jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;/your/home&lt;/code&gt;需要替换为你的主机路径，用于保存Jenkins的Workspace数据，更多细节可以参阅&lt;a href=&quot;https://github.com/jenkinsci/docker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub jenkinsci&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Ansible安装方式&quot;&gt;&lt;a href=&quot;#Ansible安装方式&quot; class=&quot;headerlink&quot; title=&quot;Ansible安装方式&quot;&gt;&lt;/a&gt;Ansible安装方式&lt;/h4&gt;&lt;p&gt;另外，还可以通过Ansible自动化脚本安装，在另一篇博客&lt;a href=&quot;/ansible-practice&quot;&gt;Ansible实践篇&lt;/a&gt;中也有涉及。首先需要下载jenkins role到本地，假设下载到了&lt;code&gt;/usr/local/etc/ansible/roles/&lt;/code&gt;目录下。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-galaxy install geerlingguy.jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后编写&lt;code&gt;playbook&lt;/code&gt;来实现&lt;strong&gt;自动化批量安装&lt;/strong&gt;，假设创建一个playbook名为&lt;code&gt;setup_jenkins.yml&lt;/code&gt;，其中&lt;code&gt;ci-server&lt;/code&gt;是&lt;code&gt;inventory&lt;/code&gt;文件中的Group或Host。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- hosts: ci-server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  become_method: sudo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  become: yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  roles:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - /usr/local/etc/ansible/roles/geerlingguy.jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后运行命令执行安装，稍等片刻后可访问主机的8080端口：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-playbook -i inventory setup_jenkins.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果需要设置Java版本可以在安装之前修改&lt;code&gt;geerlingguy.java&lt;/code&gt;中默认的&lt;code&gt;java_packages&lt;/code&gt;。更多说明可以参见&lt;a href=&quot;https://github.com/geerlingguy/ansible-role-jenkins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ansible-role-jenkins&lt;/a&gt;和&lt;a href=&quot;https://github.com/geerlingguy/ansible-role-java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ansible-role-java&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;除了上述安装方式外，也可根据具体的操作系统进行安装，以下给出常用的操作系统下的安装方式。&lt;/p&gt;
&lt;h4 id=&quot;在RedHat-CentOS中安装&quot;&gt;&lt;a href=&quot;#在RedHat-CentOS中安装&quot; class=&quot;headerlink&quot; title=&quot;在RedHat/CentOS中安装&quot;&gt;&lt;/a&gt;在RedHat/CentOS中安装&lt;/h4&gt;&lt;p&gt;通常有两种安装方式：1. 添加Package Repository后使用yum进行安装和升级；2. 直接下载&lt;code&gt;*.rpm&lt;/code&gt;进行安装。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式一：添加Package仓库安装&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式二：下载&lt;code&gt;*.rpm&lt;/code&gt;进行安装&lt;/strong&gt;&lt;br&gt;目前最新版本是&lt;code&gt;2.7.1-1.1.noarch&lt;/code&gt;，若需要指定安装版本，可到&lt;a href=&quot;http://pkg.jenkins-ci.org/redhat-stable/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pkg.jenkins-ci.org/redhat-stable/&lt;/a&gt;查看并下载安装。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -O http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.1-1.1.noarch.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo rpm -ivh jenkins-2.7.1-1.1.noarch.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;在Ubuntu-Debian中安装&quot;&gt;&lt;a href=&quot;#在Ubuntu-Debian中安装&quot; class=&quot;headerlink&quot; title=&quot;在Ubuntu/Debian中安装&quot;&gt;&lt;/a&gt;在Ubuntu/Debian中安装&lt;/h4&gt;&lt;p&gt;通常也有两种安装方式：1. 添加Debian Package Repository进行安装和升级；2. 通过直接下载&lt;code&gt;*.deb&lt;/code&gt;进行安装。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式一：添加Package仓库安装&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget -q -O - http://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deb http://pkg.jenkins.io/debian-stable binary/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式二：下载&lt;code&gt;*.deb&lt;/code&gt;进行安装&lt;/strong&gt;&lt;br&gt;目前最新版本是&lt;code&gt;2.7.1_all&lt;/code&gt;，也可以到&lt;a href=&quot;http://pkg.jenkins-ci.org/debian-stable/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pkg.jenkins-ci.org/debian-stable/&lt;/a&gt;查看并下载指定版本。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -O http://pkg.jenkins-ci.org/debian-stable/binary/jenkins_2.7.1_all.deb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo dpkg -i jenkins_2.7.1_all.deb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;在Mac或Windows下安装&quot;&gt;&lt;a href=&quot;#在Mac或Windows下安装&quot; class=&quot;headerlink&quot; title=&quot;在Mac或Windows下安装&quot;&gt;&lt;/a&gt;在Mac或Windows下安装&lt;/h4&gt;&lt;p&gt;对于Mac OS和Windows，直接下载对应安装包根据提示安装即可：&lt;a href=&quot;https://jenkins.io/content/thank-you-downloading-os-x-installer/#stable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac OS安装包&lt;/a&gt;、&lt;a href=&quot;https://jenkins.io/content/thank-you-downloading-windows-installer/#stable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Windows安装包&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Jenkins-Setup&quot;&gt;&lt;a href=&quot;#Jenkins-Setup&quot; class=&quot;headerlink&quot; title=&quot;Jenkins Setup&quot;&gt;&lt;/a&gt;Jenkins Setup&lt;/h2&gt;&lt;p&gt;当安装完Jenkins 2.x后，访问&lt;code&gt;http://localhost:8080&lt;/code&gt;默认会进入到登录页面。输入默认用户名&lt;code&gt;admin&lt;/code&gt;和密码&lt;code&gt;admin&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/login.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;登录成功后，Jenkins首先会提示安装推荐插件或自选插件，直接点击&lt;code&gt;Install suggested plugins&lt;/code&gt;安装默认推荐的插件即可，当然随后也可以在Plugin管理中再选择安装需要的插件。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/customize_jenkins.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;等待常用的一些插件安装完成后就可以开始创建自己的Job了。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/suggested_plugins.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Jenkins-Jobs&quot;&gt;&lt;a href=&quot;#Jenkins-Jobs&quot; class=&quot;headerlink&quot; title=&quot;Jenkins Jobs&quot;&gt;&lt;/a&gt;Jenkins Jobs&lt;/h2&gt;&lt;p&gt;Jenkins Job是很重要的概念，定义了在什么样的情况下执行什么样的任务，以及执行后的操作。&lt;/p&gt;
&lt;h4 id=&quot;创建一个Job&quot;&gt;&lt;a href=&quot;#创建一个Job&quot; class=&quot;headerlink&quot; title=&quot;创建一个Job&quot;&gt;&lt;/a&gt;创建一个Job&lt;/h4&gt;&lt;p&gt;首先来创建一个Jenkins的Job，点击&lt;code&gt;create new jobs&lt;/code&gt;或&lt;code&gt;New Item&lt;/code&gt;来创建一个Job。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/home.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;Enter an item name&lt;/code&gt;下输入Job的名称，比如：“melon-build”，并选择&lt;code&gt;Freestyle project&lt;/code&gt;，最后点击OK保存。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/new_job.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Source-Code-Management-源代码管理&quot;&gt;&lt;a href=&quot;#Source-Code-Management-源代码管理&quot; class=&quot;headerlink&quot; title=&quot;Source Code Management 源代码管理&quot;&gt;&lt;/a&gt;Source Code Management 源代码管理&lt;/h4&gt;&lt;p&gt;可以指定下载源代码的仓库路径，目前Git是最为流行的VCS，指定Repositories URL，这里以GitHub托管的项目为例，拉取的Branch为&lt;code&gt;*/master&lt;/code&gt;。这里的项目仓库为公开仓库，因此直接用HTTP方式即可，如果是私有项目需要添加授权信息。另外特别注意，需要确保Server安装了Git，否则在pull代码时会因找不到命令而失败。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/job_source_code.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Build-Triggers-构建触发器&quot;&gt;&lt;a href=&quot;#Build-Triggers-构建触发器&quot; class=&quot;headerlink&quot; title=&quot;Build Triggers 构建触发器&quot;&gt;&lt;/a&gt;Build Triggers 构建触发器&lt;/h4&gt;&lt;p&gt;构建触发条件Jenkins提供了多种方式，根据项目需要可以设置不同的触发方式，通常采用&lt;code&gt;Poll SCM&lt;/code&gt;方式，通过设置Schedule来控制触发条件，Schedule采用的是基于&lt;strong&gt;Cron&lt;/strong&gt;语法，但Jenkins对其进行了略微调整，比如设置&lt;code&gt;H/5 * * * *&lt;/code&gt;表示每5分钟检查一次代码仓库是否有新的code changes，如果有就pull并执行tasks。可以通过点击问号&lt;img src=&quot;/assets/jenkins-by-step/help.png&quot; alt=&quot;&quot;&gt;按钮来获得更多帮助信息，或参考&lt;a href=&quot;https://en.wikipedia.org/wiki/Cron&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cron Wiki&lt;/a&gt;和&lt;a href=&quot;http://www.quartz-scheduler.org/documentation/quartz-2.x/tutorials/crontrigger.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CronTrigger Tutorial&lt;/a&gt;。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/job_trigger.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Build-构建和任务&quot;&gt;&lt;a href=&quot;#Build-构建和任务&quot; class=&quot;headerlink&quot; title=&quot;Build 构建和任务&quot;&gt;&lt;/a&gt;Build 构建和任务&lt;/h4&gt;&lt;p&gt;假设项目构建工具采用的是目前相对比较流行的开源自动化构建工具&lt;a href=&quot;https://gradle.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle&lt;/a&gt;，选择&lt;code&gt;Use Gradle Wrapper&lt;/code&gt;，添加项目执行的Tasks即可，图中示例最终将执行&lt;code&gt;gradlew clean build&lt;/code&gt;操作。需要注意的是，如果build依赖特定版本的运行环境，请确保在build机器上安装了对应版本的运行环境，如Java 8等。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/job_build.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然，除了Gradle外还可以选择Maven、Ant等方式。当然，如果有一些复杂的自动化工作也可以选择Shell脚本完成，根据项目需要定义。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/add_build_step.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Post-build-Actions-构建后置行为&quot;&gt;&lt;a href=&quot;#Post-build-Actions-构建后置行为&quot; class=&quot;headerlink&quot; title=&quot;Post-build Actions 构建后置行为&quot;&gt;&lt;/a&gt;Post-build Actions 构建后置行为&lt;/h4&gt;&lt;p&gt;Post-build Actions定义了在完成当前Job的Build任务后接下来需要执行的一系列操作的关系。比如设置在正常完成Build后，进一步获取测试报告和Artifacts，发送Email通知，或触发后续Downstream的一个或多个Jobs，以及部署应用到服务器等。Post-build actions有很多种类型和触发条件，通过下拉列表可以选择，如下图：&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/add_post_action.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;Build other projects&lt;/code&gt;表示将自动触发后续Job，&lt;code&gt;Build other projects(manual step)&lt;/code&gt;表示定义了后续Job，但需要手动点击按钮触发，通常针对部署到High Environments的Job。另外还有一个&lt;code&gt;Trigger parameterized build on other projects&lt;/code&gt;选项定义了同时触发后续的多个Jobs，比如在build完成后同时触发Integration Test、Acceptance Test以及Sonar等。Jenkins也提供了Deployment相关的插件，总之，Jenkins的插件生态系统管理得很好，需要的功能都可以通过Plugins实现。&lt;/p&gt;
&lt;p&gt;下图中定义&lt;code&gt;melon-build&lt;/code&gt;完成后会同时触发执行&lt;code&gt;integration-test&lt;/code&gt;、&lt;code&gt;acceptance-test&lt;/code&gt;和&lt;code&gt;sonar&lt;/code&gt;，执行顺序的关系可以被配置在Pipeline View中以可视化的方式展现出来，稍候会在Pipeline View中提及。另外，还可以在&lt;code&gt;Build Trigger&lt;/code&gt;-&amp;gt;&lt;code&gt;Add Parameters&lt;/code&gt;中选择参数传递策略。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/post_build_parameterized.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;至此，针对第一个melon-build的Job设置完成，可以点击&lt;code&gt;Save&lt;/code&gt;或&lt;code&gt;Apply&lt;/code&gt;保存了，默认会保存在&lt;code&gt;/var/lib/jenkins/jobs/&lt;/code&gt;路径下。&lt;/p&gt;
&lt;h4 id=&quot;Custom-Workspace-自定义工作区&quot;&gt;&lt;a href=&quot;#Custom-Workspace-自定义工作区&quot; class=&quot;headerlink&quot; title=&quot;Custom Workspace 自定义工作区&quot;&gt;&lt;/a&gt;Custom Workspace 自定义工作区&lt;/h4&gt;&lt;p&gt;另外，如果当前Job要重用已经有的Workspace代码，可以选择Tab页&lt;code&gt;General&lt;/code&gt;-&amp;gt;&lt;code&gt;Advanced&lt;/code&gt;-&amp;gt;&lt;code&gt;Use custom workspace&lt;/code&gt;，然后填写&lt;code&gt;Directory&lt;/code&gt;，比如填写为&lt;code&gt;jobs/melon-build/workspace/&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/custom_workspace.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;General&lt;/code&gt;Tab下有很多可选项，如果需要传入特定参数可以勾选&lt;code&gt;This project is parameterized&lt;/code&gt;并配置相应参数，这在配置&lt;code&gt;Post-build Actions&lt;/code&gt;-&amp;gt;&lt;code&gt;Trigger parameterized build on other projects&lt;/code&gt;时会很有用。另外，根据项目情况也可以勾选更多的选项，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Execute concurrent builds if necessary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Restrict where this project can be run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Block build when upstream project is building&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Block build when downstream project is building&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Test-Report-测试报告&quot;&gt;&lt;a href=&quot;#Test-Report-测试报告&quot; class=&quot;headerlink&quot; title=&quot;Test Report 测试报告&quot;&gt;&lt;/a&gt;Test Report 测试报告&lt;/h4&gt;&lt;p&gt;另外，针对测试报告，若基于Jacoco，可直接选择&lt;code&gt;Record JaCoCo coverage report&lt;/code&gt;，当build完成后可自动生成报告。也可以尝试配置&lt;code&gt;Publish JUnit test result report&lt;/code&gt;中的&lt;code&gt;Test report XMLs&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/jacoco_report.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Deployment-部署&quot;&gt;&lt;a href=&quot;#Deployment-部署&quot; class=&quot;headerlink&quot; title=&quot;Deployment 部署&quot;&gt;&lt;/a&gt;Deployment 部署&lt;/h4&gt;&lt;p&gt;部署有多种方式，可以通过&lt;code&gt;Build&lt;/code&gt;中执行部署脚本，或者在&lt;code&gt;Post-build actions&lt;/code&gt;中选择相应的Step，比如针对War包部署可以选择&lt;code&gt;Deploy war/ear to a container&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/deploy_tomcat.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Jenkins-View&quot;&gt;&lt;a href=&quot;#Jenkins-View&quot; class=&quot;headerlink&quot; title=&quot;Jenkins View&quot;&gt;&lt;/a&gt;Jenkins View&lt;/h2&gt;&lt;p&gt;Jenkins提供了多种视图，如Pipeline View、List View、My View等，目的是为了更好地归类和展示所关注的信息，通常会创建Pipeline View来增强Pipeline可视化效果。首先在Jenkins主页点击Dashboad标题栏最右边的&lt;code&gt;+&lt;/code&gt;号，然后输入View Name并选择&lt;code&gt;Build Pipeline View&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/new_view.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后配置Pipeline View，特别注意需要在Layout中选择Initial Job，并且该Job已经配置好Downstream Jobs，然后设定显示的Builds数量和刷新频率等。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/config_pipeline_view.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;配置完成后保存，可以到刚创建的View中查看，可以根据项目需要定义Pipeline Flow，正确配置Job的执行顺序和依赖关系即可。&lt;br&gt;&lt;em&gt;直接Build情况的Pipeline View示例(仅供参考)：&lt;/em&gt;&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/pipeline_view1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;存在参数化情况的Pipeline View示例(仅供参考)：&lt;/em&gt;&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/pipeline_view2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;通常会用颜色来表示Job的状态：绿色代表Pass，黄色代表Building或Unstable，蓝色代表N/A未操作，红色代表Fail。如果需要查看某次Build的Log，可以点击Build编号(或在Build History查看)查看左边栏中的&lt;code&gt;Console Output&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Manage-Jenkins-管理&quot;&gt;&lt;a href=&quot;#Manage-Jenkins-管理&quot; class=&quot;headerlink&quot; title=&quot;Manage Jenkins 管理&quot;&gt;&lt;/a&gt;Manage Jenkins 管理&lt;/h2&gt;&lt;h5 id=&quot;Jenkins-Plugins-插件管理&quot;&gt;&lt;a href=&quot;#Jenkins-Plugins-插件管理&quot; class=&quot;headerlink&quot; title=&quot;Jenkins Plugins 插件管理&quot;&gt;&lt;/a&gt;Jenkins Plugins 插件管理&lt;/h5&gt;&lt;p&gt;Jenkins的插件生态系统管理得很好，通常需要在Workspace中安装很多的插件来实现需要的功能。可以通过&lt;code&gt;Manage Jenkins&lt;/code&gt;-&amp;gt;&lt;code&gt;Manage Plugins&lt;/code&gt;进入到插件管理页面，可以执行安装、升级、删除插件等操作，通常需要重启Jenkins服务来生效你的修改。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/plugins_manager.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下补充罗列一些常用的插件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Gradle+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/GitHub+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.jenkins-ci.org/display/JENKINS/SSH+Slaves+plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SSH Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pipeline Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Deploy+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deploy Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JaCoCo Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Authorize+Project+plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Authorize Project Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Checkstyle Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Trigger+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Parameterized Trigger Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Manage-Nodes-管理节点&quot;&gt;&lt;a href=&quot;#Manage-Nodes-管理节点&quot; class=&quot;headerlink&quot; title=&quot;Manage Nodes 管理节点&quot;&gt;&lt;/a&gt;Manage Nodes 管理节点&lt;/h4&gt;&lt;p&gt;Jenkins提供了集群的能力，允许加入多个Nodes，一台Master对应多个Nodes，Master通常负责Job的Schedule和资源协调，Node通常是执行Master发放的Job并返回结果，这种模型也称Master/Slave模型。&lt;br&gt;当项目的Build/Deploy较多时，可以并行地执行Job任务，减少等待时间，另外，还可以根据Job依赖的环境来指定对应操作系统和构建环境的节点机器。在&lt;code&gt;Manage Jenkins&lt;/code&gt;-&amp;gt;&lt;code&gt;Manage Nodes&lt;/code&gt;页面可以管理节点，首先来创建一个节点&lt;code&gt;New Node&lt;/code&gt;，填写相应的&lt;code&gt;Remote root directory&lt;/code&gt;和&lt;code&gt;Labels&lt;/code&gt;信息，这里Launch method选择SSH方式，指定Host和Credentials，当然也可以选择其他的登录授权方式。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/new_node.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/jenkins-by-step/add_credential.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;特别注意：&lt;/em&gt;请确保master上的key可以访问指定的node，并且jenkins拥有使用该key的权限，以及jenkins用户能够对Remote root directory进行读写操作。&lt;/p&gt;
&lt;p&gt;创建完成后可以启动并查看Node状态以及系统信息等：&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/all_nodes.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;若需指定某个Job在指定的节点上运行，请在Job配置中修改&lt;code&gt;General&lt;/code&gt;-&amp;gt;&lt;code&gt;Restrict where this project can be run&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Jenkins-CLI-命令行模式&quot;&gt;&lt;a href=&quot;#Jenkins-CLI-命令行模式&quot; class=&quot;headerlink&quot; title=&quot;Jenkins CLI 命令行模式&quot;&gt;&lt;/a&gt;Jenkins CLI 命令行模式&lt;/h4&gt;&lt;p&gt;Jenkins提供了一个内置的命令行接口，允许通过一些脚本命令远程访问Jenkins功能，这对于自动化的任务和批量操作等非常有利。&lt;/p&gt;
&lt;p&gt;首先需要下载&lt;code&gt;jenkins-cli.jar&lt;/code&gt;，假设你的Jenkins地址是&lt;code&gt;jenkins.xxx.net:8080&lt;/code&gt;，可以访问以下地址下载：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://jenkins.xxx.com:8080/jnlpJars/jenkins-cli.jar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后可以通过命令行查看帮助，命令为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java -jar jenkins-cli.jar -s http://jenkins.xxx.net:8080/ help&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然也可以通过界面查看每个命令的使用帮助，在&lt;code&gt;Manage Jenkins&lt;/code&gt;-&amp;gt;&lt;code&gt;Jenkins CLI&lt;/code&gt;页面查看到所有Available的命令。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/jenkins_cli.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如何需要了解更多，可以参考&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+CLI&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenkins CLI Wiki&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;其他配置管理&quot;&gt;&lt;a href=&quot;#其他配置管理&quot; class=&quot;headerlink&quot; title=&quot;其他配置管理&quot;&gt;&lt;/a&gt;其他配置管理&lt;/h4&gt;&lt;p&gt;Jenkins除了对插件和节点进行管理，还有系统管理、安全管理、权限配置、命令行工具、用户管理等。在主页选择&lt;code&gt;Manage Jenkins&lt;/code&gt;进入到Jenkins管理页面，可以选择相应的功能进行配置，每项功能进入后都会有相关的说明，相对也比较简单易懂，这里就不再一一列举了。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/manage_jenkins.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Pipeline-as-Code&quot;&gt;&lt;a href=&quot;#Pipeline-as-Code&quot; class=&quot;headerlink&quot; title=&quot;Pipeline as Code&quot;&gt;&lt;/a&gt;Pipeline as Code&lt;/h2&gt;&lt;p&gt;Jenkins 2.x推出了&lt;code&gt;Jenkinsfile&lt;/code&gt;来实现将pipeline定义为代码形式目标，即Pipeline as Code，特别是在集群管理时提升了效率，但会存在一个缺点，问题在于这可能造成在GUI上进行了修改而未修改Jenkinsfile的不一致性，而且无法追踪到这样的修改，所以，如果没有特别的需求，请谨慎选择使用。有兴趣的同学可以研究一下，另外Jenkins CLI也可以尝试一下&lt;/p&gt;
&lt;h2 id=&quot;The-End&quot;&gt;&lt;a href=&quot;#The-End&quot; class=&quot;headerlink&quot; title=&quot;The End&quot;&gt;&lt;/a&gt;The End&lt;/h2&gt;&lt;p&gt;总得来说，Jenkins在常规的项目中使用是不错的选择，强烈推荐使用。另外，后续有时间会写一些关于GoCD，&lt;a href=&quot;/travisci-by-step&quot;&gt;Travis CI&lt;/a&gt;以及Concourse CI的简单使用教程，敬请期待。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenkins Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tutorialspoint.com/jenkins/index.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenkins Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Step+by+step+guide+to+set+up+master+and+slave+machines&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Step by step guide to set up master and slave machines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Build+Pipeline+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Build Pipeline Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.donaldsimpson.co.uk/2011/10/06/jenkins-slave-nodes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenkins Slave Nodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Jenkins是一款开源的跨平台的可扩展的持续集成工具。作为目前使用最广泛，用户量最大的CI工具，无论是在GUI操作上，插件生态系统管理，稳定性、可靠性、功能性以及扩展性等方面都表现得较为出色，而且简单易学，入门上手快。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="DevOps" scheme="http://blog.waterstrong.me/tags/DevOps/"/>
    
      <category term="CI/CD" scheme="http://blog.waterstrong.me/tags/CI-CD/"/>
    
      <category term="Jenkins" scheme="http://blog.waterstrong.me/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Ansible实践篇</title>
    <link href="http://blog.waterstrong.me/ansible-practice/"/>
    <id>http://blog.waterstrong.me/ansible-practice/</id>
    <published>2016-07-03T13:15:39.000Z</published>
    <updated>2016-07-12T14:42:33.000Z</updated>
    
    <content type="html">&lt;p&gt;本文是一篇Workshop演练指南，&lt;a href=&quot;https://github.com/Waterstrong/ansible-workshop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Workshop Step by Step&lt;/a&gt;，旨在通过Workshop形式快速掌握Ansible的常用命令和基本用法，俗话说得好：Practice Makes Perfect！&lt;/p&gt;
&lt;p&gt;注：所有操作均在Mac系统，Linux系统类似。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Step-1-Set-up-the-environment-on-Mac&quot;&gt;&lt;a href=&quot;#Step-1-Set-up-the-environment-on-Mac&quot; class=&quot;headerlink&quot; title=&quot;Step 1. Set up the environment on Mac&quot;&gt;&lt;/a&gt;Step 1. Set up the environment on Mac&lt;/h2&gt;&lt;h3 id=&quot;Install-Ansible&quot;&gt;&lt;a href=&quot;#Install-Ansible&quot; class=&quot;headerlink&quot; title=&quot;Install Ansible&quot;&gt;&lt;/a&gt;Install Ansible&lt;/h3&gt;&lt;h4 id=&quot;Brew-Install&quot;&gt;&lt;a href=&quot;#Brew-Install&quot; class=&quot;headerlink&quot; title=&quot;Brew Install&quot;&gt;&lt;/a&gt;Brew Install&lt;/h4&gt;&lt;p&gt;可以采用&lt;a href=&quot;http://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew&lt;/a&gt;进行安装：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install ansible # 安装Ansible&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew install --upgrade ansible # 以后可更新版本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Pip-Install&quot;&gt;&lt;a href=&quot;#Pip-Install&quot; class=&quot;headerlink&quot; title=&quot;Pip Install&quot;&gt;&lt;/a&gt;Pip Install&lt;/h4&gt;&lt;p&gt;还可采用Python的&lt;a href=&quot;https://pip.pypa.io/en/stable/installing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pip&lt;/a&gt;包管理工具安装：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install ansible # 安装Ansible&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install --upgrade ansible # 以后可更新版本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Install-VirtualBox-if-not-have-one&quot;&gt;&lt;a href=&quot;#Install-VirtualBox-if-not-have-one&quot; class=&quot;headerlink&quot; title=&quot;Install VirtualBox if not have one&quot;&gt;&lt;/a&gt;Install VirtualBox if not have one&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install Caskroom/cask/virtualbox&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或在&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VirtualBox官网下载&lt;/a&gt;进行安装。&lt;/p&gt;
&lt;h3 id=&quot;Install-Vagrant-if-not-have-one&quot;&gt;&lt;a href=&quot;#Install-Vagrant-if-not-have-one&quot; class=&quot;headerlink&quot; title=&quot;Install Vagrant if not have one&quot;&gt;&lt;/a&gt;Install Vagrant if not have one&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install vagrant&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或在&lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vagrant官网下载&lt;/a&gt;进行安装。&lt;/p&gt;
&lt;h3 id=&quot;Vagrant-up-base-on-existing-Vagrantfile&quot;&gt;&lt;a href=&quot;#Vagrant-up-base-on-existing-Vagrantfile&quot; class=&quot;headerlink&quot; title=&quot;Vagrant up base on existing Vagrantfile&quot;&gt;&lt;/a&gt;Vagrant up base on existing &lt;code&gt;Vagrantfile&lt;/code&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/Waterstrong/ansible-workshop.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout step1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ansible-workshop/vagrant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant up&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;验证登录虚拟机成功后退出:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Test-Ansible-Connection&quot;&gt;&lt;a href=&quot;#Test-Ansible-Connection&quot; class=&quot;headerlink&quot; title=&quot;Test Ansible Connection&quot;&gt;&lt;/a&gt;Test Ansible Connection&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ansible -i inventory all -m ping&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若连接成功返回:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.100 | SUCCESS =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;changed&amp;quot;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Unreachable-Solution&quot;&gt;&lt;a href=&quot;#Unreachable-Solution&quot; class=&quot;headerlink&quot; title=&quot;Unreachable Solution&quot;&gt;&lt;/a&gt;Unreachable Solution&lt;/h4&gt;&lt;p&gt;如果连接不成功返回:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.100 | UNREACHABLE! =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;changed&amp;quot;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;msg&amp;quot;: &amp;quot;Failed to connect to the host via ssh.&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;unreachable&amp;quot;: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可能原因是之前已经在&lt;code&gt;~/.ssh/known_hosts&lt;/code&gt;中有相同的记录，可以通过ssh命令确认:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh -i vagrant/.vagrant/machines/default/virtualbox/private_key vagrant@192.168.33.100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果确实报错:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Someone could be eavesdropping on you right now (man-in-the-middle attack)!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;It is also possible that a host key has just been changed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The fingerprint for the ECDSA key sent by the remote host is&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SHA256:JIdGdnPGRJcOZd1ZMiisaPesCr3I0/o00agtrOGNYYA.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Please contact your system administrator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Add correct host key in /Users/sqlin/.ssh/known_hosts to get rid of this message.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Offending ECDSA key in /Users/sqlin/.ssh/known_hosts:50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ECDSA host key for 192.168.33.100 has changed and you have requested strict checking.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Host key verification failed.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可通过执行以下命令解决:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -R 192.168.33.100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者可直接修改known_hosts文件，找到该记录并删除:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim ~/.ssh/known_hosts # 找到192.168.33.100记录并删除行后保存&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Environment-Ready&quot;&gt;&lt;a href=&quot;#Environment-Ready&quot; class=&quot;headerlink&quot; title=&quot;Environment Ready&quot;&gt;&lt;/a&gt;Environment Ready&lt;/h3&gt;&lt;p&gt;环境搭建完成，准备工作结束，关闭虚拟机:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd vagrant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant halt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Step-2-Inventory-Practice&quot;&gt;&lt;a href=&quot;#Step-2-Inventory-Practice&quot; class=&quot;headerlink&quot; title=&quot;Step 2. Inventory Practice&quot;&gt;&lt;/a&gt;Step 2. Inventory Practice&lt;/h2&gt;&lt;p&gt;当前工作目录为&lt;code&gt;ansible-workshop&lt;/code&gt;，演示使用Inventory文件来指定受控资源列表。&lt;/p&gt;
&lt;h4 id=&quot;配置虚拟机Host2&quot;&gt;&lt;a href=&quot;#配置虚拟机Host2&quot; class=&quot;headerlink&quot; title=&quot;配置虚拟机Host2&quot;&gt;&lt;/a&gt;配置虚拟机Host2&lt;/h4&gt;&lt;p&gt;现在可以再加入一台虚拟机，随后会在inventory中进行配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir vagrant2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd vagrant2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant init ubuntu/trusty64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改Vagrantfile并加入以下配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.33.101&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vb.name = &amp;quot;ansible-workshop-host2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动第二台虚拟机后再回到上一级目录：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant up&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ..&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;配置Inventory加入新Host2&quot;&gt;&lt;a href=&quot;#配置Inventory加入新Host2&quot; class=&quot;headerlink&quot; title=&quot;配置Inventory加入新Host2&quot;&gt;&lt;/a&gt;配置Inventory加入新Host2&lt;/h4&gt;&lt;p&gt;创建名为&lt;code&gt;hosts&lt;/code&gt;的文件，配置虚拟机的Host和Group：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[ubuntu]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.100 ansible_ssh_user=vagrant ansible_ssh_private_key_file=vagrant/.vagrant/machines/default/virtualbox/private_key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ubuntu2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.101 ansible_ssh_user=vagrant ansible_ssh_private_key_file=vagrant2/.vagrant/machines/default/virtualbox/private_key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[myserver:children]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ubunt2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;测试是否ping得通&quot;&gt;&lt;a href=&quot;#测试是否ping得通&quot; class=&quot;headerlink&quot; title=&quot;测试是否ping得通&quot;&gt;&lt;/a&gt;测试是否ping得通&lt;/h4&gt;&lt;p&gt;测试一下应该两台都可以正常访问：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible -i hosts myserver -m ping&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可能需要多次输入&lt;code&gt;yes&lt;/code&gt;回车确认加入key fingerprint，当然也可在ansible.cfg中配置参数关闭提示。当连接成功结果为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.100 | SUCCESS =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;changed&amp;quot;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.101 | SUCCESS =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;changed&amp;quot;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以单独ping某台虚拟机：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible -i hosts ubuntu2 -m ping&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Step-3-Playbooks-Roles-and-Tasks-Practice&quot;&gt;&lt;a href=&quot;#Step-3-Playbooks-Roles-and-Tasks-Practice&quot; class=&quot;headerlink&quot; title=&quot;Step 3. Playbooks, Roles and Tasks Practice&quot;&gt;&lt;/a&gt;Step 3. Playbooks, Roles and Tasks Practice&lt;/h2&gt;&lt;h4 id=&quot;创建playbooks&quot;&gt;&lt;a href=&quot;#创建playbooks&quot; class=&quot;headerlink&quot; title=&quot;创建playbooks&quot;&gt;&lt;/a&gt;创建playbooks&lt;/h4&gt;&lt;p&gt;写一个Playbook,命名为&lt;code&gt;setup_server.yml&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- hosts: myserver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  become_method: sudo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  become: yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  roles:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - install_tools&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;创建roles和tasks&quot;&gt;&lt;a href=&quot;#创建roles和tasks&quot; class=&quot;headerlink&quot; title=&quot;创建roles和tasks&quot;&gt;&lt;/a&gt;创建roles和tasks&lt;/h4&gt;&lt;p&gt;在ansible-workshop目录下创建文件&lt;code&gt;roles/install_tools/tasks/main.yml&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- name: Ensure update cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  run_once: no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  apt:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update_cache: yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- name: Ensure serveral components installed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  apt:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &amp;quot;&amp;#123;&amp;#123;item.value&amp;#125;&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state: installed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  with_items: &amp;quot;&amp;#123;&amp;#123;packages&amp;#125;&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在ansible-workshop目录下创建文件&lt;code&gt;roles/install_tools/vars/main.yml&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;packages:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - &amp;#123; name: &amp;apos;Git&amp;apos;, value: git &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当前目录结构如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── hosts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── roles&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── install_tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       ├── tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       │   └── main.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── vars&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│           └── main.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── setup_server.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;运行playbooks安装Git&quot;&gt;&lt;a href=&quot;#运行playbooks安装Git&quot; class=&quot;headerlink&quot; title=&quot;运行playbooks安装Git&quot;&gt;&lt;/a&gt;运行playbooks安装Git&lt;/h4&gt;&lt;p&gt;运行Playbooks命令如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-playbook -i hosts setup_server.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后执行完成显示：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PLAY [myserver] ****************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TASK [setup] *******************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok: [192.168.33.100]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok: [192.168.33.101]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TASK [install_tools : Ensure update cache] *************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok: [192.168.33.100]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TASK [install_tools : Ensure serveral components installed] ********************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok: [192.168.33.100] =&amp;gt; (item=&amp;#123;u&amp;apos;name&amp;apos;: u&amp;apos;Git&amp;apos;, u&amp;apos;value&amp;apos;: u&amp;apos;git&amp;apos;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok: [192.168.33.101] =&amp;gt; (item=&amp;#123;u&amp;apos;name&amp;apos;: u&amp;apos;Git&amp;apos;, u&amp;apos;value&amp;apos;: u&amp;apos;git&amp;apos;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PLAY RECAP *********************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.100             : ok=3    changed=0    unreachable=0    failed=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.101             : ok=2    changed=0    unreachable=0    failed=0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Step-4-Install-Apache2-Server-Practice&quot;&gt;&lt;a href=&quot;#Step-4-Install-Apache2-Server-Practice&quot; class=&quot;headerlink&quot; title=&quot;Step 4. Install Apache2 Server Practice&quot;&gt;&lt;/a&gt;Step 4. Install Apache2 Server Practice&lt;/h2&gt;&lt;h4 id=&quot;安装Apache2&quot;&gt;&lt;a href=&quot;#安装Apache2&quot; class=&quot;headerlink&quot; title=&quot;安装Apache2&quot;&gt;&lt;/a&gt;安装Apache2&lt;/h4&gt;&lt;p&gt;修改文件&lt;code&gt;roles/install_tools/vars/main.yml&lt;/code&gt;并添加一行安装Apache2的条目：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;packages:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - &amp;#123; name: &amp;apos;Git&amp;apos;, value: git &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - &amp;#123; name: &amp;apos;Apache2&amp;apos;, value: apache2 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Git下载代码&quot;&gt;&lt;a href=&quot;#Git下载代码&quot; class=&quot;headerlink&quot; title=&quot;Git下载代码&quot;&gt;&lt;/a&gt;Git下载代码&lt;/h4&gt;&lt;p&gt;通过git clone下载静态页面代码测试服务器，首先创建一个role的task文件&lt;code&gt;roles/git_clone_file/tasks/main.yml&lt;/code&gt;并写以下内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- name: Ensure repo clone and update to apache directory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  git:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repo: &amp;quot;https://github.com/Waterstrong/ansible-workshop.git&amp;quot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    version: &amp;quot;page&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dest: &amp;quot;/var/www/html/page&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update: yes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;配置重启Apache服务&quot;&gt;&lt;a href=&quot;#配置重启Apache服务&quot; class=&quot;headerlink&quot; title=&quot;配置重启Apache服务&quot;&gt;&lt;/a&gt;配置重启Apache服务&lt;/h4&gt;&lt;p&gt;创建一个role的task文件&lt;code&gt;roles/start_apache2/tasks/main.yml&lt;/code&gt;并配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- name: enabled mod_rewrite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  apache2_module:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: rewrite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state: present&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- name: restart apache2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  service:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: apache2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state: restarted&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当前目录树结构为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── hosts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── roles&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── git_clone_file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │       └── main.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── install_tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   │   └── main.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── vars&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │       └── main.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── start_apache2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│           └── main.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── setup_server.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;运行playbook并测试服务器&quot;&gt;&lt;a href=&quot;#运行playbook并测试服务器&quot; class=&quot;headerlink&quot; title=&quot;运行playbook并测试服务器&quot;&gt;&lt;/a&gt;运行playbook并测试服务器&lt;/h4&gt;&lt;p&gt;在目录&lt;code&gt;ansible-workshop&lt;/code&gt;目录下运行命令测试：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-playbook -i hosts setup_server.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;成功执行完成后可访问&lt;a href=&quot;http://192.168.33.100/page&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.33.100/page&lt;/a&gt;和&lt;a href=&quot;http://192.168.33.101/page&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.33.101/page&lt;/a&gt;测试是否部署页面成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/ansible-practice/page_demo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Step-5-Ansible-Galaxy-Practice&quot;&gt;&lt;a href=&quot;#Step-5-Ansible-Galaxy-Practice&quot; class=&quot;headerlink&quot; title=&quot;Step 5. Ansible Galaxy Practice&quot;&gt;&lt;/a&gt;Step 5. Ansible Galaxy Practice&lt;/h2&gt;&lt;p&gt;通过Ansible Galaxy快速安装Jenkins。在&lt;a href=&quot;https://galaxy.ansible.com/list#/roles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Galaxy&lt;/a&gt;上搜索找到Jenkins对应的Role，比如选择&lt;a href=&quot;https://galaxy.ansible.com/geerlingguy/jenkins/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;geerlingguy.jenkins&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;下载Jenkins的role到本地&quot;&gt;&lt;a href=&quot;#下载Jenkins的role到本地&quot; class=&quot;headerlink&quot; title=&quot;下载Jenkins的role到本地&quot;&gt;&lt;/a&gt;下载Jenkins的role到本地&lt;/h4&gt;&lt;p&gt;首先下载role到本地：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-galaxy install geerlingguy.jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下载role安装成功后得到以下信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- downloading role &amp;apos;jenkins&amp;apos;, owned by geerlingguy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- downloading role from https://github.com/geerlingguy/ansible-role-jenkins/archive/2.1.1.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- extracting geerlingguy.jenkins to /usr/local/etc/ansible/roles/geerlingguy.jenkins&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- geerlingguy.jenkins was installed successfully&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- adding dependency: geerlingguy.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- downloading role &amp;apos;java&amp;apos;, owned by geerlingguy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- downloading role from https://github.com/geerlingguy/ansible-role-java/archive/1.4.0.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- extracting geerlingguy.java to /usr/local/etc/ansible/roles/geerlingguy.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- geerlingguy.java was installed successfully&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;特别注意其中的路径&lt;code&gt;/usr/local/etc/ansible/roles/geerlingguy.jenkins&lt;/code&gt;，会在接下来的role中用到。 &lt;/p&gt;
&lt;h4 id=&quot;创建安装Jenkins的playbook&quot;&gt;&lt;a href=&quot;#创建安装Jenkins的playbook&quot; class=&quot;headerlink&quot; title=&quot;创建安装Jenkins的playbook&quot;&gt;&lt;/a&gt;创建安装Jenkins的playbook&lt;/h4&gt;&lt;p&gt;在&lt;code&gt;ansible-workshop&lt;/code&gt;目录创建一个安装jenkins的playbook &lt;code&gt;setup_jenkins.yml&lt;/code&gt;，目前只把第一台虚拟机作为CI服务器:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- hosts: ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  become_method: sudo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  become: yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  roles:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - /usr/local/etc/ansible/roles/geerlingguy.jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中的role为之前安装的文件路径。&lt;/p&gt;
&lt;h4 id=&quot;运行命令执行安装&quot;&gt;&lt;a href=&quot;#运行命令执行安装&quot; class=&quot;headerlink&quot; title=&quot;运行命令执行安装&quot;&gt;&lt;/a&gt;运行命令执行安装&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-playbook -i hosts setup_jenkins.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可能会花较长的时间，请耐心等待。安装成功后可以访问Jenkins Home页面&lt;a href=&quot;http://192.168.33.100:8080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.33.100:8080&lt;/a&gt;或Jenkins CLI页面&lt;a href=&quot;http://192.168.33.100:8080/cli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.33.100:8080/cli&lt;/a&gt;，然后可以开始使用Jenkins了。&lt;br&gt;用户名: &lt;code&gt;admin&lt;/code&gt;   密码: &lt;code&gt;admin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/ansible-practice/jenkins.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Workshop结束语&quot;&gt;&lt;a href=&quot;#Workshop结束语&quot; class=&quot;headerlink&quot; title=&quot;Workshop结束语&quot;&gt;&lt;/a&gt;Workshop结束语&lt;/h4&gt;&lt;p&gt;Thanks everyone! You can halt your virtual machines and destroy them to reduce your computer resoures.&lt;br&gt;Make sure your are in &lt;code&gt;ansible-workshop&lt;/code&gt; directory and execute the below commands:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd vagrant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant halt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant destroy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ../vagrant2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant halt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant destroy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ansible.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.ansible.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://galaxy.ansible.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Galaxy Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://galaxy.ansible.com/geerlingguy/jenkins/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;geerlingguy.jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/book/yaowenjie/ansible-workshop/details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Workshop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/richardzone/ansible-training-workshop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Training Workshop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.vagrantup.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pip.pypa.io/en/stable/installing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      本文是一篇Workshop演练指南，Ansible Workshop Step by Step，旨在通过Workshop形式快速掌握Ansible的常用命令和基本用法，俗话说得好：Practice Makes Perfect！
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="DevOps" scheme="http://blog.waterstrong.me/tags/DevOps/"/>
    
      <category term="Jenkins" scheme="http://blog.waterstrong.me/tags/Jenkins/"/>
    
      <category term="Ansible" scheme="http://blog.waterstrong.me/tags/Ansible/"/>
    
      <category term="Workshop" scheme="http://blog.waterstrong.me/tags/Workshop/"/>
    
      <category term="Apache2" scheme="http://blog.waterstrong.me/tags/Apache2/"/>
    
  </entry>
  
  <entry>
    <title>Ansible基础篇</title>
    <link href="http://blog.waterstrong.me/ansible-basic/"/>
    <id>http://blog.waterstrong.me/ansible-basic/</id>
    <published>2016-06-26T11:56:40.000Z</published>
    <updated>2016-07-27T04:47:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是Ansible&quot;&gt;&lt;a href=&quot;#什么是Ansible&quot; class=&quot;headerlink&quot; title=&quot;什么是Ansible?&quot;&gt;&lt;/a&gt;什么是Ansible?&lt;/h2&gt;&lt;p&gt;Ansible是一个IT自动化工具（IT Automation Tool）。它能够很容易地实现管理配置、软件部署、编排任务(如持续部署)等自动化运维工作。其主要目标就是变得更加简单易使用，同时也考虑到安全和可靠性等。&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用Ansible&quot;&gt;&lt;a href=&quot;#为什么要使用Ansible&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用Ansible?&quot;&gt;&lt;/a&gt;为什么要使用Ansible?&lt;/h2&gt;&lt;h3 id=&quot;存在的问题及解决方案&quot;&gt;&lt;a href=&quot;#存在的问题及解决方案&quot; class=&quot;headerlink&quot; title=&quot;存在的问题及解决方案&quot;&gt;&lt;/a&gt;存在的问题及解决方案&lt;/h3&gt;&lt;p&gt;当需要对系统配置进行管理、维护以及部署时通常采用文档方式或Shell脚本。对于上百上千台机器集群进行管理时文档已经不适用，而Shell方式对维护人员要求较高，而且容易出错。总得来说传统方式会存在以下几个方面的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机器数量庞大，难于手动管理&lt;/li&gt;
&lt;li&gt;大量的重复运维工作，浪费人力&lt;/li&gt;
&lt;li&gt;复杂的系统，难于避免出错&lt;/li&gt;
&lt;li&gt;不可跨平台，难以复用和维护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此需要一个统一的管理工具，而且相对来说简单易用，而且能够支持跨平台，高可读性易于维护，高重用性提升效率，总之能够快速有效地完成自动化运维工作。而Ansible是众多自动化工具中较为出色的一款。&lt;/p&gt;
&lt;h3 id=&quot;自动化配置管理工具对比&quot;&gt;&lt;a href=&quot;#自动化配置管理工具对比&quot; class=&quot;headerlink&quot; title=&quot;自动化配置管理工具对比&quot;&gt;&lt;/a&gt;自动化配置管理工具对比&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tools&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;DSL&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ANSIBLE&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YAML&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Python，可维护性较高，架构简单，Windows平台支持有限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SALTSTACK&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;SLS，支持YAML&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Python，简单快速灵活，Windows平台支持有限，大规模多功能支持欠缺&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUPPET&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ruby&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ruby，成熟度高，学习曲线较陡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CHEF&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ruby&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ruby，成熟度高，学习曲线较陡&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Ansible基本概念&quot;&gt;&lt;a href=&quot;#Ansible基本概念&quot; class=&quot;headerlink&quot; title=&quot;Ansible基本概念&quot;&gt;&lt;/a&gt;Ansible基本概念&lt;/h2&gt;&lt;h3 id=&quot;Ansible-CLI&quot;&gt;&lt;a href=&quot;#Ansible-CLI&quot; class=&quot;headerlink&quot; title=&quot;Ansible CLI&quot;&gt;&lt;/a&gt;Ansible CLI&lt;/h3&gt;&lt;p&gt;Ansible CLI 包含以下几个常用的指令：&lt;code&gt;ansible&lt;/code&gt;, &lt;code&gt;ansible-playbook&lt;/code&gt;, &lt;code&gt;ansible-doc&lt;/code&gt;以及&lt;code&gt;ansible-galaxy&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;特别注意在使用命令行时会遇到当在&lt;code&gt;known_hosts&lt;/code&gt;中新加入fingerprint时会弹出确认信息的问题，如果想要禁用确认，可以配置&lt;code&gt;/usr/local/etc/ansible/ansible.cfg&lt;/code&gt;或&lt;code&gt;~/.ansible.cfg&lt;/code&gt;并写入以下内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[defaults]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host_key_checking = False&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者直接在命令行中执行export命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export ANSIBLE_HOST_KEY_CHECKING=False&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以阅读更多关于&lt;a href=&quot;http://docs.ansible.com/ansible/intro_getting_started.html#host-key-checking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Host Key Checking&lt;/a&gt;的介绍。接下来分别介绍一下CLI的常用指令：&lt;/p&gt;
&lt;h4 id=&quot;ansible&quot;&gt;&lt;a href=&quot;#ansible&quot; class=&quot;headerlink&quot; title=&quot;$ ansible&quot;&gt;&lt;/a&gt;$ ansible&lt;/h4&gt;&lt;p&gt;ansible基本指令，用于ansible基本的操作，属于指令核心部分，其主要用于执行&lt;a href=&quot;http://docs.ansible.com/ansible/intro_adhoc.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ad-Hoc&lt;/a&gt;命令，即单条命令。默认命令后需要跟主机和选项部分，默认不指定模块时，使用的是command模块。&lt;/p&gt;
&lt;p&gt;以下为一些例子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# ping all nodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -m ping&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# as bruce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -m ping -u bruce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# as bruce, sudoing to root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -m ping -u bruce --sudo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# as bruce, sudoing to batman&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -m ping -u bruce --sudo --sudo-user batman&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# With latest version of ansible `sudo` is deprecated so use become&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# as bruce, sudoing to root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -m ping -u bruce -b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# as bruce, sudoing to batman&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -m ping -u bruce -b --become-user batman&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# run a live command on all nodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -a &amp;quot;/bin/echo hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;ansible-playbook&quot;&gt;&lt;a href=&quot;#ansible-playbook&quot; class=&quot;headerlink&quot; title=&quot;$ ansible-playbook&quot;&gt;&lt;/a&gt;$ ansible-playbook&lt;/h4&gt;&lt;p&gt;ansible执行Playbook的命令，该指令使用最为频繁。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-playbook -i inventory setup_server.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;ansible-doc&quot;&gt;&lt;a href=&quot;#ansible-doc&quot; class=&quot;headerlink&quot; title=&quot;$ ansible-doc&quot;&gt;&lt;/a&gt;$ ansible-doc&lt;/h4&gt;&lt;p&gt;该指令用于查看模块信息，常用参数有&lt;code&gt;-l&lt;/code&gt;和&lt;code&gt;-s&lt;/code&gt; ：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 列出所有已安装的模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible-doc -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看具体某模块，如command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible-doc -s command&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;ansible-galaxy&quot;&gt;&lt;a href=&quot;#ansible-galaxy&quot; class=&quot;headerlink&quot; title=&quot;$ ansible-galaxy&quot;&gt;&lt;/a&gt;$ ansible-galaxy&lt;/h4&gt;&lt;p&gt;用于生成ansible最佳实践目录的命令，通常用于下载已经写好的roles，可以到&lt;a href=&quot;https://galaxy.ansible.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Galaxy&lt;/a&gt;上搜索Roles，如&lt;code&gt;geerlingguy.jenkins&lt;/code&gt;，然后安装。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-galaxy install geerlingguy.jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Inventory&quot;&gt;&lt;a href=&quot;#Inventory&quot; class=&quot;headerlink&quot; title=&quot;Inventory&quot;&gt;&lt;/a&gt;Inventory&lt;/h3&gt;&lt;p&gt;Inventory文件用来指定受控资源列表，也就是主机列表，可同时操作属于一个组的多台主机，组和主机之间的关系通过inventory文件配置。可以设置Hosts，指定Groups以及Groups中的Variables和Groups中的Groups。&lt;/p&gt;
&lt;h4 id=&quot;Hosts-and-Groups&quot;&gt;&lt;a href=&quot;#Hosts-and-Groups&quot; class=&quot;headerlink&quot; title=&quot;Hosts and Groups&quot;&gt;&lt;/a&gt;Hosts and Groups&lt;/h4&gt;&lt;p&gt;一个名为&lt;code&gt;hosts&lt;/code&gt;的inventory文件例子，包括Hosts和Groups:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mail.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[webservers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[dbservers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;one.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;two.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;three.example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;Host-Variables&quot;&gt;&lt;a href=&quot;#Host-Variables&quot; class=&quot;headerlink&quot; title=&quot;Host Variables&quot;&gt;&lt;/a&gt;Host Variables&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[atlanta]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host1 http_port=80 maxRequestsPerChild=808&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host2 http_port=303 maxRequestsPerChild=909&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Group-Variables&quot;&gt;&lt;a href=&quot;#Group-Variables&quot; class=&quot;headerlink&quot; title=&quot;Group Variables&quot;&gt;&lt;/a&gt;Group Variables&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[atlanta]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[atlanta:vars]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntp_server=ntp.atlanta.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proxy=proxy.atlanta.example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Groups-of-Groups-and-Group-Variables&quot;&gt;&lt;a href=&quot;#Groups-of-Groups-and-Group-Variables&quot; class=&quot;headerlink&quot; title=&quot;Groups of Groups, and Group Variables&quot;&gt;&lt;/a&gt;Groups of Groups, and Group Variables&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[atlanta]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[raleigh]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[southeast:children]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;atlanta&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;raleigh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[southeast:vars]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;some_server=foo.southeast.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;halon_system_timeout=30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self_destruct_countdown=60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;escape_pods=2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[usa:children]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;southeast&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;northeast&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;southwest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;northwest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，可以查阅一些可用的Inventory参数&lt;a href=&quot;http://docs.ansible.com/ansible/intro_inventory.html#list-of-behavioral-inventory-parameters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;List of Behavioral Inventory Parameters&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Modules&quot;&gt;&lt;a href=&quot;#Modules&quot; class=&quot;headerlink&quot; title=&quot;Modules&quot;&gt;&lt;/a&gt;Modules&lt;/h3&gt;&lt;p&gt;Module是Ansible中实际执行的命令，是具体任务的执行单元，可以理解为与系统中命令一一对应的模块. 如apt-get对应apt，wget对应get_url，分为Core Modules和Custom Modules。常用模块有：&lt;code&gt;ping&lt;/code&gt;, &lt;code&gt;setup&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;command&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt;, &lt;code&gt;apt&lt;/code&gt;以及&lt;code&gt;service&lt;/code&gt;等。&lt;/p&gt;
&lt;h4 id=&quot;ping&quot;&gt;&lt;a href=&quot;#ping&quot; class=&quot;headerlink&quot; title=&quot;ping&quot;&gt;&lt;/a&gt;ping&lt;/h4&gt;&lt;p&gt;测试主机是否连通，Ping Module是Ansible的一个核心Modules之一，经常用来测试服务是否能连通，以及验证配置是否正确。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible -i hosts all -m ping&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;setup&quot;&gt;&lt;a href=&quot;#setup&quot; class=&quot;headerlink&quot; title=&quot;setup&quot;&gt;&lt;/a&gt;setup&lt;/h4&gt;&lt;p&gt;Ansible有一些预定义的变量，定义了服务器的很多状态信息，可以使用setup动态获取，存储到本地的fact文件中供playbook调用。&lt;/p&gt;
&lt;h4 id=&quot;file&quot;&gt;&lt;a href=&quot;#file&quot; class=&quot;headerlink&quot; title=&quot;file&quot;&gt;&lt;/a&gt;file&lt;/h4&gt;&lt;p&gt;主要用于远程主机上的文件操作的Module。&lt;/p&gt;
&lt;h4 id=&quot;command&quot;&gt;&lt;a href=&quot;#command&quot; class=&quot;headerlink&quot; title=&quot;command&quot;&gt;&lt;/a&gt;command&lt;/h4&gt;&lt;p&gt;运行指定命令的Module。&lt;/p&gt;
&lt;h4 id=&quot;shell&quot;&gt;&lt;a href=&quot;#shell&quot; class=&quot;headerlink&quot; title=&quot;shell&quot;&gt;&lt;/a&gt;shell&lt;/h4&gt;&lt;p&gt;运行shell脚本，比如可直接在受控资源上执行的命令:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;shell: ps -ef | grep jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;apt&quot;&gt;&lt;a href=&quot;#apt&quot; class=&quot;headerlink&quot; title=&quot;apt&quot;&gt;&lt;/a&gt;apt&lt;/h4&gt;&lt;p&gt;用于安装软件的Module，即包管理器来管理软件包，对应于apt-get。&lt;/p&gt;
&lt;h4 id=&quot;service&quot;&gt;&lt;a href=&quot;#service&quot; class=&quot;headerlink&quot; title=&quot;service&quot;&gt;&lt;/a&gt;service&lt;/h4&gt;&lt;p&gt;用于管理服务的Module&lt;/p&gt;
&lt;h3 id=&quot;Ansible与YAML&quot;&gt;&lt;a href=&quot;#Ansible与YAML&quot; class=&quot;headerlink&quot; title=&quot;Ansible与YAML&quot;&gt;&lt;/a&gt;Ansible与YAML&lt;/h3&gt;&lt;p&gt;YAML是一种非常简单的数据描述语言，清晰易懂，利于阅读。YAML对缩进非常敏感，其中的基本数据类型有两种: Lists and Dictionaries。&lt;/p&gt;
&lt;p&gt;Ansible Playbooks使用YAML语言，对使用者相对友好。Ansible中使用YAML需要注意的是：在Ansible中使用&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;来引用变量时，必须加引号，如：&lt;code&gt;with_items: &amp;quot;&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;若有兴趣可阅读更多关于&lt;a href=&quot;http://docs.ansible.com/ansible/YAMLSyntax.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YAML Syntax&lt;/a&gt;的介绍。&lt;/p&gt;
&lt;h3 id=&quot;Playbooks-Roles-amp-Tasks&quot;&gt;&lt;a href=&quot;#Playbooks-Roles-amp-Tasks&quot; class=&quot;headerlink&quot; title=&quot;Playbooks, Roles &amp;amp; Tasks&quot;&gt;&lt;/a&gt;Playbooks, Roles &amp;amp; Tasks&lt;/h3&gt;&lt;p&gt;在Ansible中，最终被执行的自动化脚本叫做Playbooks，每个Playbook可能包含有多个Plays，每个Play可能包含有多个Tasks，每个Task是Ansible的最小执行单元，它都会利用相应的Module来执行对应的任务： &lt;code&gt;playbooks -&amp;gt; plays -&amp;gt; tasks -&amp;gt; modules -&amp;gt; variables&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果一个Playbook需要执行很多task，Playbook会变得非常庞大，而且其中的代码非常难以复用。通常Playbooks中会使用多个Roles来完成整个自动化任务，Role是Ansible代码复用的基本单位，它能够完整地实现一个独立任务。Role中会包含很多Tasks，每个Task是Ansible的最小执行单元。&lt;/p&gt;
&lt;h2 id=&quot;如何使用Ansible&quot;&gt;&lt;a href=&quot;#如何使用Ansible&quot; class=&quot;headerlink&quot; title=&quot;如何使用Ansible?&quot;&gt;&lt;/a&gt;如何使用Ansible?&lt;/h2&gt;&lt;p&gt;可以移步笔者的GitHub&lt;a href=&quot;https://github.com/waterstrong/ansible-workshop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Workshop Step by Step&lt;/a&gt;或另一篇博客&lt;a href=&quot;/ansible-practice&quot;&gt;Ansible实践篇&lt;/a&gt;来帮助一步步学习理解并使用Ansible，可以尝试一下，加深理解，主要包括以下几个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Waterstrong/ansible-workshop/blob/master/tutorials/STEP1.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Step 1. Set up the environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Waterstrong/ansible-workshop/blob/master/tutorials/STEP2.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Step 2. Inventory Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Waterstrong/ansible-workshop/blob/master/tutorials/STEP3.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Step 3. Playbooks, Roles and Tasks Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Waterstrong/ansible-workshop/blob/master/tutorials/STEP4.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Step 4. Install Apache2 Server Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Waterstrong/ansible-workshop/blob/master/tutorials/STEP5.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Step 5. Ansible Galaxy Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上内容就是对Ansible的基础介绍和入门部分，更多内容可参阅&lt;a href=&quot;https://www.ansible.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方网站&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.ansible.com/ansible/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/book/yaowenjie/ansible-workshop/details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Workshop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/richardzone/ansible-training-workshop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Training Workshop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Ansible是一个IT自动化工具（IT Automation Tool）。它能够很容易地实现管理配置、软件部署、编排任务(如持续部署)等自动化运维工作。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="DevOps" scheme="http://blog.waterstrong.me/tags/DevOps/"/>
    
      <category term="Ansible" scheme="http://blog.waterstrong.me/tags/Ansible/"/>
    
      <category term="脚本" scheme="http://blog.waterstrong.me/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="自动化" scheme="http://blog.waterstrong.me/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
</feed>
