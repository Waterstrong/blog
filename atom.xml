<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Waterstrong Blog</title>
  <subtitle>Enjoy this moment!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.waterstrong.me/"/>
  <updated>2017-03-26T13:39:40.000Z</updated>
  <id>http://blog.waterstrong.me/</id>
  
  <author>
    <name>Waterstrong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>再见多说，你好云跟帖</title>
    <link href="http://blog.waterstrong.me/duoshuo-away/"/>
    <id>http://blog.waterstrong.me/duoshuo-away/</id>
    <published>2017-03-24T10:58:54.000Z</published>
    <updated>2017-03-26T13:39:40.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;多说即将关闭&quot;&gt;&lt;a href=&quot;#多说即将关闭&quot; class=&quot;headerlink&quot; title=&quot;多说即将关闭&quot;&gt;&lt;/a&gt;多说即将关闭&lt;/h2&gt;&lt;div class=&quot;figure left fig-50&quot; style=&quot;width:;&quot;&gt;&lt;a class=&quot;fancybox&quot; href=&quot;/assets/duoshuo-away/duoshuo_post.png&quot; title=&quot;&quot; data-fancybox-group=&quot;&quot;&gt;&lt;img class=&quot;fig-img&quot; src=&quot;/assets/duoshuo-away/duoshuo_post.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;在多说网本月21号发布关闭多说项目前几天，当时一直在修改主题源码升级博客功能，就一直遇到多说评论框加载失败的情况，一开始以为自己修改的代码影响到了多说的加载，后来一查发现原来是多说系统近期不稳定导致的，本来有时多说加载是相对比较慢，有时会出现问题，但也不至于系统那么不稳定，定是发生了什么事情，果不其然，随后在3月21号，多说网发表声明称&lt;strong&gt;因公司业务调整将在2017年6月1日正式关停多说服务&lt;/strong&gt;，以下是通知的原文截图。&lt;br&gt;&lt;img src=&quot;/assets/duoshuo-away/duoshuo_notice.png&quot; alt=&quot;多说即将关闭通知&quot;&gt;&lt;/p&gt;
&lt;p&gt;随后，在各集成有多说的网站与博客的多说评论框上也醒目地显示了多说项目即将关闭的文字提示，相信大家也都看到了。&lt;br&gt;&lt;img src=&quot;/assets/duoshuo-away/duoshuo.png&quot; alt=&quot;多说即将关闭提示&quot;&gt;&lt;/p&gt;
&lt;p&gt;多说是一款让评论更活跃、互动性更强的评论系统，官网宣传的永久免费且容易安装，可以用微博、QQ、人人、豆瓣等帐号轻松评论和分享，能够智能识别垃圾评论、稳步提升网站流量。在国内，多说确实算得上是评论老大哥的地位，虽然自己之前也没有用过其他的国内评论系统，但多说使用起来还是挺不错的，而且在周围的朋友中，除了Disqus就是多说了，用户基数还是很乐观的，但正是由于其宣传的永久免费，就目前来说，没有很好的变现方法，可能是资金流遇到困难，或者已经并入到其他项目，也或许该项目只是对市场的试验，反正最后是要关闭了。作为使用评论系统的朋友，需要开始导出数据，寻找替代方案了。&lt;/p&gt;
&lt;h2 id=&quot;我的替代方案&quot;&gt;&lt;a href=&quot;#我的替代方案&quot; class=&quot;headerlink&quot; title=&quot;我的替代方案&quot;&gt;&lt;/a&gt;我的替代方案&lt;/h2&gt;&lt;p&gt;当时我的反应就是，该切换回&lt;a href=&quot;https://disqus.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Disqus&lt;/a&gt;了，因为就评论系统而言，Disqus各方面绝对是没话说，在国外很流行的，但就是这么一个评论系统被墙了，用户体验直线下降了，我也是对GFW没话说了，不想再吐槽了。&lt;br&gt;其实，刚开始搭博客时，也是用Disqus作为评论系统，但最后还是决定使用国内流行的多说，毕竟在国内嘛，还是要考虑那些没有梯子的朋友，另外，Disqus并不支持集成国内一些主流社会网络的登录方式，但如果它没有被墙的话，那毫不犹豫是首选的。&lt;br&gt;&lt;img src=&quot;/assets/duoshuo-away/disqus.png&quot; alt=&quot;Disqus评论框&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么问题来了，还有没有其他的国内替代方案呢？当时的想法就是，如果没有合适的国内替代方案就还是就用Disqus了，但在调查后发现了新出来的&lt;a href=&quot;https://gentie.163.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网易云跟帖&lt;/a&gt;，然后到官网看了一下，简单集成到自己的博客，看起来还不错的样子，虽然目前是在Beta版本，后台管理功能也不是太完善，那就先试用一段时间吧，如果国内的评论系统确实做不起来，那就再来换Disqus了。&lt;br&gt;&lt;img src=&quot;/assets/duoshuo-away/yungentie0.png&quot; alt=&quot;云跟帖评论框&quot;&gt;&lt;/p&gt;
&lt;p&gt;最重要的，需要在后台将导出的多说评论(包含文章数据、包含评论数据)再导入到云跟帖中，完成数据的迁移，不过数据很有可能会出现一些问题，比如作者昵称转换成默认值、评论文章ID丢失导致无法加载评论等，只能说云跟帖的数据迁移功能有待完善。&lt;/p&gt;
&lt;h2 id=&quot;附录：在Hexo中集成云跟帖&quot;&gt;&lt;a href=&quot;#附录：在Hexo中集成云跟帖&quot; class=&quot;headerlink&quot; title=&quot;附录：在Hexo中集成云跟帖&quot;&gt;&lt;/a&gt;附录：在Hexo中集成云跟帖&lt;/h2&gt;&lt;p&gt;由于每个主题代码结构稍有不同，文件位置可能是不同的，并不适用其他主题的，但源代码和思路是一致的，这里只是记录一下，仅供参考。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;/layout/_partial/post&lt;/code&gt;下新建一个文件命名为&lt;code&gt;yungentie.ejs&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;figcaption&gt;&lt;span&gt;yungentie.ejs&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;cloud-tie-wrapper&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;cloud-tie-wrapper&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;/layout/_partial&lt;/code&gt;下找到加载刚新建的&lt;code&gt;yungentie.ejs&lt;/code&gt;的&lt;code&gt;post.ejs&lt;/code&gt;文件，并在duoshuo记录后添加逻辑分支:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;% &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (theme.yungentie_app_key) &amp;#123; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;partial&lt;/span&gt;(&#39;&lt;span class=&quot;attr&quot;&gt;post&lt;/span&gt;/&lt;span class=&quot;attr&quot;&gt;yungentie&lt;/span&gt;&#39;) %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&lt;/span&gt; &amp;#125; %&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;/layout/_partial&lt;/code&gt;下找到有关于评论系统逻辑代码的&lt;code&gt;scripts.ejs&lt;/code&gt;文件，在duoshuo记录后新加逻辑分支:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;% &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (theme.yungentie_app_key) &amp;#123; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cloudTieConfig = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        url: &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.location.href,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sourceId: &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;%= post.path %&amp;gt;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        productKey: &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;%= theme.yungentie_app_key %&amp;gt;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        target: &lt;span class=&quot;string&quot;&gt;&#39;cloud-tie-wrapper&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;https://img1.cache.netease.com/f2e/tie/yun/sdk/loader.js&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;% &amp;#125; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;_config.yml&lt;/code&gt;文件中找到原来duoshuo的位置添加一条记录，同时要禁用其它评论系统，这里的&lt;code&gt;yungentie_app_key&lt;/code&gt;值是唯一需要变化的地方。&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Your Yungentie shortname&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;yungentie_app_key:&lt;/span&gt; &amp;lt;your_app_key&amp;gt; &lt;span class=&quot;comment&quot;&gt;# 可以在云跟帖后台管理的获取代码中查到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(可选)由于后台目前还不支持自定义的CSS样式，可以选择在&lt;code&gt;/source/_css/layouts/&lt;/code&gt;中新加一个文件命名为&lt;code&gt;_yungentie.scss&lt;/code&gt;，可以写自定义的样式，同时在入口SCSS文件处引入新建文件，即&lt;code&gt;@import &amp;#39;layouts/yungentie&amp;#39;&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/duoshuo-away/yungentie1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      多说网在3月21号发表声明称因公司业务调整将在2017年6月1日正式关停多说服务，作为使用评论系统的朋友，需要开始导出数据，除了选择Disqus，是否有国内评论系统替代方案呢？
    
    </summary>
    
      <category term="Platforms" scheme="http://blog.waterstrong.me/categories/Platforms/"/>
    
    
      <category term="Disqus" scheme="http://blog.waterstrong.me/tags/Disqus/"/>
    
      <category term="多说" scheme="http://blog.waterstrong.me/tags/%E5%A4%9A%E8%AF%B4/"/>
    
      <category term="评论" scheme="http://blog.waterstrong.me/tags/%E8%AF%84%E8%AE%BA/"/>
    
      <category term="云跟帖" scheme="http://blog.waterstrong.me/tags/%E4%BA%91%E8%B7%9F%E5%B8%96/"/>
    
  </entry>
  
  <entry>
    <title>JSX语法介绍与使用</title>
    <link href="http://blog.waterstrong.me/jsx-syntax/"/>
    <id>http://blog.waterstrong.me/jsx-syntax/</id>
    <published>2017-03-21T05:04:06.000Z</published>
    <updated>2017-03-26T06:28:41.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是JSX？&quot;&gt;&lt;a href=&quot;#什么是JSX？&quot; class=&quot;headerlink&quot; title=&quot;什么是JSX？&quot;&gt;&lt;/a&gt;什么是JSX？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;JSX is an embeddable XML-like syntax extension to JavaScript without any defined semantics.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;JSX&lt;/code&gt;是一种类&lt;code&gt;XML&lt;/code&gt;语言，是&lt;code&gt;JavaScript&lt;/code&gt;的语法扩展，全称是&lt;code&gt;JavaScript XML&lt;/code&gt;。&lt;code&gt;JSX&lt;/code&gt;并不是由引擎或浏览器来实现，也并不打算并入到&lt;code&gt;ECMAScript&lt;/code&gt;标准规范中，它旨在被各种预处理器转换成标准的&lt;code&gt;ECMAScript&lt;/code&gt;语法。正如前面所说，&lt;code&gt;JSX&lt;/code&gt;就像&lt;code&gt;XML&lt;/code&gt;一样，它定义有自己的标签名、属性、子元素，需要注意的是，如果属性的值在&lt;em&gt;大括号&lt;/em&gt;内，会当作&lt;code&gt;JavaScript&lt;/code&gt;表达式处理，如果在&lt;em&gt;引号&lt;/em&gt;内，则会当作字符串类型(String)处理。&lt;br&gt;首先，看一个简单的示例，使用&lt;code&gt;JSX&lt;/code&gt;来表示一个UI下拉选项框组件：&lt;br&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dropdown =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Dropdown&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    A dropdown list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Menu&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;MenuItem&lt;/span&gt;&amp;gt;&lt;/span&gt;Do Something&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;MenuItem&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;MenuItem&lt;/span&gt;&amp;gt;&lt;/span&gt;Do Something Fun!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;MenuItem&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;MenuItem&lt;/span&gt;&amp;gt;&lt;/span&gt;Do Something Else&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;MenuItem&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Menu&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Dropdown&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;render(dropdown);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么要学习JSX？&quot;&gt;&lt;a href=&quot;#为什么要学习JSX？&quot; class=&quot;headerlink&quot; title=&quot;为什么要学习JSX？&quot;&gt;&lt;/a&gt;为什么要学习JSX？&lt;/h2&gt;&lt;p&gt;由于最近在学习 &lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt;，而官方是推荐使用&lt;code&gt;JSX&lt;/code&gt;来编写其组件，从技术角度来说，&lt;code&gt;React&lt;/code&gt;可以不使用&lt;code&gt;JSX&lt;/code&gt;来编写组件，但是使用&lt;code&gt;JSX&lt;/code&gt;可以让代码可读性更高、语义更清晰、对&lt;code&gt;React&lt;/code&gt;元素进行抽象。基于此，结合对&lt;code&gt;React&lt;/code&gt;的学习需求，还是很有必要先学习并掌握&lt;code&gt;JSX&lt;/code&gt;的使用，并且学习成本也相对较低，只要了解其语法规则就可以使用了。&lt;/p&gt;
&lt;h2 id=&quot;JSX的语法规范&quot;&gt;&lt;a href=&quot;#JSX的语法规范&quot; class=&quot;headerlink&quot; title=&quot;JSX的语法规范&quot;&gt;&lt;/a&gt;JSX的语法规范&lt;/h2&gt;&lt;h4 id=&quot;JSX标签&quot;&gt;&lt;a href=&quot;#JSX标签&quot; class=&quot;headerlink&quot; title=&quot;JSX标签&quot;&gt;&lt;/a&gt;JSX标签&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自闭合标签&lt;br&gt;如果标签没有子元素，可以使用自闭合标签：&lt;em&gt;&amp;lt; JSXElementName JSXAttributes&lt;sub&gt;opt&lt;/sub&gt; / &amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;sidebar&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;MyCounter&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;count&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;3 + 5&amp;#125;&#39;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Scoreboard&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;results&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;scores&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;gameScores&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开/闭标签&lt;br&gt;也可以写成开/闭标签的形式：&lt;em&gt;&amp;lt; JSXElementName JSXAttributes&lt;sub&gt;opt&lt;/sub&gt; &amp;gt; &amp;lt;/ JSXElementName &amp;gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element1 = &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element2 = &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;user.avatarUrl&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element3 = &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;tabIndex&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;user.title&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  如果属性的值在&lt;em&gt;引号&lt;/em&gt;内，会当作字符串类型(String)处理，如果属性值是在&lt;em&gt;大括号&lt;/em&gt;内，则会当作&lt;code&gt;JavaScript&lt;/code&gt;表达式处理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;JSX元素名&quot;&gt;&lt;a href=&quot;#JSX元素名&quot; class=&quot;headerlink&quot; title=&quot;JSX元素名&quot;&gt;&lt;/a&gt;JSX元素名&lt;/h4&gt;&lt;p&gt;&lt;code&gt;JSX&lt;/code&gt;的元素名可是一个标识符、命名空间和成员表达式：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// JSXIdentifier&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;FormInput&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;FormInput&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//JSXIdentifier.JSXIdentifier&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;MyComponents.DatePicker&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;JSX属性&quot;&gt;&lt;a href=&quot;#JSX属性&quot; class=&quot;headerlink&quot; title=&quot;JSX属性&quot;&gt;&lt;/a&gt;JSX属性&lt;/h4&gt;&lt;p&gt;&lt;code&gt;JSX&lt;/code&gt;属性有一般属性、展开属性：&lt;em&gt;JSXAttribute JSXAttributes&lt;sub&gt;opt&lt;/sub&gt;&lt;/em&gt; 、&lt;em&gt;{ … AssignmentExpression }&lt;/em&gt; 。&lt;br&gt;属性的值可以用双引号(&lt;code&gt;&amp;quot;string&amp;quot;&lt;/code&gt;)、单引号(&lt;code&gt;&amp;#39;string&amp;#39;&lt;/code&gt;)和大括号(&lt;code&gt;{expression}&lt;/code&gt;)，需要注意的是，如果属性值使用了单/双引号，该字符串值内部就不能再出现相对应的引号了。&lt;/p&gt;
&lt;h4 id=&quot;JSX子元素&quot;&gt;&lt;a href=&quot;#JSX子元素&quot; class=&quot;headerlink&quot; title=&quot;JSX子元素&quot;&gt;&lt;/a&gt;JSX子元素&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;String字面值(String Literals)&lt;br&gt;可以直接写字符串类型或HTML格式：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;MyComponent&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;MyComponent&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;This is valid HTML &amp;amp;amp; JSX at the same time.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JSX子组件&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;MyContainer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;MyFirstComponent&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;MySecondComponent&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;MyContainer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript表达式&lt;br&gt;比如稍微复杂一点的表达式，包括一些取值、方法调用和类型转换的场景：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;todos.map((message) =&amp;gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;message&amp;#125;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;message&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;message&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Repeat&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;numTimes&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;10&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;(index) =&amp;gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;index&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;This is item &amp;#123;index&amp;#125; in the list&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Repeat&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Hello &amp;#123;props.addressee&amp;#125;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    My JavaScript variable is &amp;#123;String(myVariable)&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;在React中使用JSX&quot;&gt;&lt;a href=&quot;#在React中使用JSX&quot; class=&quot;headerlink&quot; title=&quot;在React中使用JSX&quot;&gt;&lt;/a&gt;在React中使用JSX&lt;/h2&gt;&lt;h4 id=&quot;JSX命名规则&quot;&gt;&lt;a href=&quot;#JSX命名规则&quot; class=&quot;headerlink&quot; title=&quot;JSX命名规则&quot;&gt;&lt;/a&gt;JSX命名规则&lt;/h4&gt;&lt;p&gt;在使用&lt;code&gt;JSX&lt;/code&gt;编写&lt;code&gt;React&lt;/code&gt;时，针对&lt;code&gt;HTML&lt;/code&gt;标签，保留原来的关键字和命名规则，即全部字母小写，而对于自定义的组件(Component)，需要遵循首字母大写的约定。由于&lt;code&gt;JSX&lt;/code&gt;相对于&lt;code&gt;HTML&lt;/code&gt;更接近于&lt;code&gt;JavaScript&lt;/code&gt;，对于所有的&lt;strong&gt;DOM属性及事件处理器&lt;/strong&gt;，都应该使用camelCased(骆峰命名)与标准的&lt;code&gt;JavaScript&lt;/code&gt;风格保持一致，如：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// HTML tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; props.onClick()&amp;#125;&amp;gt;Click &amp;#123;props.toWhat&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// React Component&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;toWhat&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Me&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为&lt;code&gt;class&lt;/code&gt;和&lt;code&gt;for&lt;/code&gt;是&lt;code&gt;JavaScript&lt;/code&gt;的保留字，内建 &lt;a href=&quot;http://javascript.info/dom-nodes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DOM nodes&lt;/a&gt; 的&lt;code&gt;JSX&lt;/code&gt;元素应该分别使用属性名&lt;code&gt;className&lt;/code&gt;和&lt;code&gt;htmlFor&lt;/code&gt;，另外，如&lt;code&gt;tabindex&lt;/code&gt;也应写成&lt;code&gt;tabIndex&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而自定义的&lt;code&gt;JSX&lt;/code&gt;元素可以直接使用&lt;code&gt;class&lt;/code&gt;和&lt;code&gt;for&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;my-tag&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;JSX命名空间组件&quot;&gt;&lt;a href=&quot;#JSX命名空间组件&quot; class=&quot;headerlink&quot; title=&quot;JSX命名空间组件&quot;&gt;&lt;/a&gt;JSX命名空间组件&lt;/h4&gt;&lt;p&gt;如果你正在构建一个有很多子组件的组件，比如表单，你也许会最终得到许多的变量声明，比如以下不太友好的代码块。&lt;br&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Form = MyFormComponent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; FormRow = Form.Row;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; FormLabel = Form.Label;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; FormInput = Form.Input;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; App = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;Form&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;FormRow&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;FormLabel /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;FormInput /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/FormRow&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/Form&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了使其更简单和容易，命名空间组件令你使用包含其他组件作为属性的单一的组件，通过使用点符号&lt;code&gt;.&lt;/code&gt;很方便地在一个组件上表示多个成员组件，使得在语法结构上更加清晰。&lt;br&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Form = MyFormComponent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; App = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;Form&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Form.Row&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;Form.Label /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;Form.Input /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/Form.Row&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/Form&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;JavaScript表达式&quot;&gt;&lt;a href=&quot;#JavaScript表达式&quot; class=&quot;headerlink&quot; title=&quot;JavaScript表达式&quot;&gt;&lt;/a&gt;JavaScript表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;属性表达式&lt;br&gt;对于属性表达式，之前已经在语法规范中提到过了，要使用&lt;code&gt;JavaScript&lt;/code&gt;表达式作为属性值，只需把这个表达式用一对大括号(&lt;code&gt;{}&lt;/code&gt;)包起来即可。&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;window.isLoggedIn&lt;/span&gt; ? &lt;span class=&quot;attr&quot;&gt;window.name&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:&lt;/span&gt; &#39;&#39;&amp;#125; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Boolean属性&lt;br&gt;对于Boolean属性，省略一个属性的值会导致&lt;code&gt;JSX&lt;/code&gt;把它当做&lt;code&gt;true&lt;/code&gt;，要传值&lt;code&gt;false&lt;/code&gt;必须使用属性表达式，通常会出现于使用&lt;code&gt;HTML&lt;/code&gt;表单元素，含有属性如&lt;code&gt;disabled&lt;/code&gt;, &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;checked&lt;/code&gt;和&lt;code&gt;readOnly&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 在JSX中，对于禁用按钮这二者是相同的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;disabled&lt;/span&gt; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;disabled&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;true&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 在JSX中，对于不禁用按钮这二者是相同的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;disabled&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;false&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子节点表达式&lt;br&gt;对于子节点表达式，同样可以在大括号内表示，比如&lt;code&gt;&amp;lt;Nav /&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;Login /&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; content = &amp;lt;Container&amp;gt;&amp;#123;window.isLoggedIn ? &amp;lt;Nav /&amp;gt; : &amp;lt;Login /&amp;gt;&amp;#125;&amp;lt;/Container&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何添加注释&lt;br&gt;&lt;code&gt;JSX&lt;/code&gt;里添加注释很容易，它们只是&lt;code&gt;JavaScript&lt;/code&gt;表达式而已，但需要小心的是，当在一个标签的子节点块时，要用&lt;code&gt;{}&lt;/code&gt;包围要注释的部分。&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; content = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;/* child comment, 用 &amp;#123;&amp;#125; 包围 */&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      /* 多&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         注释 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;window.isLoggedIn&lt;/span&gt; ? &lt;span class=&quot;attr&quot;&gt;window.name&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:&lt;/span&gt; &#39;&#39;&amp;#125; // 行尾注释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;JSX-DOM陷阱&quot;&gt;&lt;a href=&quot;#JSX-DOM陷阱&quot; class=&quot;headerlink&quot; title=&quot;JSX DOM陷阱&quot;&gt;&lt;/a&gt;JSX DOM陷阱&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自定义HTML属性&lt;br&gt;&lt;code&gt;React&lt;/code&gt;不显示&lt;code&gt;HTML&lt;/code&gt;规范里不存在的元素属性，若需要使用自定义属性，要加&lt;code&gt;data-&lt;/code&gt;前缀。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-custom-attribute&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  而在自定义元素中&lt;strong&gt;任意&lt;/strong&gt;的属性都是被支持的（在标签名里带有连接符或&lt;code&gt;is=&amp;quot;...&amp;quot;&lt;/code&gt;属性的）。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;x-my-component&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;custom-attribute&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  以&lt;code&gt;aria-&lt;/code&gt;开头的&lt;a href=&quot;https://www.w3.org/WAI/intro/aria&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网络无障碍&lt;/a&gt;属性可以正常使用。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;aria-hidden&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;true&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTML实体&lt;br&gt;&lt;code&gt;HTML&lt;/code&gt;实体可以插入到&lt;code&gt;JSX&lt;/code&gt;的文本中，如果想在&lt;code&gt;JSX&lt;/code&gt;表达式中显示&lt;code&gt;HTML&lt;/code&gt;实体，会遇到二次转义的问题，因为&lt;code&gt;React&lt;/code&gt;默认会转义所有字符串，为了防止各种 &lt;acronym title=&quot;Cross Site Scripting&quot;&gt;XSS&lt;/acronym&gt; 攻击。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 正确，可以正常解析HTML&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;First &amp;amp;middot; Second&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 错误，不能解析，会直接显示“First &amp;amp;middot; Second”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&#39;First &amp;amp;middot; Second&#39;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  但可以通过使用&lt;a href=&quot;http://www.fileformat.info/info/unicode/char/b7/index.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unicode&lt;/a&gt;字符解决，但需要确保文件是UTF-8编码，且网页也指定为UTF-8编码。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&#39;First \u00b7 Second&#39;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&#39;First &#39; + String.fromCharCode(183) + &#39; Second&#39;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  可以在数组里混合使用字符串和&lt;code&gt;JSX&lt;/code&gt;元素。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;[&#39;First &#39;, &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;amp;middot;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;, &#39; Second&#39;]&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;JSX运行与安全&quot;&gt;&lt;a href=&quot;#JSX运行与安全&quot; class=&quot;headerlink&quot; title=&quot;JSX运行与安全&quot;&gt;&lt;/a&gt;JSX运行与安全&lt;/h4&gt;&lt;p&gt;&lt;code&gt;JSX&lt;/code&gt;在运行时被加载元素类型，因此，元素类型不能是表达式，以下是错误的示例：&lt;br&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 错误，不能是表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;components[props.storyType]&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;story&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;props.story&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但可以定义变量，但首字母须大写，如下格式是正确的示例：&lt;br&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; SpecificStory = components[props.storyType];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;SpecificStory&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;story&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;props.story&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JSX&lt;/code&gt;可以防止注入攻击，在&lt;code&gt;React DOM&lt;/code&gt;中，默认在渲染前会转义在&lt;code&gt;JSX&lt;/code&gt;中的所有值，因此，可以保证不会被注入攻击，所有的内容都已经被转换为字符串进行渲染，同进也会防止跨站脚本攻击(&lt;acronym title=&quot;Cross Site Scripting&quot;&gt;XSS&lt;/acronym&gt;)。&lt;br&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在JSX内嵌了用户输入，更加安全&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; title = response.potentiallyMaliciousInput;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;title&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;主要对&lt;code&gt;JSX&lt;/code&gt;的基本概念、语法规范、在&lt;code&gt;React&lt;/code&gt;中使用等方面进行了介绍并举例，在&lt;code&gt;React&lt;/code&gt;中用法主要包括&lt;code&gt;JSX&lt;/code&gt;命名规则、命名空间组件、&lt;code&gt;JavaScript&lt;/code&gt;表达式、DOM陷阱以及运行与安全方面的介绍和示例。&lt;br&gt;通常，建议在你的编辑器中配置&lt;code&gt;Babel&lt;/code&gt;语法体系，从而使得&lt;code&gt;ES6&lt;/code&gt;和&lt;code&gt;JSX&lt;/code&gt;代码都可以高亮显示。另外，可以到在线的 &lt;a href=&quot;http://jsbin.com/qucecahako/1/edit?html,css,js,output&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JS BIN&lt;/a&gt; 或 &lt;a href=&quot;https://babeljs.io/repl/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel REPL&lt;/a&gt; 进行简单练习。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/jsx/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Draft: JSX Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://buildwithreact.com/tutorial/jsx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial: JSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSX In Depth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chenyitian.gitbooks.io/react-docs/content/docs/02.1-jsx-in-depth.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入 JSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chenyitian.gitbooks.io/react-docs/content/docs/ref-06-dom-differences.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DOM 的不同之处&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chenyitian.gitbooks.io/react-docs/content/docs/02.3-jsx-gotchas.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSX 陷阱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/introducing-jsx.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing JSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/jsx.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSX Introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      JSX是一种类XML语言，是JavaScript的语法扩展，全称是JavaScript XML。React可以不使用JSX来编写组件，但是使用JSX可以让代码可读性更高、语义更清晰、对React元素进行抽象。
    
    </summary>
    
      <category term="Languages" scheme="http://blog.waterstrong.me/categories/Languages/"/>
    
    
      <category term="JSX" scheme="http://blog.waterstrong.me/tags/JSX/"/>
    
      <category term="JavaScript" scheme="http://blog.waterstrong.me/tags/JavaScript/"/>
    
      <category term="React" scheme="http://blog.waterstrong.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>如何创建Git服务器仓库</title>
    <link href="http://blog.waterstrong.me/git-server-repository/"/>
    <id>http://blog.waterstrong.me/git-server-repository/</id>
    <published>2017-02-15T14:35:49.000Z</published>
    <updated>2017-03-26T05:59:21.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;在使用Git时，通常会选择使用一个项目代码托管平台，这样的平台可以有很多选择，比如目前最流行的面向开源及私有软件项目的托管平台是&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;，还有一些其他优秀的平台，如Atlassian的&lt;a href=&quot;https://bitbucket.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bitbucket&lt;/a&gt;、&lt;a href=&quot;https://gitlab.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitLab&lt;/a&gt;、&lt;a href=&quot;https://coding.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coding.NET&lt;/a&gt;、开源中国的&lt;a href=&quot;http://git.oschina.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;码云&lt;/a&gt;、&lt;a href=&quot;https://code.csdn.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSDN.NET&lt;/a&gt;等，不仅可以使用Public和Private服务，还可以付费搭建定制服务，不过有些跑题了，本文中只关注使用简单的命令快速搭建共享服务器仓库。另外，关于Git的使用，可以参阅 &lt;a href=&quot;http://blog.waterstrong.me/master-git/&quot;&gt;优雅地使用Git&lt;/a&gt; 了解更多内容，这里也不会再涉及Git命令细节。&lt;/p&gt;
&lt;h2 id=&quot;创建服务器仓库&quot;&gt;&lt;a href=&quot;#创建服务器仓库&quot; class=&quot;headerlink&quot; title=&quot;创建服务器仓库&quot;&gt;&lt;/a&gt;创建服务器仓库&lt;/h2&gt;&lt;p&gt;先创建一个文件夹名为&lt;code&gt;demo.git&lt;/code&gt;，在其中使用命令创建裸仓库(作为服务器仓库)：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init --bare&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &amp;gt; ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# HEAD  branches  config  description  hooks  info  objects  refs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &amp;gt; tree -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── HEAD 	# 指向当前所处的分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── branches	# 包含的Git分支信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── config	# Git仓库的配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── description	# Git仓库的描述信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── hooks	# 一些shell钩子脚本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── applypatch-msg.sample&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── commit-msg.sample&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── post-update.sample&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── pre-applypatch.sample&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── pre-commit.sample&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── pre-push.sample&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── pre-rebase.sample&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── prepare-commit-msg.sample&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── update.sample&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── info	# 包含仓库的一些信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── exclude&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── objects	# Git仓库的所有对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── pack&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── refs 	# 标识分支指向的提交&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── heads&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── tags&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;与使用&lt;code&gt;git init&lt;/code&gt;命令创建的目录不太一样，其中并没有&lt;code&gt;.git&lt;/code&gt;目录，而是直接在工程目录下列出了其他的目录，并且可以查看到&lt;code&gt;config&lt;/code&gt;中的内容&lt;code&gt;bare=true&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[core]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	repositoryformatversion = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	filemode = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bare = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ignorecase = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	precomposeunicode = true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果期望将普通的Git仓库转换为服务器仓库，可以使用如下命令进行转换，克隆出&lt;code&gt;.git&lt;/code&gt;内容作为服务器仓库：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone --bare xxx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中，bare仓库不包含工作区，目录中不包括项目源代码，不能直接在bare仓库上直接提交变更。&lt;/p&gt;
&lt;h2 id=&quot;连接服务器仓库&quot;&gt;&lt;a href=&quot;#连接服务器仓库&quot; class=&quot;headerlink&quot; title=&quot;连接服务器仓库&quot;&gt;&lt;/a&gt;连接服务器仓库&lt;/h2&gt;&lt;p&gt;假设在本地文件系统中创建，目录位置为&lt;code&gt;~/Documents/git-server/demo.git&lt;/code&gt;，则可以使用以下命令克隆或关联服务器仓库：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone ~/Documents/git-server/demo.git  # 直接clone代码，本地可不用加user@localhost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin ~/Documents/git-server/demo.git  # 或是添加为远程origin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果是使用AWS的EC2这样的服务，若文件目录位置为&lt;code&gt;/home/ec2-user/projects/git-repo.git&lt;/code&gt;，服务器地址为&lt;code&gt;aws.waterstrong.me&lt;/code&gt;，用户名为&lt;code&gt;ec2-user&lt;/code&gt;，则同样可以克隆或关联远程仓库：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone ec2-user@aws.waterstrong.me:/home/ec2-user/projects/git-repo.git  # 直接clone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin ec2-user@aws.waterstrong.me:/home/ec2-user/projects/git-repo.git  # 或添加origin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在创建bare仓库时，可以在给文件目录命名时加上&lt;code&gt;.git&lt;/code&gt;后缀，也符合平常使用Git地址的习惯，这样，就可以像平常一样使用Git操作了。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;平时在使用&lt;code&gt;git init&lt;/code&gt;命令时，是初始化一个普通的Git本地仓库，而为了创建服务器仓库，可以使用&lt;code&gt;git init --bare &amp;lt;repo&amp;gt;&lt;/code&gt;命令，bare仓库没有工作区，不能对其直接提交变更，但可以被正常地clone, push, pull等操作。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/docs/git-init&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.saintsjd.com/2011/01/what-is-a-bare-git-repository/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is a bare git repository?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://about.gitlab.com/downloads/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitLab CE Package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      在使用Git时，通常会选择使用一个项目代码托管平台，这样的平台可以有很多选择，如GitHub、Bitbucket、GitLab、Coding.NET、OSChina.NET、CSDN.NET等，不过，本文中只关注使用简单的Git命令快速搭建共享服务器仓库。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="Git" scheme="http://blog.waterstrong.me/tags/Git/"/>
    
      <category term="VCS" scheme="http://blog.waterstrong.me/tags/VCS/"/>
    
      <category term="Repository" scheme="http://blog.waterstrong.me/tags/Repository/"/>
    
  </entry>
  
  <entry>
    <title>如何从SVN迁移源码到Git仓库</title>
    <link href="http://blog.waterstrong.me/svn-to-git-migration/"/>
    <id>http://blog.waterstrong.me/svn-to-git-migration/</id>
    <published>2017-02-10T14:51:30.000Z</published>
    <updated>2017-03-23T14:15:13.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;这里就不再赘述关于SVN与Git的区别以及为什么要迁移源码到Git了，毕竟Git是当前的主流DVCS了，而且已经公认地非常好用，如果你还在使用SVN的话该考虑换了，是时候迁移那些遗留代码了，有兴趣可以参阅 &lt;a href=&quot;https://www.atlassian.com/git/tutorials/why-git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why Git&lt;/a&gt; 和 &lt;a href=&quot;https://www.atlassian.com/git/tutorials/perforce-git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Perforce to Git&lt;/a&gt; 了解更多。通常来说，在项目开发过程中，难免会遇到一些老项目代码正被SVN管理着，但基于当下诸多原因，或是扩展开发，或是战略转移，或是为了更好地开发体验，需要将这些在维护的遗留项目源码迁移为Git管理。那如何有效地迁移源码？并且如何保留提交记录、分支记录以及开发成员等信息呢？笔者前一段时间就经历了这样的迁移工作，还是有必要分享一下，也算是一种总结了。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;迁移SVN源码到Git仓库的方法肯定不是暴力地将代码Copy再Paste到Git仓库，也不是直接在项目下git init初始化仓库的，而是应该使用&lt;a href=&quot;https://git-scm.com/docs/git-svn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git svn&lt;/a&gt;命令操作实现迁移工作。那git-svn命令如何使用？有哪些注意事项呢？&lt;/p&gt;
&lt;p&gt;首先，在正式开始迁移项目之前，需要做一些准备工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准备一台安装有最新Git环境的磁盘容量足的电脑&lt;/li&gt;
&lt;li&gt;已经获知Git仓库的远程地址，无论是自己创建还是团队提供&lt;/li&gt;
&lt;li&gt;确保对Git远程仓库有读写权限，无论通过用户名密码还是SSH访问都行&lt;/li&gt;
&lt;li&gt;准备一份开发者的SVN用户名到Git全名+邮件的映射关系列表文件authors.txt，格式为：&lt;code&gt;loginname = Username &amp;lt;user@example.com&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于SVN对每次提交只记录开发者的用户名，而Git存储其全名和邮件地址，这意味着需要对开发者信息进行映射转换，在准备&lt;code&gt;authors.txt&lt;/code&gt;文件时，可以到团队系统数据库直接查询开发者&lt;em&gt;登录名、用户名和邮件地址&lt;/em&gt;并拼接成指定的格式，或者可下载&lt;em&gt;Atlassian&lt;/em&gt;的工具包&lt;a href=&quot;https://bitbucket.org/atlassian/svn-migration-scripts/downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;svn-migration-scripts.jar&lt;/a&gt;，通过命令拉取SVN仓库的用户并生成对应的开发者信息映射文件，需要Java运行时环境支持：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java -jar svn-migration-scripts.jar authors https://svn.example.com &amp;gt; authors.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;转换仓库&quot;&gt;&lt;a href=&quot;#转换仓库&quot; class=&quot;headerlink&quot; title=&quot;转换仓库&quot;&gt;&lt;/a&gt;转换仓库&lt;/h2&gt;&lt;p&gt;准备工作完成后可以开始实施转移仓库了，应该注意的是，在转移SVN项目时需要根据是否是标准的SVN文件布局来确定命令行的参数。（注：以下所有示意图均来自Atlassian）&lt;/p&gt;
&lt;h4 id=&quot;标准的SVN文件布局&quot;&gt;&lt;a href=&quot;#标准的SVN文件布局&quot; class=&quot;headerlink&quot; title=&quot;标准的SVN文件布局&quot;&gt;&lt;/a&gt;标准的SVN文件布局&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/assets/master-git/standard_svn_repo.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;如果SVN仓库使用标准的了&lt;code&gt;/trunk&lt;/code&gt;, &lt;code&gt;/branches&lt;/code&gt;和&lt;code&gt;/tags&lt;/code&gt;的目录结构，就可在运行命令时加上参数&lt;code&gt;--stdlayout&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git svn clone --stdlayout --authors-file=authors.txt &amp;lt;svn-repo&amp;gt;/&amp;lt;project&amp;gt; &amp;lt;git-repo-name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git svn clone --stdlayout --authors-file=authors.txt https://svn.waterstrong.com/demo demo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;非标准的的SVN文件布局&quot;&gt;&lt;a href=&quot;#非标准的的SVN文件布局&quot; class=&quot;headerlink&quot; title=&quot;非标准的的SVN文件布局&quot;&gt;&lt;/a&gt;非标准的的SVN文件布局&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/assets/master-git/nonstandard_svn_repo.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;如果SVN仓库是非标准的目录布局，那就需要分别显示指定参数&lt;code&gt;--trunk, --branches, --tags&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git svn clone --trunk=/trunk --branches=/branches --branches=/bugfixes --tags=/tags --authors-file=authors.txt &amp;lt;svn-repo&amp;gt;/&amp;lt;project&amp;gt; &amp;lt;git-repo-name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Authors文件的使用&quot;&gt;&lt;a href=&quot;#Authors文件的使用&quot; class=&quot;headerlink&quot; title=&quot;Authors文件的使用&quot;&gt;&lt;/a&gt;Authors文件的使用&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--authors-file&lt;/code&gt;：在之前的命令中已经提到需要添加参数&lt;code&gt;--authors-file=&amp;lt;filename&amp;gt;&lt;/code&gt;读取开发者信息映射文件，文件内容格式为&lt;code&gt;loginname = Username &amp;lt;user@example.com&amp;gt;&lt;/code&gt;，但如果在文件中不存SVN某个用户名的对应关系，那么git svn操作会被自动中止，因此，必须在&lt;code&gt;authors.txt&lt;/code&gt;文件中添加丢失的用户对应关系，然后重新运行git svn命令即可。配置其git config时的key为&lt;code&gt;svn.authorsfile&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--authors-prog&lt;/code&gt;：但如果希望在使用authors.txt文件时，即使某个SVN用户名对应关系不存在，命令也可以执行成功并自动使用默认值，可以使用该参数&lt;code&gt;--authors-prog=&amp;lt;filename&amp;gt;&lt;/code&gt;。配置其git config时的key为&lt;code&gt;svn.authorsProg&lt;/code&gt;，另外，可以在&lt;a href=&quot;https://www.atlassian.com/git/tutorials/migrating-synchronize&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorials - Synchronize&lt;/a&gt;中找到关于authors文件的更多使用信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;大仓库的转换策略&quot;&gt;&lt;a href=&quot;#大仓库的转换策略&quot; class=&quot;headerlink&quot; title=&quot;大仓库的转换策略&quot;&gt;&lt;/a&gt;大仓库的转换策略&lt;/h4&gt;&lt;p&gt;特别注意的是，当SVN仓库非常非常大时，据官方统计数据，若转换拥有33000个提交的400MB大小的仓库需要花12个小时来完成转换。因此，在这种情况下，可以选择找一台机器，运行命令后就不管了直到完成转换为止，或者是选择放弃保存非常老的提交历史记录，这样可以加速转换过程，如果转换时只保留部分提交历史的话可以使用以下命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git svn clone -r$&amp;#123;REVNUMBER&amp;#125;:HEAD --stdlayout --authors-file=authors.txt &amp;lt;svn-repo&amp;gt;/&amp;lt;project&amp;gt; &amp;lt;git-repo-name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git svn clone -r19698:HEAD --stdlayout --authors-file=authors.txt https://svn.waterstrong.com/demo demo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;清理仓库&quot;&gt;&lt;a href=&quot;#清理仓库&quot; class=&quot;headerlink&quot; title=&quot;清理仓库&quot;&gt;&lt;/a&gt;清理仓库&lt;/h2&gt;&lt;p&gt;至此，SVN到Git的转换工作接近尾声，如果只是关注 &lt;strong&gt;trunk&lt;/strong&gt; 和 &lt;strong&gt;master&lt;/strong&gt; 主分支，那么可以不用在意清理仓库这一部分的内容了，可以直接跳过进入下一节，如果需要清理并将分支和标签进行本地化，则可以关注一下本节内容。&lt;/p&gt;
&lt;p&gt;对于SVN的分支和标签，转换操作是不会将其导入到新的Git仓库中，而且在Git分支中也找不到SVN的分支branch，也找不到对应的标签tag，不过可以使用命令&lt;code&gt;git branch -r&lt;/code&gt;可以查看到所有SVN的分支和标签，这是因为在使用&lt;code&gt;git svn clone&lt;/code&gt;命令时会将SVN的分支和标签导入为Git的远程分支和标签，如下示意图所示。&lt;br&gt;&lt;img src=&quot;/assets/master-git/repo_structure.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;该策略主要是为SVN与Git双向同步服务的，但通常SVN单向转换到Git后都会直接使用Git了，并且会禁止SVN提交了，所以还是会对分支和标签内容进行清理以转换为Git的分支和标签。可以使用Atlassian提供的脚本工具快速实现对仓库分支和标签的清理工作：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java -Dfile.encoding=utf-8 -jar svn-migration-scripts.jar clean-git --force&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将SVN分支和标签转换Git的本地分支和标签后结构如下图所示：&lt;br&gt;&lt;img src=&quot;/assets/master-git/local_git_repo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;收尾工作&quot;&gt;&lt;a href=&quot;#收尾工作&quot; class=&quot;headerlink&quot; title=&quot;收尾工作&quot;&gt;&lt;/a&gt;收尾工作&lt;/h2&gt;&lt;p&gt;完成以上步骤后，迁移工作基本完成，接下来需要根据项目代码性质、团队约定等情况做一些收尾工作，需要具体情况具体分析。这里会以一个Gradle构建的Java项目(IDE使用IntelliJ)为例介绍从SVN迁移到Git后的收尾工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看Git远程地址是否已经配置了，如果还没有配置，可以使用命令&lt;code&gt;git remote&lt;/code&gt;命令配置&lt;code&gt;origin&lt;/code&gt;，比较常用的两组命令为：&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin xxx  # 添加新的远程地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote set-url origin xxx  # 修改origin的远程地址&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用命令&lt;code&gt;git update-index&lt;/code&gt;配置构建工具的执行权限，如果有其他执行脚本也需要配置相应权限信息：&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git update-index --chmod=+x gradlew&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git update-index --chmod=+x gradlew.bat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git update-index --chmod=+x xxx.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加&lt;code&gt;.gitignore&lt;/code&gt;文件，根据不同的项目写入要忽略的文件，如Java项目ignore文件会包括：&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/out&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/.idea&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.DS_Store&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*.iml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*.ipr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*.iws&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新IDE的vcs配置为Git而非Svn，在&lt;code&gt;build.gradle&lt;/code&gt;文件修改vcs配置：&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;idea.project.vcs = &amp;quot;Git&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后上传到Repo，并根据团队内部的约定设置相应的权限，通常会有一个检查清单，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置分支模型&lt;/li&gt;
&lt;li&gt;添加分支权限&lt;/li&gt;
&lt;li&gt;限定PR合并权限&lt;/li&gt;
&lt;li&gt;配置SVN提交通知&lt;/li&gt;
&lt;li&gt;变更CI拉取代码地址&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h2&gt;&lt;p&gt;总得来说，从SVN迁移源码到Git仓库包括：准备工作、转换仓库、清理仓库以及收尾工作，其中清理仓库部分可以跳过，其他部分是需要完成的，还必须注意SVN文件布局以及正确地使用authors文件，同时，要考虑在遇到大仓库时应根据实际情况采用相对适合的迁移策略，最后，应遵循团队的约定，对照检查清单完成所有收尾工作。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/migrating-convert&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Migrate to Git from SVN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/docs/git-svn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git-svn docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      在项目开发过程中，难免会遇到老项目的代码是被SVN管理的，但基于当下诸多原因，或是扩展开发，或是战略转移，或是为了更好地开发体验，需要将这些在维护的遗留项目源码迁移为Git管理。那如何有效地迁移源码并保留历史记录呢？
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="Git" scheme="http://blog.waterstrong.me/tags/Git/"/>
    
      <category term="VCS" scheme="http://blog.waterstrong.me/tags/VCS/"/>
    
      <category term="SVN" scheme="http://blog.waterstrong.me/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ项目实践应用 - 发布订阅模式</title>
    <link href="http://blog.waterstrong.me/rabbitmq-in-project/"/>
    <id>http://blog.waterstrong.me/rabbitmq-in-project/</id>
    <published>2016-11-01T15:26:31.000Z</published>
    <updated>2016-11-07T14:58:23.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;一、需求描述&quot;&gt;&lt;a href=&quot;#一、需求描述&quot; class=&quot;headerlink&quot; title=&quot;一、需求描述&quot;&gt;&lt;/a&gt;一、需求描述&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;br&gt;&lt;em&gt;当前有一个源系统G，主要存储大量数据，每条数据以唯一的ID标识，该系统每天会不定时处理一些合并数据的操作，出于某些需求原因，同时还有若干下游子系统A，其中保存了源系统数据的主键ID。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当源系统G发生了合并操作时需要通知所有下游子系统对相同ID的数据进行相应的更改&lt;/li&gt;
&lt;li&gt;下游子系统数量不定，且可能在以后会逐渐增加，应尽可能降低源系统和子系统间的耦合&lt;/li&gt;
&lt;li&gt;特别是在增加下游子系统时不需要修改源系统的代码就可完成通知的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;二、解决方案&quot;&gt;&lt;a href=&quot;#二、解决方案&quot; class=&quot;headerlink&quot; title=&quot;二、解决方案&quot;&gt;&lt;/a&gt;二、解决方案&lt;/h3&gt;&lt;p&gt;考虑到解耦，比较理想的方案是采用消息机制来实现，可以通过将源系统G的合并操作转化为消息发送给一个Exchange，然后由Exchange分发给每个下游子系统对应的Queue，由子系统各自独立处理并维护队列消息，这样，当增加一个子系统时，只需要添加一个Queue并绑定到Exchange上即可，很符合发布订阅模式，可以参阅之前博客 &lt;a href=&quot;/rabbitmq-start-guide&quot;&gt;RabbitMQ入门指南&lt;/a&gt; 中的场景三。&lt;br&gt;&lt;img src=&quot;/assets/rabbitmq-guide/publish_subscribe.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;三、方案实施&quot;&gt;&lt;a href=&quot;#三、方案实施&quot; class=&quot;headerlink&quot; title=&quot;三、方案实施&quot;&gt;&lt;/a&gt;三、方案实施&lt;/h3&gt;&lt;h5 id=&quot;管理RabbitMQ服务&quot;&gt;&lt;a href=&quot;#管理RabbitMQ服务&quot; class=&quot;headerlink&quot; title=&quot;管理RabbitMQ服务&quot;&gt;&lt;/a&gt;管理RabbitMQ服务&lt;/h5&gt;&lt;p&gt;在完成安装RabbitMQ后即可开始使用，这里采用虚拟机中Docker启动服务的方式，当前的虚拟机IP地址为&lt;code&gt;192.168.56.105&lt;/code&gt;，在后续的配置和访问中都会用到。通常在程序中用代码实现创建并绑定Exchange和Queue，但为了将Queue的管理和访问权限分离开来，这里采用事先创建Exchange和Queue，然后程序只负责配置连接访问对应的Exchange和Queue的方式。如果对RabbitMQ的相关配置和应用还不太了解，可以参阅另一篇博客 &lt;a href=&quot;/rabbitmq-professional&quot;&gt;RabbitMQ进阶指南&lt;/a&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先登录到&lt;a href=&quot;http://192.168.56.105:15672&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.56.105:15672&lt;/a&gt;，默认用户名和密码为&lt;code&gt;guest&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/rabbitmq-guide/overview_totals2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择【channel】页，创建多个Queues，分别命名为&lt;code&gt;DEV.MESSAGE.QUEUE.APP1&lt;/code&gt;, &lt;code&gt;...APP2&lt;/code&gt;和&lt;code&gt;...APP3&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/rabbitmq-guide/queues.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择【exchanges】页，创建&lt;code&gt;topic&lt;/code&gt;类型的Exchange，命名为&lt;code&gt;DEV.MESSAGE.TOPIC.MAIN&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/rabbitmq-guide/exchanges.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择并点击【DEV.MESSAGE.TOPIC.MAIN】条目，进入详细页面，选择【Bindings】，将步骤2中的Queues绑定到该Exchange上。&lt;br&gt;&lt;img src=&quot;/assets/rabbitmq-guide/exchanges_topic.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样，Exchange和Queue的创建及绑定工作就完成了，接下来需要分别完成发送者和接收者的代码。&lt;/p&gt;
&lt;h5 id=&quot;源系统发送消息&quot;&gt;&lt;a href=&quot;#源系统发送消息&quot; class=&quot;headerlink&quot; title=&quot;源系统发送消息&quot;&gt;&lt;/a&gt;源系统发送消息&lt;/h5&gt;&lt;p&gt;发送消息需要配置&lt;code&gt;ConnectionFactory&lt;/code&gt;关联到RabbitMQ服务，然后通过&lt;code&gt;RabbitTemplate&lt;/code&gt;发送消息到连接的Exchange中，这里选取&lt;code&gt;topic&lt;/code&gt;类型作为示例讲解，如果只是单纯的广播，采用最基本的&lt;code&gt;fanout&lt;/code&gt;类型也可以满足当前需求的，请根据项目的实际情况选用Exchange类型。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;RabbitMqConfiguration.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; ws.message.configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.rabbit.connection.AbstractConnectionFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.rabbit.connection.CachingConnectionFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.rabbitmq.client.ConnectionFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RabbitMqConfiguration&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;rabbitmq.host&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String topicHost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;rabbitmq.username&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String username;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;rabbitmq.password&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String password;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;rabbitmq.port:5672&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; port;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;rabbitmq.virtualHost:/&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String virtualHost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;rabbitmq.connectionTimeout&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; connectionTimeout;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;rabbitmq.recoveryInterval&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; recoveryInterval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; AbstractConnectionFactory &lt;span class=&quot;title&quot;&gt;connectionFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ConnectionFactory factory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ConnectionFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        factory.setHost(topicHost);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        factory.setUsername(username);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        factory.setPassword(password);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        factory.setPort(port);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        factory.setVirtualHost(virtualHost);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        factory.setConnectionTimeout(connectionTimeout);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        factory.setNetworkRecoveryInterval(recoveryInterval);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CachingConnectionFactory(factory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在默认的&lt;code&gt;resources&lt;/code&gt;目录下创建&lt;code&gt;application.yml&lt;/code&gt;并添加需要的Properties，需要指定&lt;code&gt;host&lt;/code&gt;、&lt;code&gt;username&lt;/code&gt;、&lt;code&gt;password&lt;/code&gt;以及&lt;code&gt;topicName&lt;/code&gt;等配置参数，另外，&lt;code&gt;recoveryInterval&lt;/code&gt;表示网络恢复重试的时间间隔，&lt;code&gt;connectionTimeout&lt;/code&gt;表示连接超时，都以毫秒为单位。&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;figcaption&gt;&lt;span&gt;application.yml&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;server:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8081&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  context-path:&lt;/span&gt; /producer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rabbitmq:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  host:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.56&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.105&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  username:&lt;/span&gt; guest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  password:&lt;/span&gt; guest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  topicName:&lt;/span&gt; DEV.MESSAGE.TOPIC.MAIN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  recoveryInterval:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  connectionTimeout:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后创建&lt;code&gt;MessageController&lt;/code&gt;来模拟源系统的发送消息行为，采用&lt;code&gt;RabbitTemplate&lt;/code&gt;将消息发送到指定的Topic上。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;MessageController.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; ws.message.controller;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; java.lang.String.format;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; org.apache.log4j.Logger.getLogger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; org.joda.time.DateTime.now;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; org.springframework.http.HttpStatus.CREATED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; org.springframework.web.bind.annotation.RequestMethod.POST;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.log4j.Logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.rabbit.core.RabbitTemplate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.http.ResponseEntity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.RequestBody;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.RequestMapping;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.web.bind.annotation.RestController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MessageController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Logger LOGGER = getLogger(MessageController.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;rabbitmq.topicName&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String topicName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; RabbitTemplate rabbitTemplate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@RequestMapping&lt;/span&gt;(method = POST, value = &lt;span class=&quot;string&quot;&gt;&quot;/messages&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ResponseEntity&amp;lt;?&amp;gt; sendMessage(&lt;span class=&quot;meta&quot;&gt;@RequestBody&lt;/span&gt; String message)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LOGGER.info(format(&lt;span class=&quot;string&quot;&gt;&quot;@%s Send message: %s&quot;&lt;/span&gt;, now(), message));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rabbitTemplate.convertAndSend(topicName, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ResponseEntity&amp;lt;&amp;gt;(message, CREATED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完整代码可以参考GitHub Demo: &lt;a href=&quot;https://github.com/Waterstrong/message-producer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;message-producer&lt;/a&gt;。&lt;/p&gt;
&lt;h5 id=&quot;子系统接收消息&quot;&gt;&lt;a href=&quot;#子系统接收消息&quot; class=&quot;headerlink&quot; title=&quot;子系统接收消息&quot;&gt;&lt;/a&gt;子系统接收消息&lt;/h5&gt;&lt;p&gt;需要配置连接的RabbitMQ服务和特定的Queue，该Queue是绑定在源系统的Exchange上的，同时需要设置消息监听者&lt;code&gt;RabbitMqConsumer&lt;/code&gt;。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;RabbitMqConfiguration.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; ws.message.configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.net.URI;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.rabbit.connection.CachingConnectionFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.rabbit.connection.ConnectionFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ws.message.consumer.RabbitMqConsumer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RabbitMqConfiguration&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;rabbitmq.uri&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String rabbitUri;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;#&amp;#123;&#39;$&amp;#123;rabbitmq.queueNames&amp;#125;&#39;.split(&#39;,&#39;)&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String[] queueNames;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;rabbitmq.recoveryInterval&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Long recoveryInterval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;rabbitmq.receiveTimeout&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Long receiveTimeout;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;SimpleMessageListenerContainer &lt;span class=&quot;title&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ConnectionFactory connectionFactory,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                             RabbitMqConsumer messageListener,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                             MessageErrorHandler errorHandler)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SimpleMessageListenerContainer container = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SimpleMessageListenerContainer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container.setConnectionFactory(connectionFactory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container.setQueueNames(queueNames);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container.setMessageListener(messageListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container.setRecoveryInterval(recoveryInterval);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container.setReceiveTimeout(receiveTimeout);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container.setDefaultRequeueRejected(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        container.setErrorHandler(errorHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; container;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;ConnectionFactory &lt;span class=&quot;title&quot;&gt;connectionFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CachingConnectionFactory(URI.create(rabbitUri));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;DefaultRequeueRejected&lt;/code&gt;如果被设置成&lt;code&gt;false&lt;/code&gt;，表示当出现异常时不会将消息保留在当前Queue中，如果设置为&lt;code&gt;true&lt;/code&gt;(默认值)，表示出错后会将消息保留在当前Queue中，并且应用程序会不停地读取消息，应根据实际需求处理，通常可以采用Dead Letter(死信)的方式处理，后续会详解。&lt;/p&gt;
&lt;p&gt;消息监听者&lt;code&gt;RabbitMqConsumer&lt;/code&gt;实现了&lt;code&gt;MessageListener&lt;/code&gt;接口，消息会被发送到&lt;code&gt;onMessage&lt;/code&gt;方法，子系统需要在这里处理接收到的消息。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;RabbitMqConsumer.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; ws.message.consumer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; java.lang.String.format;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; org.apache.log4j.Logger.getLogger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; org.joda.time.DateTime.now;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.log4j.Logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.Message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.amqp.core.MessageListener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.stereotype.Component;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.transaction.annotation.Transactional;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ws.message.repository.MessageRepository;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RabbitMqConsumer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MessageListener&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Logger LOGGER = getLogger(RabbitMqConsumer.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; MessageRepository messageRepository;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Transactional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Message message)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String bodyContent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(message.getBody());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LOGGER.info(format(&lt;span class=&quot;string&quot;&gt;&quot;@@@@@@@@%s Received: %s\n&quot;&lt;/span&gt;, now(), bodyContent));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        messageRepository.save(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ws.message.entity.Message(bodyContent));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于子系统处理完成消息后会与数据库进行交互，这里也会配置内存数据库来模拟实际行为，同时，需要设置&lt;code&gt;uri&lt;/code&gt;和&lt;code&gt;queueName&lt;/code&gt;，这里的uri是连接RabbitMQ的固定格式，也可以采用源系统配置中分开的写法，另外，&lt;code&gt;recoveryInterval&lt;/code&gt;表示Queue恢复重试的时间间隔，重试次数默认无限制，可以单独配置&lt;code&gt;FixedBackOff&lt;/code&gt;，&lt;code&gt;receiveTimeout&lt;/code&gt;接收消息超时时间，都以毫秒为单位。&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;figcaption&gt;&lt;span&gt;application.yml&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;server:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  context-path:&lt;/span&gt; /consumer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  datasource:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    url:&lt;/span&gt; jdbc:h2:./.tmp/msgdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    username:&lt;/span&gt; sa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    password:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  jpa:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    show-sql:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    hibernate:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      ddl-auto:&lt;/span&gt; create-drop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rabbitmq:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  uri:&lt;/span&gt; amqp://guest:guest@&lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.56&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.105&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5672&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  queueNames:&lt;/span&gt; DEV.MESSAGE.QUEUE.APP1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  recoveryInterval:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  receiveTimeout:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完整代码可以参考GitHub Demo: &lt;a href=&quot;https://github.com/Waterstrong/message-consumer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;message-consumer&lt;/a&gt;。&lt;/p&gt;
&lt;h5 id=&quot;全局事务处理&quot;&gt;&lt;a href=&quot;#全局事务处理&quot; class=&quot;headerlink&quot; title=&quot;全局事务处理&quot;&gt;&lt;/a&gt;全局事务处理&lt;/h5&gt;&lt;p&gt;既然这里涉及到消息机制和数据库的操作，必定需要考虑全局事务提交和回滚的情况，如果对事务还不太了解可以参阅之前的博客 &lt;a href=&quot;/xa-transactions-with-jta&quot;&gt;JTA实现分布式事务&lt;/a&gt; 和 &lt;a href=&quot;/transactional-mechanism-protocol&quot;&gt;事务处理机制与协议&lt;/a&gt;。在Spring Boot项目中，除了添加&lt;code&gt;spring-boot-starter-amqp&lt;/code&gt;和&lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt;依赖支持RabbitMQ消息和JPA数据库操作外，还需要添加&lt;code&gt;spring-boot-starter-jta-bitronix&lt;/code&gt;依赖引入&lt;code&gt;Bitronix&lt;/code&gt;支持全局事务机制，这样&lt;code&gt;DataSource&lt;/code&gt;和&lt;code&gt;ConnectionFactory&lt;/code&gt;会默认被加入到XA资源管理中。&lt;/p&gt;
&lt;p&gt;当子系统收到消息处理后，在准备保存数据库时发生了异常，消息和数据库都会被回滚，如果配置了&lt;code&gt;DefaultRequeueRejected&lt;/code&gt;为&lt;code&gt;false&lt;/code&gt;，消息会被立即丢弃或转到其他Queue上，当然可以在丢弃之前记录下日志或进行异常处理，该值默认会为&lt;code&gt;true&lt;/code&gt;，假设没有特殊配置，消息都会一直保留在当前Queue中，应用程序会一直不停读取消息，这样会阻塞后续的消息，因此必须设置消息在一定的重试次数后应被丢弃，一种常用的手段是为当前Queue配置&lt;code&gt;message-ttl&lt;/code&gt;和&lt;code&gt;dead-letter-exchange&lt;/code&gt;实现消息的超时和转发。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;message-ttl：一个消息在Queue上可以停留的时间，如果消息在规定时间内未消费将被视为超时过期并丢弃，时间单位为毫秒。&lt;/li&gt;
&lt;li&gt;dead-letter-exchange：可以为当前Queue配置某个Exchange或Queue，当消息被拒绝或过期时，消息会被转发到配置的Exchange上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果配置了&lt;code&gt;dead-letter-exchange&lt;/code&gt;，那么可以设置在一定时间后再将消息以同样的形式返回到当前的Queue中，这样就实现了重试的机制，但该方法需要在消息头中记录重试的次数并用程序判断次数，以防止无限循环。&lt;/p&gt;
&lt;h3 id=&quot;结束语&quot;&gt;&lt;a href=&quot;#结束语&quot; class=&quot;headerlink&quot; title=&quot;结束语&quot;&gt;&lt;/a&gt;结束语&lt;/h3&gt;&lt;p&gt;在处理消息的回滚和重试时，可能还需要再寻求一些其他更好的技术解决方案，并且需要保证在应用程序或RabbitMQ服务器突然挂掉重启后，能够再次读取并处理之前失败的消息，只有当超过了一定的时间或重试次数时才将消息丢弃并将副本存在硬盘日志文件中。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rabbitmq.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RabbitMQ Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rabbitmq.com/getstarted.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RabbitMQ Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/guides/gs/messaging-rabbitmq/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Messaging with RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.waterstrong.me/transactional-mechanism-protocol/&quot;&gt;事务处理机制与协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.waterstrong.me/xa-transactions-with-jta/&quot;&gt;JTA实现分布式事务&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      当前有一个源系统G，主要存储大量数据，每条数据以唯一的ID标识，该系统每天会不定时处理一些合并数据的操作，出于某些需求原因，同时还有若干下游子系统A。
    
    </summary>
    
      <category term="Frameworks" scheme="http://blog.waterstrong.me/categories/Frameworks/"/>
    
    
      <category term="AMQP" scheme="http://blog.waterstrong.me/tags/AMQP/"/>
    
      <category term="RabbitMQ" scheme="http://blog.waterstrong.me/tags/RabbitMQ/"/>
    
      <category term="Message" scheme="http://blog.waterstrong.me/tags/Message/"/>
    
      <category term="Topic" scheme="http://blog.waterstrong.me/tags/Topic/"/>
    
      <category term="Exchange" scheme="http://blog.waterstrong.me/tags/Exchange/"/>
    
      <category term="Queue" scheme="http://blog.waterstrong.me/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ入门指南</title>
    <link href="http://blog.waterstrong.me/rabbitmq-start-guide/"/>
    <id>http://blog.waterstrong.me/rabbitmq-start-guide/</id>
    <published>2016-10-21T14:55:14.000Z</published>
    <updated>2016-11-07T14:53:18.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;RabbitMQ基本介绍&quot;&gt;&lt;a href=&quot;#RabbitMQ基本介绍&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ基本介绍&quot;&gt;&lt;/a&gt;RabbitMQ基本介绍&lt;/h3&gt;&lt;p&gt;RabbitMQ(Rabbit Message Queue)，即消息队列系统，它是一款开源消息队列中间件，采用Erlang语言开发，RabbitMQ是&lt;a href=&quot;https://spring.io/understanding/AMQP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AMQP(Advanced Message Queueing Protocol)&lt;/a&gt;的标准实现。&lt;/p&gt;
&lt;p&gt;AMQP是一个公开发布的异步消息的规范，是提供统一消息服务的应用层标准&lt;strong&gt;高级消息队列协议&lt;/strong&gt;，为面向消息的中间件设计，消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。相对于&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Message_Service&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JMS(Java Message Service)&lt;/a&gt;规范来说，JMS使用的是特定的APIs，而消息格式可自由定义，而AMQP对消息的格式和传输是有要求的，但实现不会受操作系统、开发语言以及平台等的限制。&lt;/p&gt;
&lt;p&gt;JMS和AMQP还有一个较大的区别：JMS有队列(Queues)和主题(Topics)两种形式，发送到JMS队列的消息最多只能被一个Client消费，发送到JMS主题的消息可能会被多个Clients消费；AMQP只有队列(Queues)，队列的消息只能被单个接受者消费，发送者并不直接把消息发送到队列中，而是发送到Exchange中，该Exchage会与一个或多个队列绑定，能够实现与JMS队列和主题同样的功能。&lt;/p&gt;
&lt;p&gt;RabbitMQ的主要宣传点在于其健壮性好、易于使用、高性能、高并发、集群易扩展以及强大的开源社区支持，鉴于些，在实际项目中使用还是比较可靠有价值的。接下来就介绍一下RabbitMQ从安装到简单示例的入门教程。&lt;/p&gt;
&lt;h3 id=&quot;RabbitMQ下载安装&quot;&gt;&lt;a href=&quot;#RabbitMQ下载安装&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ下载安装&quot;&gt;&lt;/a&gt;RabbitMQ下载安装&lt;/h3&gt;&lt;p&gt;这里提供三种方式下载并安装RabbitMQ Server：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;需要在&lt;a href=&quot;https://www.rabbitmq.com/download.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RabbitMQ下载页&lt;/a&gt;下载对应操作系统的RabbitMQ Server安装包进行安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过命令行安装，比如如果在MAC系统下可以通过homebrew安装。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ brew install rabbitmq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ rabbitmq-server       &lt;span class=&quot;comment&quot;&gt;# 解压并以默认设置启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过&lt;a href=&quot;https://docs.docker.com/compose/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Compose&lt;/a&gt;快速启动RabbitMQ Server，但需要保证已经安装并启动了Docker服务，然后创建&lt;code&gt;docker-compose.yml&lt;/code&gt;的文件，并在同目录下执行命令&lt;code&gt;docker-compose up&lt;/code&gt;即可启动RabbitMQ服务。推荐使用该方式，方便快捷，并在独立Container中运行。&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;figcaption&gt;&lt;span&gt;docker-compose.yml&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;rabbitmq:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  image:&lt;/span&gt; rabbitmq:management&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;5672:5672&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;    -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;15672:15672&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在安装完成并启动服务后，可通过访问&lt;a href=&quot;http://localhost:15672&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:15672&lt;/a&gt;测试，默认用户名和密码是&lt;code&gt;guest&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/rabbitmq-guide/overview_totals.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;RabbitMQ入门使用&quot;&gt;&lt;a href=&quot;#RabbitMQ入门使用&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ入门使用&quot;&gt;&lt;/a&gt;RabbitMQ入门使用&lt;/h3&gt;&lt;p&gt;以Java为例集成RabbitMQ，针对不同应用场景使用其对应的功能，以下入门示例都出自&lt;a href=&quot;http://www.rabbitmq.com/getstarted.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网教程&lt;/a&gt;。&lt;/p&gt;
&lt;h5 id=&quot;应用场景一：Simple-Queue-“Hello-Word”&quot;&gt;&lt;a href=&quot;#应用场景一：Simple-Queue-“Hello-Word”&quot; class=&quot;headerlink&quot; title=&quot;应用场景一：Simple Queue “Hello Word”&quot;&gt;&lt;/a&gt;应用场景一：Simple Queue “Hello Word”&lt;/h5&gt;&lt;p&gt;一个&lt;strong&gt;P&lt;/strong&gt;roducer发送消息到Queue中，一个&lt;strong&gt;C&lt;/strong&gt;onsumer从Queue读取消息并打印。&lt;br&gt;&lt;img src=&quot;/assets/rabbitmq-guide/simple_queue.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;有兴趣可参阅示例代码：&lt;a href=&quot;https://github.com/Waterstrong/spring-rabbitmq/tree/master/src/main/java/ws/demo/rabbitmq/message/helloWorld&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hello World Demo&lt;/a&gt;。&lt;/p&gt;
&lt;h5 id=&quot;应用场景二：Work-Queues&quot;&gt;&lt;a href=&quot;#应用场景二：Work-Queues&quot; class=&quot;headerlink&quot; title=&quot;应用场景二：Work Queues&quot;&gt;&lt;/a&gt;应用场景二：Work Queues&lt;/h5&gt;&lt;p&gt;将消息分配给多个Consumer进行处理，可以避免在执行资源密集性任务时同步处理导致阻塞等待的问题，从而在一定程度上提升并行能力，通常称该类Consumer为Work，多个Work在后台接收分配到的任务并处理。&lt;br&gt;&lt;img src=&quot;/assets/rabbitmq-guide/work_queues.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;应用场景三：Publish-Subscribe&quot;&gt;&lt;a href=&quot;#应用场景三：Publish-Subscribe&quot; class=&quot;headerlink&quot; title=&quot;应用场景三：Publish/Subscribe&quot;&gt;&lt;/a&gt;应用场景三：Publish/Subscribe&lt;/h5&gt;&lt;p&gt;前两个场景都是把一个消息传递给一个Consumer/Worker，而这里的Publish/Subscribe需要把消息传递给多个Consumer。这里Producer不会将消息直接发送到队列，事实上，Producer也并不知道消息会传递给任何的Queue，而是将消息发送到一个Exchange上，Exchange的作用在于收到Producer的消息并推送给绑定的Queue，这样Exchange就将消息传递给绑定的Queues及其以对应的Consumer了，这里使用的Exchange是&lt;code&gt;fanout&lt;/code&gt;，其实就是广播功能。Exchange通常分为四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fanout：该类型路由规则非常简单，会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中，相当于广播功能&lt;/li&gt;
&lt;li&gt;direct：该类型路由规则会将消息路由到binding key与routing key完全匹配的Queue中，在场景四中会用到&lt;/li&gt;
&lt;li&gt;topic：与direct类型相似，只是规则没有那么严格，可以模糊匹配和多条件匹配，在场景五中会进一步解释&lt;/li&gt;
&lt;li&gt;headers：该类型不依赖于routing key与binding key的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/rabbitmq-guide/publish_subscribe.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;比如一个打印Log的系统，当所有接收Log的Consumer接收到消息后都可以打印Log，有兴趣可参阅示例代码：&lt;a href=&quot;https://github.com/Waterstrong/spring-rabbitmq/tree/master/src/main/java/ws/demo/rabbitmq/message/publishsubscribe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Publish/Subscribe Demo&lt;/a&gt;。&lt;/p&gt;
&lt;h5 id=&quot;应用场景四：Routing&quot;&gt;&lt;a href=&quot;#应用场景四：Routing&quot; class=&quot;headerlink&quot; title=&quot;应用场景四：Routing&quot;&gt;&lt;/a&gt;应用场景四：Routing&lt;/h5&gt;&lt;p&gt;在上一场景中，只是一个简单的Log系统，相当于广播功能，更进一步，可以针对不同的日志发送到不同的Consumer进行不同的处理，比如有的写文件，有的打印控制台等，那么就需要定义Routing路由了。为了使用Routing功能，可以将Exchange定义为&lt;code&gt;direct&lt;/code&gt;类型，需要设置&lt;code&gt;routing_key&lt;/code&gt;绑定到Queue上，然后就可以发送消息了。&lt;br&gt;&lt;img src=&quot;/assets/rabbitmq-guide/routing.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;应用场景五：Topics&quot;&gt;&lt;a href=&quot;#应用场景五：Topics&quot; class=&quot;headerlink&quot; title=&quot;应用场景五：Topics&quot;&gt;&lt;/a&gt;应用场景五：Topics&lt;/h5&gt;&lt;p&gt;在以上场景中，使用&lt;code&gt;direct&lt;/code&gt;类型的Exchange可以实现对不同消息的路由，但只是支持单一的条件，为了支持多种条件，比如不仅针对Log的级别，还要针对其来源进行分发消息，这时候可以使用Topic来实现了，其中的逻辑和&lt;code&gt;direct&lt;/code&gt;的类似，只是&lt;code&gt;routing_key&lt;/code&gt;支持多个用点&lt;code&gt;.&lt;/code&gt;分隔的值用于匹配路由信息，其中路由Key可以使用&lt;code&gt;*&lt;/code&gt;替代一个词，&lt;code&gt;#&lt;/code&gt;匹配0个或多个词。&lt;br&gt;&lt;img src=&quot;/assets/rabbitmq-guide/topics.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有兴趣可参阅示例代码：&lt;a href=&quot;https://github.com/Waterstrong/spring-rabbitmq/tree/master/src/main/java/ws/demo/rabbitmq/message/topics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Topics Demo&lt;/a&gt;。&lt;/p&gt;
&lt;h5 id=&quot;应用场景六：RPC-Remote-procedure-call&quot;&gt;&lt;a href=&quot;#应用场景六：RPC-Remote-procedure-call&quot; class=&quot;headerlink&quot; title=&quot;应用场景六：RPC(Remote procedure call)&quot;&gt;&lt;/a&gt;应用场景六：RPC(Remote procedure call)&lt;/h5&gt;&lt;p&gt;在前面的场景二中，能够实现使用&lt;em&gt;Work Queues&lt;/em&gt;分发处理运算任务，但如果需要将任务发送到远程服务器上执行处理，然后等待返回运算结果呢？那就需要RPC远程过程回调了。这里描述的场景将和之前的完全不一样，需要构建一个Client和RPC Server，Client作为远程调用的发起者携带一些如&lt;code&gt;reply_to&lt;/code&gt;,&lt;code&gt;correlation_id&lt;/code&gt;等的特定信息发送请求到&lt;code&gt;rpc_queue&lt;/code&gt;上，RPC Server接收到请求后执行处理函数并将运算结果返回给&lt;code&gt;Callback Queue&lt;/code&gt;，Client就可以接收到对应&lt;code&gt;correlationId&lt;/code&gt;的返回结果了。&lt;br&gt;&lt;img src=&quot;/assets/rabbitmq-guide/rpc.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;The-End-结束语&quot;&gt;&lt;a href=&quot;#The-End-结束语&quot; class=&quot;headerlink&quot; title=&quot;The End 结束语&quot;&gt;&lt;/a&gt;The End 结束语&lt;/h3&gt;&lt;p&gt;本节只是针对RabbitMQ的主要功能及基本使用进行了介绍，如果对RabbitMQ的服务配置、客户端应用以及插件管理感兴趣，可以阅读下一篇博客&lt;a href=&quot;/rabbitmq-professional&quot;&gt;RabbitMQ进阶指南&lt;/a&gt;了解更多精彩内容。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rabbitmq.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RabbitMQ Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rabbitmq.com/getstarted.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RabbitMQ Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/understanding/AMQP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding AMQP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/guides/gs/messaging-rabbitmq/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Messaging with RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      RabbitMQ是一款开源消息队列中间件，采用Erlang语言开发，RabbitMQ是AMQP的标准实现，在易用性、扩展性、高可用性等方面表现不错。
    
    </summary>
    
      <category term="Frameworks" scheme="http://blog.waterstrong.me/categories/Frameworks/"/>
    
    
      <category term="AMQP" scheme="http://blog.waterstrong.me/tags/AMQP/"/>
    
      <category term="RabbitMQ" scheme="http://blog.waterstrong.me/tags/RabbitMQ/"/>
    
      <category term="Message" scheme="http://blog.waterstrong.me/tags/Message/"/>
    
      <category term="Topic" scheme="http://blog.waterstrong.me/tags/Topic/"/>
    
      <category term="Exchange" scheme="http://blog.waterstrong.me/tags/Exchange/"/>
    
      <category term="Queue" scheme="http://blog.waterstrong.me/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>JTA实现分布式事务</title>
    <link href="http://blog.waterstrong.me/xa-transactions-with-jta/"/>
    <id>http://blog.waterstrong.me/xa-transactions-with-jta/</id>
    <published>2016-10-18T14:05:32.000Z</published>
    <updated>2016-11-11T13:29:13.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;开门见山&quot;&gt;&lt;a href=&quot;#开门见山&quot; class=&quot;headerlink&quot; title=&quot;开门见山&quot;&gt;&lt;/a&gt;开门见山&lt;/h2&gt;&lt;p&gt;关于事务的基本概念和介绍请参阅另一篇博客&lt;a href=&quot;/transactional-mechanism-protocol&quot;&gt;事务处理机制与协议&lt;/a&gt;，这里着重讲解如何在Spring中基于JTA(Java Transaction API)实现分布式事务并实践。&lt;/p&gt;
&lt;p&gt;Spring Boot除了对非XA的事务进行了封装处理，并提供了注解@Transactional的方式实现事务管理，也对多XA资源的分布式JTA事务提供了很好的支持，通常可选的内嵌事务管理器有&lt;code&gt;Atomikos&lt;/code&gt;和&lt;code&gt;Bitronix&lt;/code&gt;，任意选择一个作为实现XA事务管理的管理器即可。&lt;/p&gt;
&lt;p&gt;接下来就分别介绍利用Spring Boot实现非XA和XA的事务处理。&lt;/p&gt;
&lt;h2 id=&quot;Spring对非XA事务的实现&quot;&gt;&lt;a href=&quot;#Spring对非XA事务的实现&quot; class=&quot;headerlink&quot; title=&quot;Spring对非XA事务的实现&quot;&gt;&lt;/a&gt;Spring对非XA事务的实现&lt;/h2&gt;&lt;p&gt;使用Spring Boot实现&lt;strong&gt;非XA事务&lt;/strong&gt;非常简单，只需要简单的两步即可：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在构建脚本文件中加入依赖&lt;code&gt;org.springframework.boot:spring-boot-starter-jdbc&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;无论采用基本的&lt;code&gt;JdbcTemplate&lt;/code&gt;或封装的&lt;code&gt;JPA&lt;/code&gt;与数据库进行交互，只需要在具体方法上加注解&lt;code&gt;@Transactional(org.springframework.transaction.annotation.Transactional)&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样就将该块的操作序列当作一个事务单元进行管理，任何失败或异常都将导致所有操作序列回滚，一个具体的简单Demo可参见&lt;a href=&quot;https://github.com/Waterstrong/spring-bitronix/tree/master/src/main/java/ws/transaction/demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Transaction Demo&lt;/a&gt;，另外，如果注解加在类名上，则代表该类中每个方法都将作为一个事务单元被管理。&lt;/p&gt;
&lt;h2 id=&quot;采用Atomikos事务管理器&quot;&gt;&lt;a href=&quot;#采用Atomikos事务管理器&quot; class=&quot;headerlink&quot; title=&quot;采用Atomikos事务管理器&quot;&gt;&lt;/a&gt;采用Atomikos事务管理器&lt;/h2&gt;&lt;p&gt;Atomikos是一款JTA事务管理器的开源库，能够Embedded到Spring Boot中，可以通过添加依赖&lt;code&gt;spring-boot-starter-jta-atomikos&lt;/code&gt;，然后Spring Boot会自动配置Atomikos并下载其依赖库，默认的事务日志文件会被写在项目下的&lt;code&gt;transaction-logs&lt;/code&gt;文件目录下的日志文件中，可以通过配置&lt;code&gt;spring.jta.log-dir&lt;/code&gt;来指定日志目录。可以设置&lt;code&gt;spring.jta.atomikos.properties&lt;/code&gt;读取相应的配置文件。可以参阅完成的详细信息AtomikosProperties &lt;a href=&quot;http://docs.spring.io/spring-boot/docs/1.4.1.RELEASE/api/org/springframework/boot/jta/atomikos/AtomikosProperties.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javadoc&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;为了保证多个事务管理器能够正常安全地协调相同的资源管理器，每一个Atomikos实例必须配置一个唯一的ID，默认值为当前所在机器IP，通常在产品环境中，可以为每个应用程序实例配置&lt;code&gt;spring.jta.transaction-manager-id&lt;/code&gt;为不同的值。&lt;/p&gt;
&lt;p&gt;在Spring Boot中，可以自定义在应用程序配置文件中配置&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v1.4.1.RELEASE/spring-boot/src/main/java/org/springframework/boot/jta/atomikos/AtomikosProperties.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AtomikosProperties&lt;/a&gt;参数：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 &lt;span class=&quot;comment&quot;&gt;# Timeout, in seconds, for borrowing connections from the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not to ignore the transacted flag when creating session.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.connectionfactory.local-transaction-mode=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not local transactions are desired.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.connectionfactory.maintenance-interval=60 &lt;span class=&quot;comment&quot;&gt;# The time, in seconds, between runs of the pool&#39;s maintenance thread.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.connectionfactory.max-idle-time=60 &lt;span class=&quot;comment&quot;&gt;# The time, in seconds, after which connections are cleaned up from the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.connectionfactory.max-lifetime=0 &lt;span class=&quot;comment&quot;&gt;# The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.connectionfactory.max-pool-size=1 &lt;span class=&quot;comment&quot;&gt;# The maximum size of the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.connectionfactory.min-pool-size=1 &lt;span class=&quot;comment&quot;&gt;# The minimum size of the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.connectionfactory.reap-timeout=0 &lt;span class=&quot;comment&quot;&gt;# The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory &lt;span class=&quot;comment&quot;&gt;# The unique name used to identify the resource during recovery.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.datasource.borrow-connection-timeout=30 &lt;span class=&quot;comment&quot;&gt;# Timeout, in seconds, for borrowing connections from the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.datasource.default-isolation-level= &lt;span class=&quot;comment&quot;&gt;# Default isolation level of connections provided by the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.datasource.login-timeout= &lt;span class=&quot;comment&quot;&gt;# Timeout, in seconds, for establishing a database connection.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.datasource.maintenance-interval=60 &lt;span class=&quot;comment&quot;&gt;# The time, in seconds, between runs of the pool&#39;s maintenance thread.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.datasource.max-idle-time=60 &lt;span class=&quot;comment&quot;&gt;# The time, in seconds, after which connections are cleaned up from the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.datasource.max-lifetime=0 &lt;span class=&quot;comment&quot;&gt;# The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.datasource.max-pool-size=1 &lt;span class=&quot;comment&quot;&gt;# The maximum size of the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.datasource.min-pool-size=1 &lt;span class=&quot;comment&quot;&gt;# The minimum size of the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.datasource.reap-timeout=0 &lt;span class=&quot;comment&quot;&gt;# The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.datasource.test-query= &lt;span class=&quot;comment&quot;&gt;# SQL query or statement used to validate a connection before returning it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.datasource.unique-resource-name=dataSource &lt;span class=&quot;comment&quot;&gt;# The unique name used to identify the resource during recovery.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.checkpoint-interval=500 &lt;span class=&quot;comment&quot;&gt;# Interval between checkpoints.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.console-file-count=1 &lt;span class=&quot;comment&quot;&gt;# Number of debug logs files that can be created.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.console-file-limit=-1 &lt;span class=&quot;comment&quot;&gt;# How many bytes can be stored at most in debug logs files.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.console-file-name=tm.out &lt;span class=&quot;comment&quot;&gt;# Debug logs file name.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.console-log-level= &lt;span class=&quot;comment&quot;&gt;# Console log level.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.default-jta-timeout=10000 &lt;span class=&quot;comment&quot;&gt;# Default timeout for JTA transactions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.enable-logging=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Enable disk logging.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.force-shutdown-on-vm-exit=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Specify if a VM shutdown should trigger forced shutdown of the transaction core.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.log-base-dir= &lt;span class=&quot;comment&quot;&gt;# Directory in which the log files should be stored.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.log-base-name=tmlog &lt;span class=&quot;comment&quot;&gt;# Transactions log file base name.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.max-actives=50 &lt;span class=&quot;comment&quot;&gt;# Maximum number of active transactions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.max-timeout=300000 &lt;span class=&quot;comment&quot;&gt;# Maximum timeout (in milliseconds) that can be allowed for transactions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.output-dir= &lt;span class=&quot;comment&quot;&gt;# Directory in which to store the debug log files.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.serial-jta-transactions=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Specify if sub-transactions should be joined when possible.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.service= &lt;span class=&quot;comment&quot;&gt;# Transaction manager implementation that should be started.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.threaded-two-phase-commit=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Use different (and concurrent) threads for two-phase commit on the participating resources.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.atomikos.properties.transaction-manager-unique-name= &lt;span class=&quot;comment&quot;&gt;# Transaction manager&#39;s unique name.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个具体的Atomikos分布式事务管理示例可参见&lt;a href=&quot;https://github.com/Waterstrong/spring-atomikos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Atomikos Demo&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;采用Bitronix事务管理器&quot;&gt;&lt;a href=&quot;#采用Bitronix事务管理器&quot; class=&quot;headerlink&quot; title=&quot;采用Bitronix事务管理器&quot;&gt;&lt;/a&gt;采用Bitronix事务管理器&lt;/h2&gt;&lt;p&gt;Bitronix是一款JTA事务管理器的开源库，可以通过添加依赖&lt;code&gt;spring-boot-starter-jta-bitronix&lt;/code&gt;，然后Spring Boot会自动配置Bitronix，默认的事务日志文件会被写在项目下的&lt;code&gt;transaction-logs&lt;/code&gt;文件目录下的&lt;code&gt;part1.btm&lt;/code&gt;和&lt;code&gt;part2.btm&lt;/code&gt;中，可以通过配置&lt;code&gt;spring.jta.log-dir&lt;/code&gt;来指定日志目录。可以设置&lt;code&gt;spring.jta.bitronix.properties&lt;/code&gt;读取相应的配置文件，相当于自定义配置&lt;code&gt;bitronix.tm.configuration&lt;/code&gt;实例。&lt;/p&gt;
&lt;p&gt;为了保证多个事务管理器能够正常安全地协调相同的资源管理器，每一个Bitronix实例必须配置一个唯一的ID，默认值为当前所在机器IP，通常在产品环境中，可以为每个应用程序实例配置&lt;code&gt;spring.jta.transaction-manager-id&lt;/code&gt;为不同的值。&lt;/p&gt;
&lt;p&gt;在Spring Boot集成应用中，可以根据自定义需求在应用程序配置文件中配置以下参数：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.acquire-increment=1 &lt;span class=&quot;comment&quot;&gt;# Number of connections to create when growing the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.acquisition-interval=1 &lt;span class=&quot;comment&quot;&gt;# Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.acquisition-timeout=30 &lt;span class=&quot;comment&quot;&gt;# Timeout, in seconds, for acquiring connections from the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.allow-local-transactions=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not the transaction manager should allow mixing XA and non-XA transactions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.apply-transaction-timeout=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not the transaction timeout should be set on the XAResource when it is enlisted.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not resources should be enlisted and delisted automatically.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.cache-producers-consumers=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not produces and consumers should be cached.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.defer-connection-release=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not the provider can run many transactions on the same connection and supports transaction interleaving.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.ignore-recovery-failures=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not recovery failures should be ignored.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.max-idle-time=60 &lt;span class=&quot;comment&quot;&gt;# The time, in seconds, after which connections are cleaned up from the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.max-pool-size=10 &lt;span class=&quot;comment&quot;&gt;# The maximum size of the pool. 0 denotes no limit.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.min-pool-size=0 &lt;span class=&quot;comment&quot;&gt;# The minimum size of the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.password= &lt;span class=&quot;comment&quot;&gt;# The password to use to connect to the JMS provider.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.share-transaction-connections=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.test-connections=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not connections should be tested when acquired from the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 &lt;span class=&quot;comment&quot;&gt;# The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory &lt;span class=&quot;comment&quot;&gt;# The unique name used to identify the resource during recovery.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.use-tm-join=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; Whether or not TMJOIN should be used when starting XAResources.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.connectionfactory.user= &lt;span class=&quot;comment&quot;&gt;# The user to use to connect to the JMS provider.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.acquire-increment=1 &lt;span class=&quot;comment&quot;&gt;# Number of connections to create when growing the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.acquisition-interval=1 &lt;span class=&quot;comment&quot;&gt;# Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.acquisition-timeout=30 &lt;span class=&quot;comment&quot;&gt;# Timeout, in seconds, for acquiring connections from the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.allow-local-transactions=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not the transaction manager should allow mixing XA and non-XA transactions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.apply-transaction-timeout=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not the transaction timeout should be set on the XAResource when it is enlisted.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.automatic-enlisting-enabled=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not resources should be enlisted and delisted automatically.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.cursor-holdability= &lt;span class=&quot;comment&quot;&gt;# The default cursor holdability for connections.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.defer-connection-release=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not the database can run many transactions on the same connection and supports transaction interleaving.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.enable-jdbc4-connection-test= &lt;span class=&quot;comment&quot;&gt;# Whether or not Connection.isValid() is called when acquiring a connection from the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.ignore-recovery-failures=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Whether or not recovery failures should be ignored.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.isolation-level= &lt;span class=&quot;comment&quot;&gt;# The default isolation level for connections.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.local-auto-commit= &lt;span class=&quot;comment&quot;&gt;# The default auto-commit mode for local transactions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.login-timeout= &lt;span class=&quot;comment&quot;&gt;# Timeout, in seconds, for establishing a database connection.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.max-idle-time=60 &lt;span class=&quot;comment&quot;&gt;# The time, in seconds, after which connections are cleaned up from the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.max-pool-size=10 &lt;span class=&quot;comment&quot;&gt;# The maximum size of the pool. 0 denotes no limit.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.min-pool-size=0 &lt;span class=&quot;comment&quot;&gt;# The minimum size of the pool.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.prepared-statement-cache-size=0 &lt;span class=&quot;comment&quot;&gt;# The target size of the prepared statement cache. 0 disables the cache.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.share-transaction-connections=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.test-query= &lt;span class=&quot;comment&quot;&gt;# SQL query or statement used to validate a connection before returning it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.two-pc-ordering-position=1 &lt;span class=&quot;comment&quot;&gt;# The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.unique-name=dataSource &lt;span class=&quot;comment&quot;&gt;# The unique name used to identify the resource during recovery.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.datasource.use-tm-join=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; Whether or not TMJOIN should be used when starting XAResources.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.allow-multiple-lrc=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Allow multiple LRC resources to be enlisted into the same transaction.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.asynchronous2-pc=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Enable asynchronously execution of two phase commit.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.background-recovery-interval-seconds=60 &lt;span class=&quot;comment&quot;&gt;# Interval in seconds at which to run the recovery process in the background.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.current-node-only-recovery=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Recover only the current node.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.debug-zero-resource-transaction=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Log the creation and commit call stacks of transactions executed without a single enlisted resource.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.default-transaction-timeout=60 &lt;span class=&quot;comment&quot;&gt;# Default transaction timeout in seconds.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.disable-jmx=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Enable JMX support.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.exception-analyzer= &lt;span class=&quot;comment&quot;&gt;# Set the fully qualified name of the exception analyzer implementation to use.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.filter-log-status=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Enable filtering of logs so that only mandatory logs are written.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.force-batching-enabled=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#  Set if disk forces are batched.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.forced-write-enabled=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Set if logs are forced to disk.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.graceful-shutdown-interval=60 &lt;span class=&quot;comment&quot;&gt;# Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name= &lt;span class=&quot;comment&quot;&gt;# JNDI name of the TransactionSynchronizationRegistry.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.jndi-user-transaction-name= &lt;span class=&quot;comment&quot;&gt;# JNDI name of the UserTransaction.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.journal=disk &lt;span class=&quot;comment&quot;&gt;# Name of the journal. Can be &#39;disk&#39;, &#39;null&#39; or a class name.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.log-part1-filename=btm1.tlog &lt;span class=&quot;comment&quot;&gt;# Name of the first fragment of the journal.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.log-part2-filename=btm2.tlog &lt;span class=&quot;comment&quot;&gt;# Name of the second fragment of the journal.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.max-log-size-in-mb=2 &lt;span class=&quot;comment&quot;&gt;# Maximum size in megabytes of the journal fragments.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.resource-configuration-filename= &lt;span class=&quot;comment&quot;&gt;# ResourceLoader configuration file name.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.server-id= &lt;span class=&quot;comment&quot;&gt;# ASCII ID that must uniquely identify this TM instance. Default to the machine&#39;s IP address.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.skip-corrupted-logs=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Skip corrupted transactions log entries.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring.jta.bitronix.properties.warn-about-zero-resource-transaction=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Log a warning for transactions executed without a single&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个具体的Bitronix分布式事务管理示例可参见&lt;a href=&quot;https://github.com/Waterstrong/spring-bitronix/tree/master/src/main/java/ws/xa/bitronix/demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bitronix Demo&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;混合XA-非XA事务的JMS连接&quot;&gt;&lt;a href=&quot;#混合XA-非XA事务的JMS连接&quot; class=&quot;headerlink&quot; title=&quot;混合XA/非XA事务的JMS连接&quot;&gt;&lt;/a&gt;混合XA/非XA事务的JMS连接&lt;/h2&gt;&lt;p&gt;当使用JTA时，默认情况下，主要的JMS&lt;code&gt;ConnectionFactory&lt;/code&gt;实例会被自动加入到XA资源中，并参与XA事务。如果在某些情况下，如JMS处理时间较长，超过了XA的Timeout时间，则需要在处理JMS时不使用XA的&lt;code&gt;ConnectionFactory&lt;/code&gt;，只需在注入时使用&lt;code&gt;nonXaJmsConnectionFactory&lt;/code&gt;即可，以下是代码示例：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Inject the primary (XA aware) ConnectionFactory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ConnectionFactory defaultConnectionFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Inject the XA aware ConnectionFactory (uses the alias and injects the same as above)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Qualifier&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;xaJmsConnectionFactory&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ConnectionFactory xaConnectionFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Inject the non-XA aware ConnectionFactory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Qualifier&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;nonXaJmsConnectionFactory&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ConnectionFactory nonXaConnectionFactory;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;General-Databases&quot;&gt;&lt;a href=&quot;#General-Databases&quot; class=&quot;headerlink&quot; title=&quot;General Databases&quot;&gt;&lt;/a&gt;General Databases&lt;/h2&gt;&lt;p&gt;针对不同的数据库可能需要设置一些不同的参数开启XA功能，比如Postgresql，需要设置参数&lt;code&gt;max_prepared_transactions&lt;/code&gt;，整型值，它决定能够同时处于prepared状态的事务的最大数目，0表示关闭prepared事务的特性，该值通常应该和max_connections的值一样大。&lt;br&gt;&lt;figure class=&quot;highlight apacheconf&quot;&gt;&lt;figcaption&gt;&lt;span&gt;postgresql.conf&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;max_prepared_transactions&lt;/span&gt;=30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果使用AWS的Postgresql RDS数据库，则需要在Parameter Group中设置该值，否则默认会为0，表示关闭XA功能。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/transaction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Transaction Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-jta.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Distributed Transactions with JTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.atomikos.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Atomikos Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring-boot/docs/1.3.3.RELEASE/api/org/springframework/boot/jta/atomikos/AtomikosProperties.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Class AtomikosProperties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bitronix/btm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Home of Bitronix JTA Transaction Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/v1.3.3.RELEASE/spring-boot/src/main/java/org/springframework/boot/jta&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Boot JTA Code on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/guides/gs/managing-transactions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Managing Transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/jdbc/basics/transactions.html#commit_transactions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Transactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Common application properties&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Spring Boot除了对非XA的事务进行了封装处理，并提供了注解@Transactional的方式实现事务管理，也对多XA资源的分布式JTA事务提供了很好的支持，通常可选的内嵌事务管理器有Atomikos和Bitronix。
    
    </summary>
    
      <category term="Techniques" scheme="http://blog.waterstrong.me/categories/Techniques/"/>
    
    
      <category term="Transaction" scheme="http://blog.waterstrong.me/tags/Transaction/"/>
    
      <category term="分布式事务" scheme="http://blog.waterstrong.me/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="Spring Boot" scheme="http://blog.waterstrong.me/tags/Spring-Boot/"/>
    
      <category term="JTA" scheme="http://blog.waterstrong.me/tags/JTA/"/>
    
      <category term="Bitronix" scheme="http://blog.waterstrong.me/tags/Bitronix/"/>
    
      <category term="Atomikos" scheme="http://blog.waterstrong.me/tags/Atomikos/"/>
    
  </entry>
  
  <entry>
    <title>Groovy SQL Batch</title>
    <link href="http://blog.waterstrong.me/groovy-sql-batch/"/>
    <id>http://blog.waterstrong.me/groovy-sql-batch/</id>
    <published>2016-09-14T14:38:59.000Z</published>
    <updated>2017-02-16T16:30:37.000Z</updated>
    
    <content type="html">&lt;p&gt;通常，如果需要写一些针对数据库临时执行特定操作的脚本时，Groovy是一个不错的选择，如果数据量比较大的情况下需要用到Batch方式，接下来就我们就使用Groovy SQL快速实现一个简单的数据库批量操作Demo，如对已有User的姓名进行修饰更新。&lt;/p&gt;
&lt;h2 id=&quot;Preparation&quot;&gt;&lt;a href=&quot;#Preparation&quot; class=&quot;headerlink&quot; title=&quot;Preparation&quot;&gt;&lt;/a&gt;Preparation&lt;/h2&gt;&lt;p&gt;准备阶段主要Import依赖，以及配置数据库各项属性并创建连接：&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; groovy.sql.Sql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.springframework.test.context.jdbc.Sql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Also can set to &lt;span class=&quot;keyword&quot;&gt;project&lt;/span&gt;.ext.sql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; sql = Sql.newInstance(&lt;span class=&quot;string&quot;&gt;&#39;url&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;user&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;pwd&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;driver&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Set the variables&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    batchSize = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    customizeFile = &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;file.txt&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Statement&quot;&gt;&lt;a href=&quot;#Statement&quot; class=&quot;headerlink&quot; title=&quot;Statement&quot;&gt;&lt;/a&gt;Statement&lt;/h2&gt;&lt;p&gt;创建语句并执行，比如写一个查询和更新：&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; getUsers() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;&#39;Start to find users...&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sql.rows &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SELECT USER_ID AS userId, USER_NAME AS userName FROM TB_USER WITH UR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String getUpdateStatement() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        UPDATE TB_USER SET USER_NAME=? WHERE USER_ID=?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Extraction&quot;&gt;&lt;a href=&quot;#Extraction&quot; class=&quot;headerlink&quot; title=&quot;Extraction&quot;&gt;&lt;/a&gt;Extraction&lt;/h2&gt;&lt;p&gt;Extration可以从查询结果中提取值并重新赋值给新对象，同时写入记录到文件中，建议采用&lt;code&gt;withWriter&lt;/code&gt;高效写文件的方式：&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List extractUserIds(users) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;&#39;Start to extract users...&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; userIds = [:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    customizeFile.withWriter &amp;#123; writer -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        users.each &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            userIds.put(it.userId, it.userNames)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            writer.println it.userId&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    userIds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Transaction-amp-Batch&quot;&gt;&lt;a href=&quot;#Transaction-amp-Batch&quot; class=&quot;headerlink&quot; title=&quot;Transaction &amp;amp; Batch&quot;&gt;&lt;/a&gt;Transaction &amp;amp; Batch&lt;/h2&gt;&lt;p&gt;对于指执行，建议采用先准备好Sql脚本并加入到Batch中的方式，这样可以按批发送给数据库执行，提升效率，同时在最外层加上事务管理：&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; processBatchUpdate(userIds) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;&quot;Start to batch(size: $batchSize) update...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sql.withTransaction &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sql.withBatch(batchSize, updateStatement) &amp;#123; statement -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            userIds.each &amp;#123; statement.addBatch decorate(it.userName), it.userId &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;userIds.size()&amp;#125; users updated&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Default-Task&quot;&gt;&lt;a href=&quot;#Default-Task&quot; class=&quot;headerlink&quot; title=&quot;Default Task&quot;&gt;&lt;/a&gt;Default Task&lt;/h2&gt;&lt;p&gt;默认会被执行的任务，通常是入口，并且执行完毕可应关闭数据库Session：&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defaultTasks = [&lt;span class=&quot;string&quot;&gt;&#39;defaultMain&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Generally dependsOn: initialiseDriver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;task&lt;/span&gt; defaultMain() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onlyIf &amp;#123; !customizeFile.exitsts() &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;doLast&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; userIds = extractUserIds(users)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        processBatchUpdate userIds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sql.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更多关于&lt;code&gt;Groovy SQL&lt;/code&gt;的用法可以参考官网资料&lt;a href=&quot;http://docs.groovy-lang.org/latest/html/api/groovy/sql/Sql.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Groovy Class Sql&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.groovy-lang.org/latest/html/api/groovy/sql/Sql.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Groovy Class Sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.schibsted.pl/blog/groovy-sql-an-easy-way-to-database-scripting/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GROOVY SQL – AN EASY WAY TO DATABASE SCRIPTING&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      通常，如果需要写一些针对数据库临时执行特定操作的脚本时，Groovy是一个不错的选择，如果数据量比较大的情况下需要用到Batch方式，接下来将介绍使用Groovy SQL快速实现一个简单的数据库Batch操作Demo。
    
    </summary>
    
      <category term="Languages" scheme="http://blog.waterstrong.me/categories/Languages/"/>
    
    
      <category term="Groovy" scheme="http://blog.waterstrong.me/tags/Groovy/"/>
    
      <category term="SQL" scheme="http://blog.waterstrong.me/tags/SQL/"/>
    
      <category term="Batch" scheme="http://blog.waterstrong.me/tags/Batch/"/>
    
  </entry>
  
  <entry>
    <title>Mac如何读写NTFS磁盘</title>
    <link href="http://blog.waterstrong.me/mac-rw-ntfs/"/>
    <id>http://blog.waterstrong.me/mac-rw-ntfs/</id>
    <published>2016-09-11T13:10:13.000Z</published>
    <updated>2017-02-16T16:34:20.000Z</updated>
    
    <content type="html">&lt;p&gt;其实老早就遇到了Mac下写NTFS的问题，本来因为有两块移动硬盘，把其中一块500G的格式化成了Mac支持的格式，用于备份一些重要数据，而另一块1T之前已经存了不少数据，也懒得麻烦就一直放着没有管，但最近电脑数据太多，已经报警磁盘空间不足，不得不进行数据备份了，最早的硬盘已差不多满了，但又不想改磁盘格式，并且以后还可能在Win下拷贝数据，必须得想办法解决在Mac读写NTFS磁盘问题。&lt;/p&gt;
&lt;p&gt;可能也有很多同学遇到和我类似的问题，但不用担心，其实是有办法解决的，可能有些同学愿意购买Mac读写NTFS磁盘的工具，或者使用虚拟机作为媒介再Share给Mac，个人而言，不希望安装过多的软件，有洁癖，虚拟机的方式太慢太啰嗦，怕麻烦，所以只能寻求Mac内置原生方式，而这里就将介绍这种更为快捷、简单、干净的方式，只需要两步即可。&lt;br&gt;&lt;img src=&quot;/assets/mac-rw-ntfs/disk_utility.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Step1-配置fstab&quot;&gt;&lt;a href=&quot;#Step1-配置fstab&quot; class=&quot;headerlink&quot; title=&quot;Step1 配置fstab&quot;&gt;&lt;/a&gt;Step1 配置fstab&lt;/h4&gt;&lt;p&gt;在终端输入如下命令编辑&lt;code&gt;fstab&lt;/code&gt;文件，并写入&lt;code&gt;LABEL&lt;/code&gt;以及其值，若文件不存在将新建该文件。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo vim /etc/fstab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LABEL=Datum none ntfs rw,auto,nobrowse  &lt;span class=&quot;comment&quot;&gt;# 使用磁盘名方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LABEL=68D036FA-EE09-4B80-AC93-01E54D51059A none ntfs rw,auto,nobrowse  &lt;span class=&quot;comment&quot;&gt;# 使用UUID方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;rw&lt;/code&gt;表示读写方式，&lt;code&gt;nobrowse&lt;/code&gt;表示默认不在finder的边栏中显示，如果不加&lt;code&gt;nobrowse&lt;/code&gt;可能在挂载后还是只读模式。&lt;code&gt;Datum&lt;/code&gt;是硬盘名或分出来的磁盘名，如果有多个磁盘可以重复再写一行，当然也可以使用磁盘UUID，可在应用程序中打开&lt;code&gt;Disk Utility&lt;/code&gt;工具查看，或者使用命令行方式查看，比如查看Datum盘信息的命令为：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;diskutil info /Volumes/Datum&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Step2-打开磁盘&quot;&gt;&lt;a href=&quot;#Step2-打开磁盘&quot; class=&quot;headerlink&quot; title=&quot;Step2 打开磁盘&quot;&gt;&lt;/a&gt;Step2 打开磁盘&lt;/h4&gt;&lt;p&gt;由于设置了默认不在Finder边栏显示，因此需要手动打开磁盘，确保磁盘已经挂载成功，可以通过&lt;code&gt;Disk Utility&lt;/code&gt;或在命令行挂载并查看。&lt;br&gt;&lt;img src=&quot;/assets/mac-rw-ntfs/drive_info.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;打开硬盘磁盘的方式有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Finder中使用快捷键&lt;code&gt;cmd+shift+g&lt;/code&gt;并输入&lt;code&gt;/Volumes/Datum&lt;/code&gt;后可进入该磁盘目录&lt;/li&gt;
&lt;li&gt;命令行中运行&lt;code&gt;open /Volumes/Datum&lt;/code&gt;后进入该磁盘目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/mac-rw-ntfs/volumes_folder.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;此时，应该可以对磁盘进行读写操作了，为了下次更加的方便，也可以直接拖拽磁盘到Finder边栏的Favorites中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;道听途说该方式有导致磁盘损坏和数据丢失的风险，使用时可能需要留意一下，尽量保存一份副本，到时可不要来找我哦^_^。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      如何实现在Mac下读写NTFS磁盘，除了购买Mac读写NTFS磁盘的工具，或使用虚拟机作为媒介再Share给Mac的方式外，还可以使用更为快捷、简单、干净的Mac内置原生方式解决写NTFS硬盘的问题。
    
    </summary>
    
      <category term="Techniques" scheme="http://blog.waterstrong.me/categories/Techniques/"/>
    
    
      <category term="Mac" scheme="http://blog.waterstrong.me/tags/Mac/"/>
    
      <category term="NTFS" scheme="http://blog.waterstrong.me/tags/NTFS/"/>
    
      <category term="移动硬盘" scheme="http://blog.waterstrong.me/tags/%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>在集成测试中使用Stubby4J</title>
    <link href="http://blog.waterstrong.me/using-stubby4j/"/>
    <id>http://blog.waterstrong.me/using-stubby4j/</id>
    <published>2016-09-05T14:29:26.000Z</published>
    <updated>2016-11-20T14:32:50.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是stubby4j？&quot;&gt;&lt;a href=&quot;#什么是stubby4j？&quot; class=&quot;headerlink&quot; title=&quot;什么是stubby4j？&quot;&gt;&lt;/a&gt;什么是stubby4j？&lt;/h2&gt;&lt;p&gt;Stubby4J是基于Java编写的，该项目是由个人发起的开源项目，它是一款非常灵活可配置的基于HTTP(s)协议测试Web服务交互的工具，采用内嵌式的Jetty作为HTTP服务器，它的主要作用在于，可以在集成测试时，用来模拟第三方Web服务的API行为，比如，目前比较流行的RESTful架构风格的Web服务。&lt;/p&gt;
&lt;h2 id=&quot;为什么使用Stubby4J？&quot;&gt;&lt;a href=&quot;#为什么使用Stubby4J？&quot; class=&quot;headerlink&quot; title=&quot;为什么使用Stubby4J？&quot;&gt;&lt;/a&gt;为什么使用Stubby4J？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;模拟HTTP请求，Stub第三方API的返回数据&lt;/li&gt;
&lt;li&gt;在写集成测试时，Mock第三方API更加便捷&lt;/li&gt;
&lt;li&gt;能够验证发送的所有参数并指定详细返回数据&lt;/li&gt;
&lt;li&gt;目前支持所有HTTP方法：GET, POST, PUT, PATCH, DELETE, HEAD等&lt;/li&gt;
&lt;li&gt;支持HTTP和HTTPS协议，同时可模拟返回的错误码&lt;/li&gt;
&lt;li&gt;在性能测试和稳定性测试时，支持定义延时返回&lt;/li&gt;
&lt;li&gt;使用相对简单，配置非常便捷，启动也很快速&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;如何使用Stubby4J？&quot;&gt;&lt;a href=&quot;#如何使用Stubby4J？&quot; class=&quot;headerlink&quot; title=&quot;如何使用Stubby4J？&quot;&gt;&lt;/a&gt;如何使用Stubby4J？&lt;/h2&gt;&lt;h4 id=&quot;命令行快速启动&quot;&gt;&lt;a href=&quot;#命令行快速启动&quot; class=&quot;headerlink&quot; title=&quot;命令行快速启动&quot;&gt;&lt;/a&gt;命令行快速启动&lt;/h4&gt;&lt;p&gt;首先需要&lt;a href=&quot;http://search.maven.org/remotecontent?filepath=by/stub/stubby4j/3.3.0/stubby4j-3.3.0.jar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载JAR包&lt;/a&gt;，假设本地已经安装了Java，然后在本地创建一个名为&lt;code&gt;cfg.yml&lt;/code&gt;的文件：&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;figcaption&gt;&lt;span&gt;cfg.yml&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- request:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    method:&lt;/span&gt; GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    url:&lt;/span&gt; /hello-world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  response:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    status:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    headers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        Content-Type:&lt;/span&gt; application/json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    body:&lt;/span&gt; Hello World!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行如下命令启动Stubby4J:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ java -jar stubby4j-3.3.0.jar &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; cfg.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Loaded: [GET] /hello-world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Admin portal configured at http://localhost:8889&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Admin portal status enabled at http://localhost:8889/status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stubs portal configured at http://localhost:8882&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Stubs portal configured with TLS at https://localhost:7443 using internal keystore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Jetty successfully started&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后访问&lt;a href=&quot;http://localhost:8882/hello-world&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8882/hello-world&lt;/a&gt;可以看到返回的&lt;code&gt;Hello World!&lt;/code&gt;字样。&lt;/p&gt;
&lt;p&gt;如果需要进入Admin Portal，可以访问&lt;a href=&quot;http://localhost:8889/status&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8889/status&lt;/a&gt;查看Stub的数据。&lt;/p&gt;
&lt;p&gt;更多命令行使用方式：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;usage:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       java -jar stubby4j-x.x.xx.jar [&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; &amp;lt;arg&amp;gt;] [&lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &amp;lt;arg&amp;gt;] [-da] [-ds]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [-h] [-k &amp;lt;arg&amp;gt;] [&lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; &amp;lt;arg&amp;gt;] [-m] [-o] [-p &amp;lt;arg&amp;gt;] [&lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; &amp;lt;arg&amp;gt;] [-t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;lt;arg&amp;gt;] [-v] [-w]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;,--admin &amp;lt;arg&amp;gt;             Port &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; admin portal. Defaults to 8889.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;,--data &amp;lt;arg&amp;gt;              Data file to pre-load endpoints. Valid YAML&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              1.1 expected.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -da,--disable_admin_portal   Does not start Admin portal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -ds,--disable_ssl            Does not &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt; SSL connections&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -h,--help                    This &lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt; text.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -k,--keystore &amp;lt;arg&amp;gt;          Keystore file &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; custom TLS. By default TLS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              is enabled using internal keystore.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt;,--location &amp;lt;arg&amp;gt;          Hostname at &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; to &lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt; stubby.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -m,--mute                    Mute console output.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -o,--debug                   Dumps raw HTTP request to the console (&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              console is not muted!).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -p,--password &amp;lt;arg&amp;gt;          Password &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the provided keystore file.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt;,--stubs &amp;lt;arg&amp;gt;             Port &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; stub portal. Defaults to 8882.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -t,--tls &amp;lt;arg&amp;gt;               Port &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; TLS connection. Defaults to 7443.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -v,--version                 Prints out to console stubby version.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -w,--watch                   Periodically scans &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; changes &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; last&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              modification date of the main YAML and&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              referenced external files (&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; any). The flag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              can accept an optional arg value &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; is&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              the watch scan time &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; milliseconds. If&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              milliseconds is not provided, the watch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              scans every 100ms. If last modification date&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              changed since the last scan period, the stub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              configuration is reloaded&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;集成测试中的具体应用&quot;&gt;&lt;a href=&quot;#集成测试中的具体应用&quot; class=&quot;headerlink&quot; title=&quot;集成测试中的具体应用&quot;&gt;&lt;/a&gt;集成测试中的具体应用&lt;/h4&gt;&lt;p&gt;首先在Gradle中配置依赖，在&lt;code&gt;build.gradle&lt;/code&gt;中加入其依赖，只会在集成测试时使用，所以只需要加入&lt;code&gt;testCompile&lt;/code&gt;即可：&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;testCompile &lt;span class=&quot;string&quot;&gt;&#39;by.stub:stubby4j:3.3.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后需要在加载应用程序Context前启动Stubby4J，常用启动stubby4j的方法如下:&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;startJetty(&quot;stubby4j.yml&quot;)  # localhost默认端口: Stubs(8882), Admin(8889) and SslStubs portals(7443) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;startJetty(8882, &quot;stubby4j.yml&quot;) # 可以指定Stubs端口，其它为默认值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;startJetty(8882, 8889, &quot;stubby4j.yml&quot;) # 可以指定Stubs和Admin端口，其它为默认值&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在集成测试启动之前执行&lt;code&gt;startJetty&lt;/code&gt;，需要在其Base父类中加入以下代码：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; StubbyClient API_STUB = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StubbyClient();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@BeforeClass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;startUp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	API_STUB.startJetty(&lt;span class=&quot;number&quot;&gt;8882&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClassPathResource(&lt;span class=&quot;string&quot;&gt;&quot;api/stubby4j.yml&quot;&lt;/span&gt;).getFile().getAbsolutePath());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;api/stubby4j.yml&lt;/code&gt;文件位于集成测试代码的&lt;code&gt;resources&lt;/code&gt;目录下。&lt;/p&gt;
&lt;p&gt;在集成测试运行完成后需要停止stubby4j服务&lt;code&gt;stopJetty&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@AfterClass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;shutDown&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	API_STUB.stopJetty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体示例可参阅GitHub Demo: &lt;a href=&quot;https://github.com/Waterstrong/service-stubmock/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;service-stubmock stubby4j&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;基于YAML文件的示例&quot;&gt;&lt;a href=&quot;#基于YAML文件的示例&quot; class=&quot;headerlink&quot; title=&quot;基于YAML文件的示例&quot;&gt;&lt;/a&gt;基于YAML文件的示例&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;示例一：模拟GET请求并返回Json格式Payload&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- request:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    method:&lt;/span&gt; GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    url:&lt;/span&gt; ^/users/&lt;span class=&quot;number&quot;&gt;111&lt;/span&gt;$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  response:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    status:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    headers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        content-type:&lt;/span&gt; application/json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    body:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&quot;userId&quot;: 111, &quot;userName&quot;: &quot;Peter&quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;- request:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    method:&lt;/span&gt; GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    url:&lt;/span&gt; /users/&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  response:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    status:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;404&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中的&lt;code&gt;request:url&lt;/code&gt;支持正则表达式，比如&lt;code&gt;^/[a-z]{3}-[a-z]{3}/[0-9]{2}/[A-Z]{2}/[a-z0-9]+$&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例二：在request时指定多个methods&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- request:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    url:&lt;/span&gt; /anything&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    method:&lt;/span&gt; [GET, HEAD]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- request:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    url:&lt;/span&gt; /anything&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    method:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; HEAD&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例三：可以指定查询参数&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- request:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    url:&lt;/span&gt; ^/with/parameters$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    method:&lt;/span&gt; GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    query:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        search:&lt;/span&gt; search terms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        filter:&lt;/span&gt; month&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;query&lt;/code&gt;中的元素会匹配&lt;code&gt;url&lt;/code&gt;后的查询参数&lt;code&gt;?key1=value1&amp;amp;key2=value2&lt;/code&gt;，并且任意顺序都可以被匹配到，以下两组URL都会被匹配到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/with/parameters?search=search+terms&amp;amp;filter=month&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/with/parameters?filter=month&amp;amp;search=search+terms&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果查询参数只有KEY没有VALUE，则匹配时URL需要给定KEY，Payload如下：&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- request:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    url:&lt;/span&gt; ^/with/parameters$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    method:&lt;/span&gt; GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    query:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        search:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        filter:&lt;/span&gt; month&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;则以下两组URL都会被匹配到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/with/parameters?search&amp;amp;filter=month&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/with/parameters?search=&amp;amp;filter=month&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例四：POST时指定发送的Payload&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- request:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    url:&lt;/span&gt; ^/path/to/something$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    method:&lt;/span&gt; POST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    headers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        Content-Type:&lt;/span&gt; application/json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        authorization-basic:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;bob:password&quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        x-custom-header:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;^this/is/\d/test&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    post:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&quot;key&quot;: value, &quot;data&quot;: &quot;content&quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;  response:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    headers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        Content-Type:&lt;/span&gt; application/json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    status:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;201&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    body:&lt;/span&gt; Your request was successfully processed!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例五：返回的Response是Json文件&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;- request:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    method:&lt;/span&gt; GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    url:&lt;/span&gt; /users/&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  response:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    status:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    headers:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        Content-Type:&lt;/span&gt; application/json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    file:&lt;/span&gt; json/users-response.json&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中的file路径是当前YAML文件的相对路径。&lt;/p&gt;
&lt;p&gt;Request和Response的Payload除了使用JSON外，还可以使用XML格式或直接使用文本，另外配置文件除了使用YAML格式外，也可以合适JSON格式。更多示例可以参考&lt;a href=&quot;https://github.com/azagniotov/stubby4j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github stubby4j&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/azagniotov/stubby4j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github stubby4j&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Stubby4J一款灵活可配置的基于HTTP(s)协议测试Web服务交互的工具，采用内嵌式的Jetty作为HTTP服务器，它的主要作用在于，可以在集成测试时，用来模拟第三方Web服务的API行为，比如，目前比较流行的RESTful架构风格的Web服务。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="Stub" scheme="http://blog.waterstrong.me/tags/Stub/"/>
    
      <category term="Mock" scheme="http://blog.waterstrong.me/tags/Mock/"/>
    
      <category term="HTTP" scheme="http://blog.waterstrong.me/tags/HTTP/"/>
    
      <category term="集成测试" scheme="http://blog.waterstrong.me/tags/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
