<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Watersrong Blog</title>
  <subtitle>Enjoy this moment!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.waterstrong.me/"/>
  <updated>2016-08-13T10:33:41.000Z</updated>
  <id>http://blog.waterstrong.me/</id>
  
  <author>
    <name>Waterstrong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java Checkstyle in Gradle</title>
    <link href="http://blog.waterstrong.me/java-checkstyle/"/>
    <id>http://blog.waterstrong.me/java-checkstyle/</id>
    <published>2016-08-11T14:31:37.000Z</published>
    <updated>2016-08-13T10:33:41.000Z</updated>
    
    <content type="html">&lt;p&gt;Checkstyle是一个帮助Java开发者遵守某些编码规范的工具，它能够自动化代码规范检查过程，从而使得开发者从这项重要但枯燥的任务中解脱出来，Checkstyle通常适合那些需要强制执行编码规范标准的项目。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Checkstyle is a development tool to help programmers write Java code that adheres to a coding standard. It automates the process of checking Java code to spare humans of this boring (but important) task. This makes it ideal for projects that want to enforce a coding standard.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常的检查项目包括Javadoc注释、命名约定、Title标题、Import语句、文件大小、空白、修饰符、代码块、类设计、混合检查等。可以阅读&lt;a href=&quot;http://checkstyle.sourceforge.net/checks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Checkstyle Checks&lt;/a&gt;了解更多。&lt;/p&gt;
&lt;p&gt;在Gradle中，实现对Java的编码规范检查，只需要三步即可：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1) 在&lt;code&gt;build.gradle&lt;/code&gt;中引入Checkstyle插件&lt;code&gt;apply plugin: &amp;#39;checkstyle&amp;#39;&lt;/code&gt;，默认执行check会触发编码规范检查&lt;code&gt;checkstyleMain&lt;/code&gt;和&lt;code&gt;checkstyleTest&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2) 在项目目录下添加默认的文件夹&lt;code&gt;config/checkstyle&lt;/code&gt;，然后新建默认配置文件&lt;code&gt;checkstyle.xml&lt;/code&gt;文件，并配置编码规范检查规则，比如这里给出一个编码规范配置的示例：&lt;a href=&quot;/assets/java-checkstyle/checkstyle.xml&quot;&gt;checkstyle.xml&lt;/a&gt;，对于每个Module的解释可以在&lt;a href=&quot;http://checkstyle.sourceforge.net/checks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Checks&lt;/a&gt;中找到。&lt;br&gt;当然，除了使用默认文件名外，也可以在&lt;code&gt;build.gradle&lt;/code&gt;中自定义规范检查的配置文件，并且可以针对Main和Test类代码的编码规范分别配置，因为通常对Test类代码的编码规范检查并没有那么严格。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;checkstyle &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	configProperties.rootDir = project.projectDir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	checkstyleMain.configFile = new File(project.projectDir, &amp;apos;/config/checkstyle/checkstyle-main.xml&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	checkstyleTest.configFile = new File(project.projectDir, &amp;apos;/config/checkstyle/checkstyle-test.xml&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3) 在同一目录下新建默认忽略检查规范的文件&lt;code&gt;suppressions.xml&lt;/code&gt;，可以配置忽略对某个文件的某个规则的检查，比如一个配置示例：&lt;a href=&quot;/assets/java-checkstyle/suppressions.xml&quot;&gt;suppressions.xml&lt;/a&gt;。&lt;br&gt;该&lt;code&gt;suppressions.xml&lt;/code&gt;需要在&lt;code&gt;checkstyle.xml&lt;/code&gt;文件中配置，另外，也可以配置&lt;code&gt;class-header.txt&lt;/code&gt;文件来要求每个类都包括header信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;module name=&amp;quot;Checker&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;module name=&amp;quot;SuppressionFilter&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;property name=&amp;quot;file&amp;quot; value=&amp;quot;$&amp;#123;rootDir&amp;#125;/config/checkstyle/suppressions.xml&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;module name=&amp;quot;RegexpHeader&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;lt;property name=&amp;quot;headerFile&amp;quot; value=&amp;quot;$&amp;#123;rootDir&amp;#125;/config/checkstyle/class-header.txt&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;module name=&amp;quot;TreeWalker&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;lt;property name=&amp;quot;cacheFile&amp;quot; value=&amp;quot;$&amp;#123;rootDir&amp;#125;/config/checkstyle/main.cache&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;lt;module name=&amp;quot;ImportControl&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&amp;lt;property name=&amp;quot;file&amp;quot; value=&amp;quot;$&amp;#123;rootDir&amp;#125;/config/checkstyle/import-control.xml&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;lt;/module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OK，配置完成后可以放心写代码了，再也不用担心团队成员编码规范不统一的问题了，Enjoy~&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://checkstyle.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sourceforge Checkstyle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://checkstyle.sourceforge.net/reports/google-java-style.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Java Style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/checkstyle_plugin.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Checkstyle Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Checkstyle是一个帮助Java开发者遵守某些编码规范的工具，它能够自动化代码规范检查过程，从而使得开发者从这项重要但枯燥的任务中解脱出来，Checkstyle通常适合那些需要强制执行编码规范标准的项目。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="Java" scheme="http://blog.waterstrong.me/tags/Java/"/>
    
      <category term="Checkstyle" scheme="http://blog.waterstrong.me/tags/Checkstyle/"/>
    
  </entry>
  
  <entry>
    <title>Java Code Coverage in Gradle</title>
    <link href="http://blog.waterstrong.me/java-code-coverage/"/>
    <id>http://blog.waterstrong.me/java-code-coverage/</id>
    <published>2016-07-31T11:53:11.000Z</published>
    <updated>2016-08-07T03:42:36.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Code-Coverage介绍&quot;&gt;&lt;a href=&quot;#Code-Coverage介绍&quot; class=&quot;headerlink&quot; title=&quot;Code Coverage介绍&quot;&gt;&lt;/a&gt;Code Coverage介绍&lt;/h2&gt;&lt;h3 id=&quot;什么是代码覆盖率？&quot;&gt;&lt;a href=&quot;#什么是代码覆盖率？&quot; class=&quot;headerlink&quot; title=&quot;什么是代码覆盖率？&quot;&gt;&lt;/a&gt;什么是代码覆盖率？&lt;/h3&gt;&lt;p&gt;代码覆盖率是用于衡量源代码被测试粒度和程度的，在一定程序上能够衡量代码质量，通常作为发现未被测试覆盖的代码的一种手段，可以直接反映部分测试遗漏点。&lt;/p&gt;
&lt;p&gt;覆盖率主要用于尽可能减少代码Defects和Bugs及降低出错风险，较高的测试覆盖率能够增加开发人员的信心，但并不代表代码测试覆盖率越高越好，也不需要实现100%的覆盖率，并且这也很难实现，通常对核心逻辑才会增加测试粒度，根据经验值，覆盖率在85%左右为宜，即增加团队成员信心，也减少不必要的工作量。&lt;/p&gt;
&lt;p&gt;另外，代码覆盖率粒度通常分为类(Class)、方法(Method)、块(Block)、分支(Branch)、行(Line)、指令(instruction)以圈(complexity)覆盖。&lt;/p&gt;
&lt;p&gt;需要注意的是，不应把测试覆盖率作为代码质量唯一指标，而应作为发现未被测试覆盖的代码的手段，并且代码覆盖率不能完全作为衡量代码质量的标准。&lt;/p&gt;
&lt;h3 id=&quot;代码覆盖率统计原理&quot;&gt;&lt;a href=&quot;#代码覆盖率统计原理&quot; class=&quot;headerlink&quot; title=&quot;代码覆盖率统计原理&quot;&gt;&lt;/a&gt;代码覆盖率统计原理&lt;/h3&gt;&lt;p&gt;主流代码覆盖率工具都采用字节码插桩模式，通过钩子的方式来记录代码执行轨迹信息。以Java为例，目前常用的工具为Jacoco和Cobertura，其对字节码进行插桩，主要分为on-the-fly和offine两种模式。一般的过程为：首先执行测试用例，收集程序执行轨迹信息，并存入内存中，然后数据处理器结合程序执行轨迹信息和代码结构信息分析生成代码覆盖率报告，最后将代码覆盖率报告以图形化方式展示出来。&lt;/p&gt;
&lt;h4 id=&quot;On-The-Fly插桩&quot;&gt;&lt;a href=&quot;#On-The-Fly插桩&quot; class=&quot;headerlink&quot; title=&quot;On-The-Fly插桩&quot;&gt;&lt;/a&gt;On-The-Fly插桩&lt;/h4&gt;&lt;p&gt;On-The_Fly也可分为基于Java Agent和Class Loader两种方式。&lt;/p&gt;
&lt;p&gt;Java Agent原理如下: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JVM中通过&lt;code&gt;-javaagent&lt;/code&gt;参数指定特定的jar文件启动Instrumentation的代理程序&lt;/li&gt;
&lt;li&gt;代理程序在每装载一个class文件前判断是否已经转换修改了该文件，如果没有则需要将探针插入class文件中&lt;/li&gt;
&lt;li&gt;代码覆盖率就可以在JVM执行代码的时候实时获取&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Class Loader原理为：自定义Class Loader实现自己的类装载策略，在类加载之前将探针插入class文件中。&lt;/p&gt;
&lt;p&gt;On-The-Fly模式优点在于无需修改源代码，无需提前进行字节码插桩，更加方便的获取代码覆盖率，可以在系统不停机的情况下，实时获取和收集代码覆盖率信息。&lt;/p&gt;
&lt;h4 id=&quot;Offline插桩&quot;&gt;&lt;a href=&quot;#Offline插桩&quot; class=&quot;headerlink&quot; title=&quot;Offline插桩&quot;&gt;&lt;/a&gt;Offline插桩&lt;/h4&gt;&lt;p&gt;在测试之前先对文件进行插桩，生成插过桩的class文件或者jar包，执行插过桩的class文件或者jar包之后，会生成覆盖率信息到文件，最后统一对覆盖率信息进行处理，并生成报告。Offline插桩又分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Replace：替换方式，修改字节码生成新的class文件&lt;/li&gt;
&lt;li&gt;Inject：注入方式，在原有字节码文件上进行修改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Offine模式优点在于系统启动不需要额外开启代理，但只能在系统停机的情况下才能获取代码覆盖率。Offline模式适用于以下场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行环境不支持Java Agent&lt;/li&gt;
&lt;li&gt;部署环境不允许设置JVM参数&lt;/li&gt;
&lt;li&gt;字节码需要被转换成其他虚拟机字节码&lt;/li&gt;
&lt;li&gt;动态修改字节码过程中和其他Agent冲突&lt;/li&gt;
&lt;li&gt;无法自定义用户加载类&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;在Java中应用Code-Coverage&quot;&gt;&lt;a href=&quot;#在Java中应用Code-Coverage&quot; class=&quot;headerlink&quot; title=&quot;在Java中应用Code Coverage&quot;&gt;&lt;/a&gt;在Java中应用Code Coverage&lt;/h2&gt;&lt;p&gt;本博客将主要讲解如何在Java中实现对代码测试覆盖统计和检查，采用Gradle构建工具，以Jacoco和Cobertura覆盖率工具为例，分别给出实现步骤和代码。&lt;/p&gt;
&lt;h3 id=&quot;Gradle-Jacoco&quot;&gt;&lt;a href=&quot;#Gradle-Jacoco&quot; class=&quot;headerlink&quot; title=&quot;Gradle + Jacoco&quot;&gt;&lt;/a&gt;Gradle + Jacoco&lt;/h3&gt;&lt;p&gt;Jacoco是开源的Java代码测试覆盖率检查工具，使用ASM修改字节码，插桩主要基于对字节码的on-the-fly和offline的方式，支持提供method, class, line, branch, instruction以及complexity的覆盖率报告。接下来将讲解如何在Gradle中配置Jacoco，实现对Java代码的测试覆盖率检查。&lt;/p&gt;
&lt;h4 id=&quot;Apply-Jacoco-Plugin&quot;&gt;&lt;a href=&quot;#Apply-Jacoco-Plugin&quot; class=&quot;headerlink&quot; title=&quot;Apply Jacoco Plugin&quot;&gt;&lt;/a&gt;Apply Jacoco Plugin&lt;/h4&gt;&lt;p&gt;首先，新建一个名为&lt;a href=&quot;/assets/java-code-coverage/jacoco.gradle&quot;&gt;jacoco.gradle&lt;/a&gt;的文件，并加入以下脚本代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;jacoco&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    limits = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;apos;instruction&amp;apos;: 95,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;apos;branch&amp;apos;     : 90,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;apos;line&amp;apos;       : 90,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;apos;complexity&amp;apos; : 90,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;apos;method&amp;apos;     : 95,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;apos;class&amp;apos;      : 95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jacocoTestReport &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    group = &amp;quot;Reporting&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    description = &amp;quot;Generate and check jacoco coverage reports after running tests.&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reports &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xml.enabled true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        html.enabled true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        csv.enabled false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    afterEvaluate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classDirectories = files(classDirectories.files.collect &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fileTree(dir: it, exclude: [&amp;apos;**/Application**&amp;apos;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    doLast &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new TestCoverage(jacoco).check(limits)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;check.dependsOn jacocoTestReport&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;limits&lt;/code&gt;用于配置代码覆盖率检查满足的最小阈值，可以根据项目需要自定义修改，在&lt;code&gt;exclude&lt;/code&gt;中也可以配置不接收覆盖率检查的Package或Class。&lt;/p&gt;
&lt;h4 id=&quot;Create-TestCoverage-Class&quot;&gt;&lt;a href=&quot;#Create-TestCoverage-Class&quot; class=&quot;headerlink&quot; title=&quot;Create TestCoverage Class&quot;&gt;&lt;/a&gt;Create TestCoverage Class&lt;/h4&gt;&lt;p&gt;另外，还需要创建一个用于测试覆盖率检查的类，可以在&lt;a href=&quot;/assets/java-code-coverage/jacoco.gradle&quot;&gt;jacoco.gradle&lt;/a&gt;中追加以下代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import org.slf4j.Logger&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import static org.slf4j.LoggerFactory.getLogger&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class TestCoverage &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static Logger logger = getLogger(TestCoverage.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def xmlReport&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def htmlReport&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def metrics&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TestCoverage(jacoco) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xmlReport = new File(&amp;quot;$&amp;#123;jacoco.reportsDir&amp;#125;/test/jacocoTestReport.xml&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        htmlReport = new File(&amp;quot;$&amp;#123;jacoco.reportsDir&amp;#125;/test/html/index.html&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        initMetrics()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void check(limits) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logger.lifecycle(&amp;quot;Checking coverage results: $&amp;#123;xmlReport&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logger.lifecycle(&amp;quot;Html report: $&amp;#123;htmlReport&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        showResult checkMetrics(limits)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void showResult(failures, improvements) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (failures) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logger.quiet(&amp;quot;--------------------- Jacoco Code Coverage Failed ---------------------&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            failures.each &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                logger.quiet(it)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logger.quiet(&amp;quot;-----------------------------------------------------------------------&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            throw new GradleException(&amp;quot;Jacoco Code coverage failed&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (improvements) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logger.quiet(&amp;quot;-------------------- Jacoco Code Coverage Improved --------------------&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            improvements.each &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                logger.quiet(it)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logger.quiet(&amp;quot;-----------------------------------------------------------------------&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private List checkMetrics(limits) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        def failures = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        def improvements = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        metrics.each &amp;#123; key, value -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            def limit = limits[key] as Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (value &amp;lt; limit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                failures.add(&amp;quot;- $&amp;#123;key&amp;#125; coverage rate is: $&amp;#123;value&amp;#125;%, minimum is $&amp;#123;limit&amp;#125;%&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (value &amp;gt; limit + 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                improvements.add(&amp;quot;- $key coverage rate is: $&amp;#123;value&amp;#125;%, minimum is $&amp;#123;limit&amp;#125;%&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [failures, improvements]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void initMetrics() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        def parser = new XmlParser()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parser.setFeature(&amp;quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&amp;quot;, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parser.setFeature(&amp;quot;http://apache.org/xml/features/disallow-doctype-decl&amp;quot;, false)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        def counters = parser.parse(xmlReport).counter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        def percentage = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            def covered = it ? it.&amp;apos;@covered&amp;apos; as Double : 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            def missed = it ? it.&amp;apos;@missed&amp;apos; as Double : 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ((covered / (covered + missed)) * 100).round(2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        metrics = [:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        metrics &amp;lt;&amp;lt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;apos;instruction&amp;apos;: percentage(counters.find &amp;#123; it.&amp;apos;@type&amp;apos;.equals(&amp;apos;INSTRUCTION&amp;apos;) &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;apos;branch&amp;apos;     : percentage(counters.find &amp;#123; it.&amp;apos;@type&amp;apos;.equals(&amp;apos;BRANCH&amp;apos;) &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;apos;line&amp;apos;       : percentage(counters.find &amp;#123; it.&amp;apos;@type&amp;apos;.equals(&amp;apos;LINE&amp;apos;) &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;apos;complexity&amp;apos; : percentage(counters.find &amp;#123; it.&amp;apos;@type&amp;apos;.equals(&amp;apos;COMPLEXITY&amp;apos;) &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;apos;method&amp;apos;     : percentage(counters.find &amp;#123; it.&amp;apos;@type&amp;apos;.equals(&amp;apos;METHOD&amp;apos;) &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;apos;class&amp;apos;      : percentage(counters.find &amp;#123; it.&amp;apos;@type&amp;apos;.equals(&amp;apos;CLASS&amp;apos;) &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Use-Custom-Jacoco-Script&quot;&gt;&lt;a href=&quot;#Use-Custom-Jacoco-Script&quot; class=&quot;headerlink&quot; title=&quot;Use Custom Jacoco Script&quot;&gt;&lt;/a&gt;Use Custom Jacoco Script&lt;/h4&gt;&lt;p&gt;最后需要在&lt;code&gt;build.gradle&lt;/code&gt;中引用自定义脚本和依赖：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply from: &amp;apos;jacoco.gradle&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testRuntime &amp;apos;org.slf4j:slf4j-api:1.7.21&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在命令行中运行&lt;code&gt;./gradlew build&lt;/code&gt;可以生成代码覆盖率报告并检查覆盖率是否通过。&lt;br&gt;&lt;img src=&quot;/assets/java-code-coverage/jacoco_console.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/assets/java-code-coverage/jacoco_report.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Gradle-Cobertura&quot;&gt;&lt;a href=&quot;#Gradle-Cobertura&quot; class=&quot;headerlink&quot; title=&quot;Gradle + Cobertura&quot;&gt;&lt;/a&gt;Gradle + Cobertura&lt;/h3&gt;&lt;p&gt;Cobertura是开源的Java代码测试覆盖率检查工具，它主要基于对字节码offline插桩的方式实现，支持提供branch和line覆盖率报告。接下来将讲解如何在Gradle中使用Cobertura，并配置实现对Java代码的测试覆盖率检查。&lt;/p&gt;
&lt;h4 id=&quot;Apply-Cobertura-Plugin&quot;&gt;&lt;a href=&quot;#Apply-Cobertura-Plugin&quot; class=&quot;headerlink&quot; title=&quot;Apply Cobertura Plugin&quot;&gt;&lt;/a&gt;Apply Cobertura Plugin&lt;/h4&gt;&lt;p&gt;首先在&lt;code&gt;build.gradle&lt;/code&gt;文件开始处加入构建脚本依赖并引用cobertura插件。一般有两种方式，第一种方式支持在所有版本的Gradle中使用：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &amp;quot;net.saliman:gradle-cobertura-plugin:2.3.2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;net.saliman.cobertura&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第二种方式如下，直接引用plugins DSL的机制，但只支持在Gradle 2.1及以后的版本使用，但特别注意，该script代码只能放在&lt;code&gt;buildscript&lt;/code&gt;之后，其他script代码之前：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;plugins &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id &amp;apos;net.saliman.cobertura&amp;apos; version &amp;apos;2.3.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后可以在同一脚本&lt;code&gt;build.gradle&lt;/code&gt;文件中或另外新增一个名为&lt;a href=&quot;/assets/java-code-coverage/cobertura.gradle&quot;&gt;cobertura.gradle&lt;/a&gt;的脚本，并写入如下代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cobertura &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageFormats = [&amp;apos;html&amp;apos;, &amp;apos;xml&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageEncoding = &amp;apos;UTF-8&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageExcludes = [&amp;apos;.*Application.*&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageIgnoreMethodAnnotations = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckBranchRate = 90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckLineRate = 90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckPackageBranchRate = 90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckPackageLineRate = 90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckTotalBranchRate = 90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckTotalLineRate = 90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageIgnoreTrivial = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    coverageCheckHaltOnFailure = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;check.dependsOn &amp;apos;coberturaCheck&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后，简单写一些测试代码，在命令行中运行&lt;code&gt;./gradlew clean build&lt;/code&gt;来查看代码覆盖率检查是否配置成功，默认cobertura生成的报告在当前项目的&lt;code&gt;build/reports/cobertura/&lt;/code&gt;下，可以查看&lt;code&gt;index.html&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/java-code-coverage/cobertura_report.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;另外，如果在项目中使用cobertura作为代码测试覆盖率检查工具，但未使用&lt;a href=&quot;http://www.slf4j.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SLF4J&lt;/a&gt;日志库，在运行时会报出关于slf4j的&lt;code&gt;NoClassDefFoundError&lt;/code&gt;问题，只需要在&lt;code&gt;build.gradle&lt;/code&gt;中添加testRuntime的依赖即可：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testRuntime &amp;apos;org.slf4j:slf4j-api:1.7.21&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Cobertura-Configuration&quot;&gt;&lt;a href=&quot;#Cobertura-Configuration&quot; class=&quot;headerlink&quot; title=&quot;Cobertura Configuration&quot;&gt;&lt;/a&gt;Cobertura Configuration&lt;/h4&gt;&lt;p&gt;Cobertura的行为是由&lt;code&gt;cobertura&lt;/code&gt;块中的设置选项控制的，以下将列举常用的选项并简单解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;coberturaVersion = &amp;lt;version&amp;gt;&lt;/code&gt;: 指定使用哪个版本的Cobertura来Run测试覆盖率报告，默认值为2.1.1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageDirs = [ &amp;lt;dirnames&amp;gt; ]&lt;/code&gt;: 指定包含代码覆盖率检查的一个或多个Class目录，默认为[ project.sourceSets.main.classesDir.path ]。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageReportDir = &amp;lt;dir&amp;gt;&lt;/code&gt;: 代码覆盖率报告生成目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageFormats = [ &amp;lt;formats&amp;gt; ]&lt;/code&gt;: 指定Cobertura生成报告的格式，支持&lt;code&gt;html&lt;/code&gt;和&lt;code&gt;xml&lt;/code&gt;，默认为html。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageEncoding&lt;/code&gt;: 生成覆盖率报告时的编码，比如&lt;code&gt;UTF-8&lt;/code&gt;，如果未设置将自动跟随操作系统编码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageSourceDirs = &amp;lt;set of directories&amp;gt;&lt;/code&gt;: 指定需要进行覆盖率检查以及将include在报告中的源文件，默认为project.sourceSets.main.java.srcDirs, project.sourceSets.main.groovy.srcDirs和project.sourceSets.main.scala.srcDirs。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageIncludes = [ &amp;lt;regexes&amp;gt; ]&lt;/code&gt;: 指定包含满足正则表达式的类文件，比如&lt;code&gt;coverageIncludes = [&amp;#39;.*net.saliman.someapp.logger.*&amp;#39;]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageExcludes = [ &amp;lt;regexes&amp;gt; ]&lt;/code&gt;: 指定不需要进行覆盖检查的类文件，比如&lt;code&gt;coverageExcludes = [&amp;#39;.*net.saliman.someapp.logger.*&amp;#39;]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageIgnores = [ &amp;lt;regexes&amp;gt; ]&lt;/code&gt;: 指定在源代码级别忽略的正则表达语句，比如一些用于日志记录的代码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageIgnoreTrivial = &amp;lt;true|false&amp;gt;&lt;/code&gt;: 在版本2.0中的新选项，指定是否忽略简单的getters和setters，默认为false。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageIgnoreMethodAnnotations = [ &amp;lt;annotations&amp;gt; ]&lt;/code&gt;: 在2.0版本中，可以指定忽略的方法级注解。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckBranchRate = &amp;lt;percent&amp;gt;&lt;/code&gt;: 指定每个Class的分支覆盖率阈值，0~100的整型值，在运行&lt;code&gt;coberturaCheck&lt;/code&gt;时有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckLineRate = &amp;lt;percent&amp;gt;&lt;/code&gt;: 指定每个Class的行覆盖率阈值，其余同上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckPackageBranchRate = &amp;lt;percent&amp;gt;&lt;/code&gt;: 指定每个Packge的分支覆盖率阈值，其余同上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckPackageLineRate = &amp;lt;percent&amp;gt;&lt;/code&gt;: 指定每个Packge的行覆盖率阈值，其余同上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckTotalBranchRate = &amp;lt;percent&amp;gt;&lt;/code&gt;: 指定整体分支覆盖率阈值，其余同上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckTotalLineRate = &amp;lt;percent&amp;gt;&lt;/code&gt;: 指定整体行覆盖率阈值，其余同上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckRegexes = [ &amp;lt;regexes&amp;gt; ]&lt;/code&gt;: 用于更细粒度的控制，可以指定每个独立类的分支和行覆盖率阈值，每个表达式包含三个键值对，比如:&lt;code&gt;coverageCheckRegexes = [ [ regex: &amp;#39;com.example.reallyimportant.*&amp;#39;, branchRate: 80, lineRate: 90 ], [ regex: &amp;#39;com.example.boringcode.*&amp;#39;, branchRate: 40, lineRate: 30 ] ]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageCheckHaltOnFailure = &amp;lt;true|false&amp;gt;&lt;/code&gt;: 指定&lt;code&gt;coberturaCheck&lt;/code&gt;在不满足最小覆盖率时是否失败的开关，默认为false。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Cobertura-Tasks&quot;&gt;&lt;a href=&quot;#Cobertura-Tasks&quot; class=&quot;headerlink&quot; title=&quot;Cobertura Tasks&quot;&gt;&lt;/a&gt;Cobertura Tasks&lt;/h4&gt;&lt;p&gt;Cobertura创建了三个Tasks用于生成和检查覆盖率报告：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;coberturaReport&lt;/code&gt;: 只用于在测试后生成覆盖率报告，该Task不会触发运行测试，需要Gradle单独处理test，通常用于multi-project中需要合并测试报告的情况。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cobertura&lt;/code&gt;: 运行&lt;code&gt;test&lt;/code&gt;任务并生成覆盖率报告，包含了&lt;code&gt;coberturaReport&lt;/code&gt;任务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coberturaCheck&lt;/code&gt;: 在生成覆盖率报告后进行覆盖率检查，但不会运行test。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果需要了解更多，可以参阅&lt;a href=&quot;https://github.com/stevesaliman/gradle-cobertura-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Cobertura Plugin&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Jacoco-vs-Cobertura&quot;&gt;&lt;a href=&quot;#Jacoco-vs-Cobertura&quot; class=&quot;headerlink&quot; title=&quot;Jacoco vs Cobertura&quot;&gt;&lt;/a&gt;Jacoco vs Cobertura&lt;/h3&gt;&lt;p&gt;Jacoco与Cobertura的区别在于插桩的方式，前者是off-line和on-the-fly，而后者只是off-line，Jacoco支持的覆盖率粒度要多于Cobertura(只支持line和branch)，二者都支持&lt;a href=&quot;http://www.sonarqube.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SonarQube&lt;/a&gt;集成，报告都支持HTML和XML格式，Jacoco性能要略优于Cobertura。另外，目前Cobertura2.3版本对Java1.8支持不太好，在使用过程中会遇到ParseException的错误。&lt;/p&gt;
&lt;p&gt;更多对比请参阅&lt;a href=&quot;https://confluence.atlassian.com/display/CLOVER/Comparison+of+code+coverage+tools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Comparison of code coverage tools&lt;/a&gt;和&lt;a href=&quot;https://onlysoftware.wordpress.com/2012/12/19/code-coverage-tools-jacoco-cobertura-emma-comparison-in-sonar/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code Coverage Tools Comparison in Sonar&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;The-End&quot;&gt;&lt;a href=&quot;#The-End&quot; class=&quot;headerlink&quot; title=&quot;The End&quot;&gt;&lt;/a&gt;The End&lt;/h2&gt;&lt;p&gt;总之，在开发过程中进行测试覆盖率检查在一定程度上能够保证代码的质量，可以作为发现未被测试覆盖的代码的一种手段，可以直接反映部分测试遗漏点，从而尽可能减少代码Defects和Bugs及降低出错风险，提高团队成员的信心，至于使用哪种覆盖率工具需要根据项目代码性质决定，大多数情况下建议选择Jacoco。以上就是对Jacoco和Cobertura的基本概念和实践的介绍，现在就可以自己动手试一下吧。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_coverage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code coverage Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Code_Coverage_Tools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java Code Coverage Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/jacoco_plugin.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The JaCoCo Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/springfox/springfox&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;springfox jacoco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://scratchpad.pietschy.com/gradle/logging.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/stevesaliman/gradle-cobertura-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gradle-cobertura-plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://plugins.gradle.org/plugin/net.saliman.cobertura&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;net.saliman.cobertura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://confluence.atlassian.com/display/CLOVER/Comparison+of+code+coverage+tools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Comparison of code coverage tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tuicool.com/articles/aq6rUz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅谈代码覆盖率&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://onlysoftware.wordpress.com/2012/12/19/code-coverage-tools-jacoco-cobertura-emma-comparison-in-sonar/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code Coverage Tools Comparison in Sonar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      代码覆盖率是用于衡量源代码被测试粒度和程度的，在一定程序上能够衡量代码质量，通常作为发现未被测试覆盖的代码的一种手段，可以直接反映部分测试遗漏点。覆盖率主要用于尽可能减少代码缺陷和Bugs及降低出错风险，较高的测试覆盖率能够增加开发人员的信心。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="Java" scheme="http://blog.waterstrong.me/tags/Java/"/>
    
      <category term="Code Coverage" scheme="http://blog.waterstrong.me/tags/Code-Coverage/"/>
    
      <category term="Jacoco" scheme="http://blog.waterstrong.me/tags/Jacoco/"/>
    
      <category term="Cobertura" scheme="http://blog.waterstrong.me/tags/Cobertura/"/>
    
  </entry>
  
  <entry>
    <title>Travis CI Step by Step</title>
    <link href="http://blog.waterstrong.me/travisci-by-step/"/>
    <id>http://blog.waterstrong.me/travisci-by-step/</id>
    <published>2016-07-15T13:57:02.000Z</published>
    <updated>2016-07-27T14:35:18.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Travis-CI介绍&quot;&gt;&lt;a href=&quot;#Travis-CI介绍&quot; class=&quot;headerlink&quot; title=&quot;Travis CI介绍&quot;&gt;&lt;/a&gt;Travis CI介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Travis CI is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Travis CI是一款提供托管与分布式持续集成(Continuous Integration)服务的CI工具，与GitHub高度集成，能够构建和测试托管在GitHub上的软件项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/travisci-by-step/travis_ci_home.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Travis CI主要为开源免费提供轻量级可定制化的持续持续集成环境和服务，而对于非开源项目，会按照相应的标准收取一定的费用。Travis CI不仅支持多种语言，而且支持在容器中运行Builds，与GitHub集成度很好，支持Pull Request等。一般通过简单配置&lt;code&gt;.travis.yml&lt;/code&gt;文件即可使用，也省去了自己搭建和维护CI服务器的繁琐工作，但它不支持pipeline，只能支持简单的构建。&lt;/p&gt;
&lt;h2 id=&quot;Travis-CI集成&quot;&gt;&lt;a href=&quot;#Travis-CI集成&quot; class=&quot;headerlink&quot; title=&quot;Travis CI集成&quot;&gt;&lt;/a&gt;Travis CI集成&lt;/h2&gt;&lt;p&gt;Travis CI与GitHub集成只需要简单的几步即可，通过访问&lt;a href=&quot;https://github.com/integrations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Integrations&lt;/a&gt;搜索&lt;code&gt;Travis CI&lt;/code&gt;选择进入子页面，可以看到对Travis CI的集成的基本介绍。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/integrations.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;GitHub登录授权&quot;&gt;&lt;a href=&quot;#GitHub登录授权&quot; class=&quot;headerlink&quot; title=&quot;GitHub登录授权&quot;&gt;&lt;/a&gt;GitHub登录授权&lt;/h4&gt;&lt;p&gt;Travis CI与GitHub集成需要登录GitHub帐号，一般有两种入口方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;a href=&quot;https://github.com/integrations/travis-ci&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Travis CI Integration&lt;/a&gt;页面中点击&lt;code&gt;Add to GitHub&lt;/code&gt;-&amp;gt;&lt;code&gt;Authorize application&lt;/code&gt;进行授权。&lt;/li&gt;
&lt;li&gt;对于&lt;strong&gt;Public&lt;/strong&gt;项目直接访问&lt;a href=&quot;https://travis-ci.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;travis-ci.org&lt;/a&gt;并登录GitHub帐号授权，而&lt;strong&gt;Private&lt;/strong&gt;项目应访问&lt;a href=&quot;https://travis-ci.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;travis-ci.com&lt;/a&gt;。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/authorize_travis_ci.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，若需要管理Travis CI的权限(Revoke/Grant Access)，可以在登录&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;后点击头像下拉菜单中的&lt;a href=&quot;https://github.com/settings/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Settings&lt;/a&gt;，选择左边导航栏中的&lt;a href=&quot;https://github.com/settings/applications&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OAuth applications&lt;/a&gt;，进入&lt;code&gt;Travis CI&lt;/code&gt;应用进行操作，对于未授权的Organization，通常需要手动点击&lt;code&gt;Grant access&lt;/code&gt;确认才能授权Travis CI访问。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/oauth_travis_ci.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;激活GitHub仓库&quot;&gt;&lt;a href=&quot;#激活GitHub仓库&quot; class=&quot;headerlink&quot; title=&quot;激活GitHub仓库&quot;&gt;&lt;/a&gt;激活GitHub仓库&lt;/h4&gt;&lt;p&gt;Travis CI触发Build的原理是基于GitHub的Service Hook钩子实现，而需要Travis CI应用到自己的项目，需要在Travis CI的&lt;a href=&quot;https://travis-ci.org/profile/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Profile&lt;/a&gt; (&lt;code&gt;Yourname&lt;/code&gt;-&amp;gt;&lt;code&gt;Accounts&lt;/code&gt;)中选择对应的Repository并开启Hook，若没有看到项目列出，请点击&lt;code&gt;Sync account&lt;/code&gt;同步一下。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/hook_switch.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;若需要设定某些配置项或设置环境变量，可以点击齿轮状的按钮进行设置页面，更多可参阅&lt;a href=&quot;https://docs.travis-ci.com/user/cron-jobs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Travis CI Docs&lt;/a&gt;。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/travis_ci_settings.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;配置TRAVIS-YML文件&quot;&gt;&lt;a href=&quot;#配置TRAVIS-YML文件&quot; class=&quot;headerlink&quot; title=&quot;配置TRAVIS YML文件&quot;&gt;&lt;/a&gt;配置TRAVIS YML文件&lt;/h4&gt;&lt;p&gt;Travis CI支持多种语言的项目，只需要在项目目录下新建文件&lt;code&gt;.travis.yml&lt;/code&gt;，加入几行配置即可，比如选择&lt;a href=&quot;https://docs.travis-ci.com/user/languages/java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java&lt;/a&gt;项目(Gradle+Java8)，一个简单的示例配置如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;language: java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;install: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;script: ./gradlew clean build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;before_cache:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - rm -f $HOME/.gradle/caches/modules-2/modules-2.lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cache:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  directories:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - $HOME/.gradle/caches/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - $HOME/.gradle/wrapper/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jdk:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - oraclejdk8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以针对多个Java版本进行测试，保证项目的兼容性，只需要设置jdk即可：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jdk:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - oraclejdk8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - oraclejdk7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - openjdk6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再比如&lt;a href=&quot;https://docs.travis-ci.com/user/languages/javascript-with-nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript Node.js&lt;/a&gt;项目(NodeJs+Gulp+Bower+Redis)的简单示例配置如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;language: node_js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node_js:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - &amp;quot;6&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;before_script:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - npm install -g gulp bower&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - bower install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;script: gulp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;services:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - redis-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另外，也支持&lt;a href=&quot;https://docs.travis-ci.com/user/installing-dependencies/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Installing Dependencies&lt;/a&gt;, &lt;a href=&quot;https://docs.travis-ci.com/user/database-setup/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setting up Databases&lt;/a&gt;, &lt;a href=&quot;https://docs.travis-ci.com/user/deployment/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployments and Uploads&lt;/a&gt;以及&lt;a href=&quot;https://docs.travis-ci.com/user/notifications/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Configuring Build Notifications&lt;/a&gt;等。更多配置项详情请参阅&lt;a href=&quot;https://docs.travis-ci.com/user/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Started&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;触发Build构建&quot;&gt;&lt;a href=&quot;#触发Build构建&quot; class=&quot;headerlink&quot; title=&quot;触发Build构建&quot;&gt;&lt;/a&gt;触发Build构建&lt;/h4&gt;&lt;p&gt;当所有配置完成后，下一次提交代码时就会触发Build，可以看到Build的一些详细信息，包括Build号，Commit号，Elapsed用时，Log日志等信息，如果成功就显示绿色，失败则显示红色。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/trigger_build.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;除了查看Current当前的Build，也可以选择查看Branches分支状态或Build History历史记录等。&lt;/p&gt;
&lt;h4 id=&quot;关联Build状态&quot;&gt;&lt;a href=&quot;#关联Build状态&quot; class=&quot;headerlink&quot; title=&quot;关联Build状态&quot;&gt;&lt;/a&gt;关联Build状态&lt;/h4&gt;&lt;p&gt;为了显示指明项目与Travis CI的关系与状态，可以在项目README.md中关联Build状态图标，点击项目右边的状态图片&lt;img src=&quot;/assets/travisci-by-step/passing_status.svg&quot; alt=&quot;&quot;&gt;，然后会弹出一个Status Image链接的页面，选择Markdown格式，然后复制链接到项目的README.md中即可。&lt;br&gt;&lt;img src=&quot;/assets/travisci-by-step/link_build_status.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Build状态标识的Markdown格式为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[![Build Status](https://travis-ci.org/GITHUB_NAME/PROJECT_NAME.svg?branch=master)](https://travis-ci.org/GITHUB_NAME/PROJECT_NAME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# E.g. GITHUB_MAME=tw-wee, PROJECT_NAME=qas-service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[![Build Status](https://travis-ci.org/tw-wee/qas-service.svg?branch=master)](https://travis-ci.org/tw-wee/qas-service)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;The-End&quot;&gt;&lt;a href=&quot;#The-End&quot; class=&quot;headerlink&quot; title=&quot;The End&quot;&gt;&lt;/a&gt;The End&lt;/h2&gt;&lt;p&gt;总体说来，对于公司或企业项目，更倾向于选择GoCD或Jenkins这样的产品，个人或社区开源项目建议采用Travis CI来快速实现持续集成服务。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.travis-ci.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Travis CI Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Travis_CI&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Travis CI Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Travis CI是一款提供托管与分布式持续集成服务的CI工具，与GitHub高度集成，能够构建和测试托管在GitHub上的软件项目。主要为开源免费提供轻量级可定制化的持续持续集成环境和服务。Travis CI不仅支持多种语言，而且支持在容器中运行Builds，通过简单配置.travis.yml文件即可使用，也省去了自己搭建和维护CI服务器的繁琐工作。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="DevOps" scheme="http://blog.waterstrong.me/tags/DevOps/"/>
    
      <category term="CI/CD" scheme="http://blog.waterstrong.me/tags/CI-CD/"/>
    
      <category term="TravisCI" scheme="http://blog.waterstrong.me/tags/TravisCI/"/>
    
      <category term="GitHub" scheme="http://blog.waterstrong.me/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins Step by Step</title>
    <link href="http://blog.waterstrong.me/jenkins-by-step/"/>
    <id>http://blog.waterstrong.me/jenkins-by-step/</id>
    <published>2016-07-06T13:30:44.000Z</published>
    <updated>2016-07-27T04:46:53.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Jenkins-Introduction&quot;&gt;&lt;a href=&quot;#Jenkins-Introduction&quot; class=&quot;headerlink&quot; title=&quot;Jenkins Introduction&quot;&gt;&lt;/a&gt;Jenkins Introduction&lt;/h2&gt;&lt;p&gt;Jenkins是一款开源的跨平台的可扩展的持续集成(Continuous Integration)工具。作为目前使用最广泛，用户量最大的CI工具，无论是在GUI操作上，插件生态系统管理，稳定性、可靠性、功能性以及扩展性等方面都表现得较为出色，而且简单易学，入门上手快，当然Jenkins的优势还有很多，之前的项目上都一直在使用Jenkins，对于大多项目来说是完全满足条件的。这里以Jenkins 2.x为例演示如何安装、配置和使用Jenkins。&lt;br&gt;下图摘自官网，展示了持续交付场景下应用示例一般流程。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/pipeline_flow.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Jenkins-Installation&quot;&gt;&lt;a href=&quot;#Jenkins-Installation&quot; class=&quot;headerlink&quot; title=&quot;Jenkins Installation&quot;&gt;&lt;/a&gt;Jenkins Installation&lt;/h2&gt;&lt;p&gt;Jenkins由Java编写的开源产品，支持跨平台，安装也非常方便，可以到&lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenkins官网&lt;/a&gt;下载需要的版本并安装。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/download.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下大致列举出几种常用的安装和使用方式，在安装之前请确保已经安装了Java运行环境。&lt;/p&gt;
&lt;h4 id=&quot;War包安装方式&quot;&gt;&lt;a href=&quot;#War包安装方式&quot; class=&quot;headerlink&quot; title=&quot;War包安装方式&quot;&gt;&lt;/a&gt;War包安装方式&lt;/h4&gt;&lt;p&gt;可以直接下载自带Jetty的&lt;code&gt;*.war&lt;/code&gt;包并运行，非常方便，比较推荐使用，Jenkins默认会运行在&lt;code&gt;8080&lt;/code&gt;端口。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -O http://ftp.tsukuba.wide.ad.jp/software/jenkins/war-stable/2.7.1/jenkins.war&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java -jar jenkins.war&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以下载最新版本的&lt;a href=&quot;http://mirrors.jenkins-ci.org/war-stable/latest/jenkins.war&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jenkins.war&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Docker镜像方式&quot;&gt;&lt;a href=&quot;#Docker镜像方式&quot; class=&quot;headerlink&quot; title=&quot;Docker镜像方式&quot;&gt;&lt;/a&gt;Docker镜像方式&lt;/h4&gt;&lt;p&gt;可以直接下载Docker镜像来使用，无需进行安装，但需要有docker环境。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull jenkinsci/jenkins&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -p 8080:8080 -p 50000:50000 -v /your/home:/var/jenkins_home jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;/your/home&lt;/code&gt;需要替换为你的主机路径，用于保存Jenkins的Workspace数据，更多细节可以参阅&lt;a href=&quot;https://github.com/jenkinsci/docker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub jenkinsci&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Ansible安装方式&quot;&gt;&lt;a href=&quot;#Ansible安装方式&quot; class=&quot;headerlink&quot; title=&quot;Ansible安装方式&quot;&gt;&lt;/a&gt;Ansible安装方式&lt;/h4&gt;&lt;p&gt;另外，还可以通过Ansible自动化脚本安装，在另一篇博客&lt;a href=&quot;/ansible-practice&quot;&gt;Ansible实践篇&lt;/a&gt;中也有涉及。首先需要下载jenkins role到本地，假设下载到了&lt;code&gt;/usr/local/etc/ansible/roles/&lt;/code&gt;目录下。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-galaxy install geerlingguy.jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后编写&lt;code&gt;playbook&lt;/code&gt;来实现&lt;strong&gt;自动化批量安装&lt;/strong&gt;，假设创建一个playbook名为&lt;code&gt;setup_jenkins.yml&lt;/code&gt;，其中&lt;code&gt;ci-server&lt;/code&gt;是&lt;code&gt;inventory&lt;/code&gt;文件中的Group或Host。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- hosts: ci-server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  become_method: sudo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  become: yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  roles:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - /usr/local/etc/ansible/roles/geerlingguy.jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后运行命令执行安装，稍等片刻后可访问主机的8080端口：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-playbook -i inventory setup_jenkins.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果需要设置Java版本可以在安装之前修改&lt;code&gt;geerlingguy.java&lt;/code&gt;中默认的&lt;code&gt;java_packages&lt;/code&gt;。更多说明可以参见&lt;a href=&quot;https://github.com/geerlingguy/ansible-role-jenkins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ansible-role-jenkins&lt;/a&gt;和&lt;a href=&quot;https://github.com/geerlingguy/ansible-role-java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ansible-role-java&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;除了上述安装方式外，也可根据具体的操作系统进行安装，以下给出常用的操作系统下的安装方式。&lt;/p&gt;
&lt;h4 id=&quot;在RedHat-CentOS中安装&quot;&gt;&lt;a href=&quot;#在RedHat-CentOS中安装&quot; class=&quot;headerlink&quot; title=&quot;在RedHat/CentOS中安装&quot;&gt;&lt;/a&gt;在RedHat/CentOS中安装&lt;/h4&gt;&lt;p&gt;通常有两种安装方式：1. 添加Package Repository后使用yum进行安装和升级；2. 直接下载&lt;code&gt;*.rpm&lt;/code&gt;进行安装。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式一：添加Package仓库安装&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式二：下载&lt;code&gt;*.rpm&lt;/code&gt;进行安装&lt;/strong&gt;&lt;br&gt;目前最新版本是&lt;code&gt;2.7.1-1.1.noarch&lt;/code&gt;，若需要指定安装版本，可到&lt;a href=&quot;http://pkg.jenkins-ci.org/redhat-stable/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pkg.jenkins-ci.org/redhat-stable/&lt;/a&gt;查看并下载安装。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -O http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.1-1.1.noarch.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo rpm -ivh jenkins-2.7.1-1.1.noarch.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;在Ubuntu-Debian中安装&quot;&gt;&lt;a href=&quot;#在Ubuntu-Debian中安装&quot; class=&quot;headerlink&quot; title=&quot;在Ubuntu/Debian中安装&quot;&gt;&lt;/a&gt;在Ubuntu/Debian中安装&lt;/h4&gt;&lt;p&gt;通常也有两种安装方式：1. 添加Debian Package Repository进行安装和升级；2. 通过直接下载&lt;code&gt;*.deb&lt;/code&gt;进行安装。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式一：添加Package仓库安装&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget -q -O - http://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deb http://pkg.jenkins.io/debian-stable binary/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式二：下载&lt;code&gt;*.deb&lt;/code&gt;进行安装&lt;/strong&gt;&lt;br&gt;目前最新版本是&lt;code&gt;2.7.1_all&lt;/code&gt;，也可以到&lt;a href=&quot;http://pkg.jenkins-ci.org/debian-stable/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pkg.jenkins-ci.org/debian-stable/&lt;/a&gt;查看并下载指定版本。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -O http://pkg.jenkins-ci.org/debian-stable/binary/jenkins_2.7.1_all.deb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo dpkg -i jenkins_2.7.1_all.deb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;在Mac或Windows下安装&quot;&gt;&lt;a href=&quot;#在Mac或Windows下安装&quot; class=&quot;headerlink&quot; title=&quot;在Mac或Windows下安装&quot;&gt;&lt;/a&gt;在Mac或Windows下安装&lt;/h4&gt;&lt;p&gt;对于Mac OS和Windows，直接下载对应安装包根据提示安装即可：&lt;a href=&quot;https://jenkins.io/content/thank-you-downloading-os-x-installer/#stable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac OS安装包&lt;/a&gt;、&lt;a href=&quot;https://jenkins.io/content/thank-you-downloading-windows-installer/#stable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Windows安装包&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Jenkins-Setup&quot;&gt;&lt;a href=&quot;#Jenkins-Setup&quot; class=&quot;headerlink&quot; title=&quot;Jenkins Setup&quot;&gt;&lt;/a&gt;Jenkins Setup&lt;/h2&gt;&lt;p&gt;当安装完Jenkins 2.x后，访问&lt;code&gt;http://localhost:8080&lt;/code&gt;默认会进入到登录页面。输入默认用户名&lt;code&gt;admin&lt;/code&gt;和密码&lt;code&gt;admin&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/login.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;登录成功后，Jenkins首先会提示安装推荐插件或自选插件，直接点击&lt;code&gt;Install suggested plugins&lt;/code&gt;安装默认推荐的插件即可，当然随后也可以在Plugin管理中再选择安装需要的插件。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/customize_jenkins.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;等待常用的一些插件安装完成后就可以开始创建自己的Job了。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/suggested_plugins.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Jenkins-Jobs&quot;&gt;&lt;a href=&quot;#Jenkins-Jobs&quot; class=&quot;headerlink&quot; title=&quot;Jenkins Jobs&quot;&gt;&lt;/a&gt;Jenkins Jobs&lt;/h2&gt;&lt;p&gt;Jenkins Job是很重要的概念，定义了在什么样的情况下执行什么样的任务，以及执行后的操作。&lt;/p&gt;
&lt;h4 id=&quot;创建一个Job&quot;&gt;&lt;a href=&quot;#创建一个Job&quot; class=&quot;headerlink&quot; title=&quot;创建一个Job&quot;&gt;&lt;/a&gt;创建一个Job&lt;/h4&gt;&lt;p&gt;首先来创建一个Jenkins的Job，点击&lt;code&gt;create new jobs&lt;/code&gt;或&lt;code&gt;New Item&lt;/code&gt;来创建一个Job。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/home.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;Enter an item name&lt;/code&gt;下输入Job的名称，比如：“melon-build”，并选择&lt;code&gt;Freestyle project&lt;/code&gt;，最后点击OK保存。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/new_job.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Source-Code-Management-源代码管理&quot;&gt;&lt;a href=&quot;#Source-Code-Management-源代码管理&quot; class=&quot;headerlink&quot; title=&quot;Source Code Management 源代码管理&quot;&gt;&lt;/a&gt;Source Code Management 源代码管理&lt;/h4&gt;&lt;p&gt;可以指定下载源代码的仓库路径，目前Git是最为流行的VCS，指定Repositories URL，这里以GitHub托管的项目为例，拉取的Branch为&lt;code&gt;*/master&lt;/code&gt;。这里的项目仓库为公开仓库，因此直接用HTTP方式即可，如果是私有项目需要添加授权信息。另外特别注意，需要确保Server安装了Git，否则在pull代码时会因找不到命令而失败。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/job_source_code.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Build-Triggers-构建触发器&quot;&gt;&lt;a href=&quot;#Build-Triggers-构建触发器&quot; class=&quot;headerlink&quot; title=&quot;Build Triggers 构建触发器&quot;&gt;&lt;/a&gt;Build Triggers 构建触发器&lt;/h4&gt;&lt;p&gt;构建触发条件Jenkins提供了多种方式，根据项目需要可以设置不同的触发方式，通常采用&lt;code&gt;Poll SCM&lt;/code&gt;方式，通过设置Schedule来控制触发条件，Schedule采用的是基于&lt;strong&gt;Cron&lt;/strong&gt;语法，但Jenkins对其进行了略微调整，比如设置&lt;code&gt;H/5 * * * *&lt;/code&gt;表示每5分钟检查一次代码仓库是否有新的code changes，如果有就pull并执行tasks。可以通过点击问号&lt;img src=&quot;/assets/jenkins-by-step/help.png&quot; alt=&quot;&quot;&gt;按钮来获得更多帮助信息，或参考&lt;a href=&quot;https://en.wikipedia.org/wiki/Cron&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cron Wiki&lt;/a&gt;和&lt;a href=&quot;http://www.quartz-scheduler.org/documentation/quartz-2.x/tutorials/crontrigger.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CronTrigger Tutorial&lt;/a&gt;。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/job_trigger.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Build-构建和任务&quot;&gt;&lt;a href=&quot;#Build-构建和任务&quot; class=&quot;headerlink&quot; title=&quot;Build 构建和任务&quot;&gt;&lt;/a&gt;Build 构建和任务&lt;/h4&gt;&lt;p&gt;假设项目构建工具采用的是目前相对比较流行的开源自动化构建工具&lt;a href=&quot;https://gradle.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle&lt;/a&gt;，选择&lt;code&gt;Use Gradle Wrapper&lt;/code&gt;，添加项目执行的Tasks即可，图中示例最终将执行&lt;code&gt;gradlew clean build&lt;/code&gt;操作。需要注意的是，如果build依赖特定版本的运行环境，请确保在build机器上安装了对应版本的运行环境，如Java 8等。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/job_build.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然，除了Gradle外还可以选择Maven、Ant等方式。当然，如果有一些复杂的自动化工作也可以选择Shell脚本完成，根据项目需要定义。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/add_build_step.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Post-build-Actions-构建后置行为&quot;&gt;&lt;a href=&quot;#Post-build-Actions-构建后置行为&quot; class=&quot;headerlink&quot; title=&quot;Post-build Actions 构建后置行为&quot;&gt;&lt;/a&gt;Post-build Actions 构建后置行为&lt;/h4&gt;&lt;p&gt;Post-build Actions定义了在完成当前Job的Build任务后接下来需要执行的一系列操作的关系。比如设置在正常完成Build后，进一步获取测试报告和Artifacts，发送Email通知，或触发后续Downstream的一个或多个Jobs，以及部署应用到服务器等。Post-build actions有很多种类型和触发条件，通过下拉列表可以选择，如下图：&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/add_post_action.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;Build other projects&lt;/code&gt;表示将自动触发后续Job，&lt;code&gt;Build other projects(manual step)&lt;/code&gt;表示定义了后续Job，但需要手动点击按钮触发，通常针对部署到High Environments的Job。另外还有一个&lt;code&gt;Trigger parameterized build on other projects&lt;/code&gt;选项定义了同时触发后续的多个Jobs，比如在build完成后同时触发Integration Test、Acceptance Test以及Sonar等。Jenkins也提供了Deployment相关的插件，总之，Jenkins的插件生态系统管理得很好，需要的功能都可以通过Plugins实现。&lt;/p&gt;
&lt;p&gt;下图中定义&lt;code&gt;melon-build&lt;/code&gt;完成后会同时触发执行&lt;code&gt;integration-test&lt;/code&gt;、&lt;code&gt;acceptance-test&lt;/code&gt;和&lt;code&gt;sonar&lt;/code&gt;，执行顺序的关系可以被配置在Pipeline View中以可视化的方式展现出来，稍候会在Pipeline View中提及。另外，还可以在&lt;code&gt;Build Trigger&lt;/code&gt;-&amp;gt;&lt;code&gt;Add Parameters&lt;/code&gt;中选择参数传递策略。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/post_build_parameterized.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;至此，针对第一个melon-build的Job设置完成，可以点击&lt;code&gt;Save&lt;/code&gt;或&lt;code&gt;Apply&lt;/code&gt;保存了，默认会保存在&lt;code&gt;/var/lib/jenkins/jobs/&lt;/code&gt;路径下。&lt;/p&gt;
&lt;h4 id=&quot;Custom-Workspace-自定义工作区&quot;&gt;&lt;a href=&quot;#Custom-Workspace-自定义工作区&quot; class=&quot;headerlink&quot; title=&quot;Custom Workspace 自定义工作区&quot;&gt;&lt;/a&gt;Custom Workspace 自定义工作区&lt;/h4&gt;&lt;p&gt;另外，如果当前Job要重用已经有的Workspace代码，可以选择Tab页&lt;code&gt;General&lt;/code&gt;-&amp;gt;&lt;code&gt;Advanced&lt;/code&gt;-&amp;gt;&lt;code&gt;Use custom workspace&lt;/code&gt;，然后填写&lt;code&gt;Directory&lt;/code&gt;，比如填写为&lt;code&gt;jobs/melon-build/workspace/&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/custom_workspace.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;General&lt;/code&gt;Tab下有很多可选项，如果需要传入特定参数可以勾选&lt;code&gt;This project is parameterized&lt;/code&gt;并配置相应参数，这在配置&lt;code&gt;Post-build Actions&lt;/code&gt;-&amp;gt;&lt;code&gt;Trigger parameterized build on other projects&lt;/code&gt;时会很有用。另外，根据项目情况也可以勾选更多的选项，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Execute concurrent builds if necessary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Restrict where this project can be run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Block build when upstream project is building&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Block build when downstream project is building&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Test-Report-测试报告&quot;&gt;&lt;a href=&quot;#Test-Report-测试报告&quot; class=&quot;headerlink&quot; title=&quot;Test Report 测试报告&quot;&gt;&lt;/a&gt;Test Report 测试报告&lt;/h4&gt;&lt;p&gt;另外，针对测试报告，若基于Jacoco，可直接选择&lt;code&gt;Record JaCoCo coverage report&lt;/code&gt;，当build完成后可自动生成报告。也可以尝试配置&lt;code&gt;Publish JUnit test result report&lt;/code&gt;中的&lt;code&gt;Test report XMLs&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/jacoco_report.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Deployment-部署&quot;&gt;&lt;a href=&quot;#Deployment-部署&quot; class=&quot;headerlink&quot; title=&quot;Deployment 部署&quot;&gt;&lt;/a&gt;Deployment 部署&lt;/h4&gt;&lt;p&gt;部署有多种方式，可以通过&lt;code&gt;Build&lt;/code&gt;中执行部署脚本，或者在&lt;code&gt;Post-build actions&lt;/code&gt;中选择相应的Step，比如针对War包部署可以选择&lt;code&gt;Deploy war/ear to a container&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/deploy_tomcat.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Jenkins-View&quot;&gt;&lt;a href=&quot;#Jenkins-View&quot; class=&quot;headerlink&quot; title=&quot;Jenkins View&quot;&gt;&lt;/a&gt;Jenkins View&lt;/h2&gt;&lt;p&gt;Jenkins提供了多种视图，如Pipeline View、List View、My View等，目的是为了更好地归类和展示所关注的信息，通常会创建Pipeline View来增强Pipeline可视化效果。首先在Jenkins主页点击Dashboad标题栏最右边的&lt;code&gt;+&lt;/code&gt;号，然后输入View Name并选择&lt;code&gt;Build Pipeline View&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/new_view.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后配置Pipeline View，特别注意需要在Layout中选择Initial Job，并且该Job已经配置好Downstream Jobs，然后设定显示的Builds数量和刷新频率等。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/config_pipeline_view.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;配置完成后保存，可以到刚创建的View中查看，可以根据项目需要定义Pipeline Flow，正确配置Job的执行顺序和依赖关系即可。&lt;br&gt;&lt;em&gt;直接Build情况的Pipeline View示例(仅供参考)：&lt;/em&gt;&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/pipeline_view1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;存在参数化情况的Pipeline View示例(仅供参考)：&lt;/em&gt;&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/pipeline_view2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;通常会用颜色来表示Job的状态：绿色代表Pass，黄色代表Building或Unstable，蓝色代表N/A未操作，红色代表Fail。如果需要查看某次Build的Log，可以点击Build编号(或在Build History查看)查看左边栏中的&lt;code&gt;Console Output&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Manage-Jenkins-管理&quot;&gt;&lt;a href=&quot;#Manage-Jenkins-管理&quot; class=&quot;headerlink&quot; title=&quot;Manage Jenkins 管理&quot;&gt;&lt;/a&gt;Manage Jenkins 管理&lt;/h2&gt;&lt;h5 id=&quot;Jenkins-Plugins-插件管理&quot;&gt;&lt;a href=&quot;#Jenkins-Plugins-插件管理&quot; class=&quot;headerlink&quot; title=&quot;Jenkins Plugins 插件管理&quot;&gt;&lt;/a&gt;Jenkins Plugins 插件管理&lt;/h5&gt;&lt;p&gt;Jenkins的插件生态系统管理得很好，通常需要在Workspace中安装很多的插件来实现需要的功能。可以通过&lt;code&gt;Manage Jenkins&lt;/code&gt;-&amp;gt;&lt;code&gt;Manage Plugins&lt;/code&gt;进入到插件管理页面，可以执行安装、升级、删除插件等操作，通常需要重启Jenkins服务来生效你的修改。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/plugins_manager.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下补充罗列一些常用的插件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Gradle+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/GitHub+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.jenkins-ci.org/display/JENKINS/SSH+Slaves+plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SSH Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pipeline Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Deploy+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deploy Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JaCoCo Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Authorize+Project+plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Authorize Project Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Checkstyle Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Trigger+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Parameterized Trigger Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Manage-Nodes-管理节点&quot;&gt;&lt;a href=&quot;#Manage-Nodes-管理节点&quot; class=&quot;headerlink&quot; title=&quot;Manage Nodes 管理节点&quot;&gt;&lt;/a&gt;Manage Nodes 管理节点&lt;/h4&gt;&lt;p&gt;Jenkins提供了集群的能力，允许加入多个Nodes，一台Master对应多个Nodes，Master通常负责Job的Schedule和资源协调，Node通常是执行Master发放的Job并返回结果，这种模型也称Master/Slave模型。&lt;br&gt;当项目的Build/Deploy较多时，可以并行地执行Job任务，减少等待时间，另外，还可以根据Job依赖的环境来指定对应操作系统和构建环境的节点机器。在&lt;code&gt;Manage Jenkins&lt;/code&gt;-&amp;gt;&lt;code&gt;Manage Nodes&lt;/code&gt;页面可以管理节点，首先来创建一个节点&lt;code&gt;New Node&lt;/code&gt;，填写相应的&lt;code&gt;Remote root directory&lt;/code&gt;和&lt;code&gt;Labels&lt;/code&gt;信息，这里Launch method选择SSH方式，指定Host和Credentials，当然也可以选择其他的登录授权方式。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/new_node.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/jenkins-by-step/add_credential.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;特别注意：&lt;/em&gt;请确保master上的key可以访问指定的node，并且jenkins拥有使用该key的权限，以及jenkins用户能够对Remote root directory进行读写操作。&lt;/p&gt;
&lt;p&gt;创建完成后可以启动并查看Node状态以及系统信息等：&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/all_nodes.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;若需指定某个Job在指定的节点上运行，请在Job配置中修改&lt;code&gt;General&lt;/code&gt;-&amp;gt;&lt;code&gt;Restrict where this project can be run&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Jenkins-CLI-命令行模式&quot;&gt;&lt;a href=&quot;#Jenkins-CLI-命令行模式&quot; class=&quot;headerlink&quot; title=&quot;Jenkins CLI 命令行模式&quot;&gt;&lt;/a&gt;Jenkins CLI 命令行模式&lt;/h4&gt;&lt;p&gt;Jenkins提供了一个内置的命令行接口，允许通过一些脚本命令远程访问Jenkins功能，这对于自动化的任务和批量操作等非常有利。&lt;/p&gt;
&lt;p&gt;首先需要下载&lt;code&gt;jenkins-cli.jar&lt;/code&gt;，假设你的Jenkins地址是&lt;code&gt;jenkins.xxx.net:8080&lt;/code&gt;，可以访问以下地址下载：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://jenkins.xxx.com:8080/jnlpJars/jenkins-cli.jar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后可以通过命令行查看帮助，命令为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java -jar jenkins-cli.jar -s http://jenkins.xxx.net:8080/ help&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然也可以通过界面查看每个命令的使用帮助，在&lt;code&gt;Manage Jenkins&lt;/code&gt;-&amp;gt;&lt;code&gt;Jenkins CLI&lt;/code&gt;页面查看到所有Available的命令。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/jenkins_cli.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如何需要了解更多，可以参考&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+CLI&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenkins CLI Wiki&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;其他配置管理&quot;&gt;&lt;a href=&quot;#其他配置管理&quot; class=&quot;headerlink&quot; title=&quot;其他配置管理&quot;&gt;&lt;/a&gt;其他配置管理&lt;/h4&gt;&lt;p&gt;Jenkins除了对插件和节点进行管理，还有系统管理、安全管理、权限配置、命令行工具、用户管理等。在主页选择&lt;code&gt;Manage Jenkins&lt;/code&gt;进入到Jenkins管理页面，可以选择相应的功能进行配置，每项功能进入后都会有相关的说明，相对也比较简单易懂，这里就不再一一列举了。&lt;br&gt;&lt;img src=&quot;/assets/jenkins-by-step/manage_jenkins.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Pipeline-as-Code&quot;&gt;&lt;a href=&quot;#Pipeline-as-Code&quot; class=&quot;headerlink&quot; title=&quot;Pipeline as Code&quot;&gt;&lt;/a&gt;Pipeline as Code&lt;/h2&gt;&lt;p&gt;Jenkins 2.x推出了&lt;code&gt;Jenkinsfile&lt;/code&gt;来实现将pipeline定义为代码形式目标，即Pipeline as Code，特别是在集群管理时提升了效率，但会存在一个缺点，问题在于这可能造成在GUI上进行了修改而未修改Jenkinsfile的不一致性，而且无法追踪到这样的修改，所以，如果没有特别的需求，请谨慎选择使用。有兴趣的同学可以研究一下，另外Jenkins CLI也可以尝试一下&lt;/p&gt;
&lt;h2 id=&quot;The-End&quot;&gt;&lt;a href=&quot;#The-End&quot; class=&quot;headerlink&quot; title=&quot;The End&quot;&gt;&lt;/a&gt;The End&lt;/h2&gt;&lt;p&gt;总得来说，Jenkins在常规的项目中使用是不错的选择，强烈推荐使用。另外，后续有时间会写一些关于GoCD，&lt;a href=&quot;/travisci-by-step&quot;&gt;Travis CI&lt;/a&gt;以及Concourse CI的简单使用教程，敬请期待。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenkins Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tutorialspoint.com/jenkins/index.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenkins Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Step+by+step+guide+to+set+up+master+and+slave+machines&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Step by step guide to set up master and slave machines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Build+Pipeline+Plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Build Pipeline Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.donaldsimpson.co.uk/2011/10/06/jenkins-slave-nodes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenkins Slave Nodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Jenkins是一款开源的跨平台的可扩展的持续集成工具。作为目前使用最广泛，用户量最大的CI工具，无论是在GUI操作上，插件生态系统管理，稳定性、可靠性、功能性以及扩展性等方面都表现得较为出色，而且简单易学，入门上手快。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="DevOps" scheme="http://blog.waterstrong.me/tags/DevOps/"/>
    
      <category term="CI/CD" scheme="http://blog.waterstrong.me/tags/CI-CD/"/>
    
      <category term="Jenkins" scheme="http://blog.waterstrong.me/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Ansible实践篇</title>
    <link href="http://blog.waterstrong.me/ansible-practice/"/>
    <id>http://blog.waterstrong.me/ansible-practice/</id>
    <published>2016-07-03T13:15:39.000Z</published>
    <updated>2016-07-12T14:42:33.000Z</updated>
    
    <content type="html">&lt;p&gt;本文是一篇Workshop演练指南，&lt;a href=&quot;https://github.com/Waterstrong/ansible-workshop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Workshop Step by Step&lt;/a&gt;，旨在通过Workshop形式快速掌握Ansible的常用命令和基本用法，俗话说得好：Practice Makes Perfect！&lt;/p&gt;
&lt;p&gt;注：所有操作均在Mac系统，Linux系统类似。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Step-1-Set-up-the-environment-on-Mac&quot;&gt;&lt;a href=&quot;#Step-1-Set-up-the-environment-on-Mac&quot; class=&quot;headerlink&quot; title=&quot;Step 1. Set up the environment on Mac&quot;&gt;&lt;/a&gt;Step 1. Set up the environment on Mac&lt;/h2&gt;&lt;h3 id=&quot;Install-Ansible&quot;&gt;&lt;a href=&quot;#Install-Ansible&quot; class=&quot;headerlink&quot; title=&quot;Install Ansible&quot;&gt;&lt;/a&gt;Install Ansible&lt;/h3&gt;&lt;h4 id=&quot;Brew-Install&quot;&gt;&lt;a href=&quot;#Brew-Install&quot; class=&quot;headerlink&quot; title=&quot;Brew Install&quot;&gt;&lt;/a&gt;Brew Install&lt;/h4&gt;&lt;p&gt;可以采用&lt;a href=&quot;http://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew&lt;/a&gt;进行安装：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install ansible # 安装Ansible&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew install --upgrade ansible # 以后可更新版本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Pip-Install&quot;&gt;&lt;a href=&quot;#Pip-Install&quot; class=&quot;headerlink&quot; title=&quot;Pip Install&quot;&gt;&lt;/a&gt;Pip Install&lt;/h4&gt;&lt;p&gt;还可采用Python的&lt;a href=&quot;https://pip.pypa.io/en/stable/installing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pip&lt;/a&gt;包管理工具安装：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install ansible # 安装Ansible&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install --upgrade ansible # 以后可更新版本&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Install-VirtualBox-if-not-have-one&quot;&gt;&lt;a href=&quot;#Install-VirtualBox-if-not-have-one&quot; class=&quot;headerlink&quot; title=&quot;Install VirtualBox if not have one&quot;&gt;&lt;/a&gt;Install VirtualBox if not have one&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install Caskroom/cask/virtualbox&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或在&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VirtualBox官网下载&lt;/a&gt;进行安装。&lt;/p&gt;
&lt;h3 id=&quot;Install-Vagrant-if-not-have-one&quot;&gt;&lt;a href=&quot;#Install-Vagrant-if-not-have-one&quot; class=&quot;headerlink&quot; title=&quot;Install Vagrant if not have one&quot;&gt;&lt;/a&gt;Install Vagrant if not have one&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install vagrant&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或在&lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vagrant官网下载&lt;/a&gt;进行安装。&lt;/p&gt;
&lt;h3 id=&quot;Vagrant-up-base-on-existing-Vagrantfile&quot;&gt;&lt;a href=&quot;#Vagrant-up-base-on-existing-Vagrantfile&quot; class=&quot;headerlink&quot; title=&quot;Vagrant up base on existing Vagrantfile&quot;&gt;&lt;/a&gt;Vagrant up base on existing &lt;code&gt;Vagrantfile&lt;/code&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/Waterstrong/ansible-workshop.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout step1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ansible-workshop/vagrant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant up&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;验证登录虚拟机成功后退出:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Test-Ansible-Connection&quot;&gt;&lt;a href=&quot;#Test-Ansible-Connection&quot; class=&quot;headerlink&quot; title=&quot;Test Ansible Connection&quot;&gt;&lt;/a&gt;Test Ansible Connection&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ansible -i inventory all -m ping&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若连接成功返回:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.100 | SUCCESS =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;changed&amp;quot;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Unreachable-Solution&quot;&gt;&lt;a href=&quot;#Unreachable-Solution&quot; class=&quot;headerlink&quot; title=&quot;Unreachable Solution&quot;&gt;&lt;/a&gt;Unreachable Solution&lt;/h4&gt;&lt;p&gt;如果连接不成功返回:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.100 | UNREACHABLE! =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;changed&amp;quot;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;msg&amp;quot;: &amp;quot;Failed to connect to the host via ssh.&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;unreachable&amp;quot;: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可能原因是之前已经在&lt;code&gt;~/.ssh/known_hosts&lt;/code&gt;中有相同的记录，可以通过ssh命令确认:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh -i vagrant/.vagrant/machines/default/virtualbox/private_key vagrant@192.168.33.100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果确实报错:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Someone could be eavesdropping on you right now (man-in-the-middle attack)!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;It is also possible that a host key has just been changed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The fingerprint for the ECDSA key sent by the remote host is&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SHA256:JIdGdnPGRJcOZd1ZMiisaPesCr3I0/o00agtrOGNYYA.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Please contact your system administrator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Add correct host key in /Users/sqlin/.ssh/known_hosts to get rid of this message.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Offending ECDSA key in /Users/sqlin/.ssh/known_hosts:50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ECDSA host key for 192.168.33.100 has changed and you have requested strict checking.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Host key verification failed.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可通过执行以下命令解决:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -R 192.168.33.100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者可直接修改known_hosts文件，找到该记录并删除:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim ~/.ssh/known_hosts # 找到192.168.33.100记录并删除行后保存&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Environment-Ready&quot;&gt;&lt;a href=&quot;#Environment-Ready&quot; class=&quot;headerlink&quot; title=&quot;Environment Ready&quot;&gt;&lt;/a&gt;Environment Ready&lt;/h3&gt;&lt;p&gt;环境搭建完成，准备工作结束，关闭虚拟机:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd vagrant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant halt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Step-2-Inventory-Practice&quot;&gt;&lt;a href=&quot;#Step-2-Inventory-Practice&quot; class=&quot;headerlink&quot; title=&quot;Step 2. Inventory Practice&quot;&gt;&lt;/a&gt;Step 2. Inventory Practice&lt;/h2&gt;&lt;p&gt;当前工作目录为&lt;code&gt;ansible-workshop&lt;/code&gt;，演示使用Inventory文件来指定受控资源列表。&lt;/p&gt;
&lt;h4 id=&quot;配置虚拟机Host2&quot;&gt;&lt;a href=&quot;#配置虚拟机Host2&quot; class=&quot;headerlink&quot; title=&quot;配置虚拟机Host2&quot;&gt;&lt;/a&gt;配置虚拟机Host2&lt;/h4&gt;&lt;p&gt;现在可以再加入一台虚拟机，随后会在inventory中进行配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir vagrant2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd vagrant2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant init ubuntu/trusty64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改Vagrantfile并加入以下配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.33.101&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vb.name = &amp;quot;ansible-workshop-host2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动第二台虚拟机后再回到上一级目录：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant up&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ..&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;配置Inventory加入新Host2&quot;&gt;&lt;a href=&quot;#配置Inventory加入新Host2&quot; class=&quot;headerlink&quot; title=&quot;配置Inventory加入新Host2&quot;&gt;&lt;/a&gt;配置Inventory加入新Host2&lt;/h4&gt;&lt;p&gt;创建名为&lt;code&gt;hosts&lt;/code&gt;的文件，配置虚拟机的Host和Group：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[ubuntu]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.100 ansible_ssh_user=vagrant ansible_ssh_private_key_file=vagrant/.vagrant/machines/default/virtualbox/private_key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ubuntu2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.101 ansible_ssh_user=vagrant ansible_ssh_private_key_file=vagrant2/.vagrant/machines/default/virtualbox/private_key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[myserver:children]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ubunt2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;测试是否ping得通&quot;&gt;&lt;a href=&quot;#测试是否ping得通&quot; class=&quot;headerlink&quot; title=&quot;测试是否ping得通&quot;&gt;&lt;/a&gt;测试是否ping得通&lt;/h4&gt;&lt;p&gt;测试一下应该两台都可以正常访问：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible -i hosts myserver -m ping&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可能需要多次输入&lt;code&gt;yes&lt;/code&gt;回车确认加入key fingerprint，当然也可在ansible.cfg中配置参数关闭提示。当连接成功结果为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.100 | SUCCESS =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;changed&amp;quot;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.101 | SUCCESS =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;changed&amp;quot;: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以单独ping某台虚拟机：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible -i hosts ubuntu2 -m ping&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Step-3-Playbooks-Roles-and-Tasks-Practice&quot;&gt;&lt;a href=&quot;#Step-3-Playbooks-Roles-and-Tasks-Practice&quot; class=&quot;headerlink&quot; title=&quot;Step 3. Playbooks, Roles and Tasks Practice&quot;&gt;&lt;/a&gt;Step 3. Playbooks, Roles and Tasks Practice&lt;/h2&gt;&lt;h4 id=&quot;创建playbooks&quot;&gt;&lt;a href=&quot;#创建playbooks&quot; class=&quot;headerlink&quot; title=&quot;创建playbooks&quot;&gt;&lt;/a&gt;创建playbooks&lt;/h4&gt;&lt;p&gt;写一个Playbook,命名为&lt;code&gt;setup_server.yml&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- hosts: myserver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  become_method: sudo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  become: yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  roles:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - install_tools&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;创建roles和tasks&quot;&gt;&lt;a href=&quot;#创建roles和tasks&quot; class=&quot;headerlink&quot; title=&quot;创建roles和tasks&quot;&gt;&lt;/a&gt;创建roles和tasks&lt;/h4&gt;&lt;p&gt;在ansible-workshop目录下创建文件&lt;code&gt;roles/install_tools/tasks/main.yml&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- name: Ensure update cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  run_once: no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  apt:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update_cache: yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- name: Ensure serveral components installed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  apt:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &amp;quot;&amp;#123;&amp;#123;item.value&amp;#125;&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state: installed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  with_items: &amp;quot;&amp;#123;&amp;#123;packages&amp;#125;&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在ansible-workshop目录下创建文件&lt;code&gt;roles/install_tools/vars/main.yml&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;packages:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - &amp;#123; name: &amp;apos;Git&amp;apos;, value: git &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当前目录结构如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── hosts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── roles&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── install_tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       ├── tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       │   └── main.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── vars&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│           └── main.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── setup_server.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;运行playbooks安装Git&quot;&gt;&lt;a href=&quot;#运行playbooks安装Git&quot; class=&quot;headerlink&quot; title=&quot;运行playbooks安装Git&quot;&gt;&lt;/a&gt;运行playbooks安装Git&lt;/h4&gt;&lt;p&gt;运行Playbooks命令如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-playbook -i hosts setup_server.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后执行完成显示：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PLAY [myserver] ****************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TASK [setup] *******************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok: [192.168.33.100]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok: [192.168.33.101]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TASK [install_tools : Ensure update cache] *************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok: [192.168.33.100]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TASK [install_tools : Ensure serveral components installed] ********************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok: [192.168.33.100] =&amp;gt; (item=&amp;#123;u&amp;apos;name&amp;apos;: u&amp;apos;Git&amp;apos;, u&amp;apos;value&amp;apos;: u&amp;apos;git&amp;apos;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok: [192.168.33.101] =&amp;gt; (item=&amp;#123;u&amp;apos;name&amp;apos;: u&amp;apos;Git&amp;apos;, u&amp;apos;value&amp;apos;: u&amp;apos;git&amp;apos;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PLAY RECAP *********************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.100             : ok=3    changed=0    unreachable=0    failed=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192.168.33.101             : ok=2    changed=0    unreachable=0    failed=0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Step-4-Install-Apache2-Server-Practice&quot;&gt;&lt;a href=&quot;#Step-4-Install-Apache2-Server-Practice&quot; class=&quot;headerlink&quot; title=&quot;Step 4. Install Apache2 Server Practice&quot;&gt;&lt;/a&gt;Step 4. Install Apache2 Server Practice&lt;/h2&gt;&lt;h4 id=&quot;安装Apache2&quot;&gt;&lt;a href=&quot;#安装Apache2&quot; class=&quot;headerlink&quot; title=&quot;安装Apache2&quot;&gt;&lt;/a&gt;安装Apache2&lt;/h4&gt;&lt;p&gt;修改文件&lt;code&gt;roles/install_tools/vars/main.yml&lt;/code&gt;并添加一行安装Apache2的条目：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;packages:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - &amp;#123; name: &amp;apos;Git&amp;apos;, value: git &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - &amp;#123; name: &amp;apos;Apache2&amp;apos;, value: apache2 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Git下载代码&quot;&gt;&lt;a href=&quot;#Git下载代码&quot; class=&quot;headerlink&quot; title=&quot;Git下载代码&quot;&gt;&lt;/a&gt;Git下载代码&lt;/h4&gt;&lt;p&gt;通过git clone下载静态页面代码测试服务器，首先创建一个role的task文件&lt;code&gt;roles/git_clone_file/tasks/main.yml&lt;/code&gt;并写以下内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- name: Ensure repo clone and update to apache directory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  git:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repo: &amp;quot;https://github.com/Waterstrong/ansible-workshop.git&amp;quot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    version: &amp;quot;page&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dest: &amp;quot;/var/www/html/page&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    update: yes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;配置重启Apache服务&quot;&gt;&lt;a href=&quot;#配置重启Apache服务&quot; class=&quot;headerlink&quot; title=&quot;配置重启Apache服务&quot;&gt;&lt;/a&gt;配置重启Apache服务&lt;/h4&gt;&lt;p&gt;创建一个role的task文件&lt;code&gt;roles/start_apache2/tasks/main.yml&lt;/code&gt;并配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- name: enabled mod_rewrite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  apache2_module:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: rewrite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state: present&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- name: restart apache2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  service:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: apache2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state: restarted&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当前目录树结构为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── hosts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── roles&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── git_clone_file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │       └── main.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── install_tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   │   └── main.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── vars&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │       └── main.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── start_apache2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│           └── main.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── setup_server.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;运行playbook并测试服务器&quot;&gt;&lt;a href=&quot;#运行playbook并测试服务器&quot; class=&quot;headerlink&quot; title=&quot;运行playbook并测试服务器&quot;&gt;&lt;/a&gt;运行playbook并测试服务器&lt;/h4&gt;&lt;p&gt;在目录&lt;code&gt;ansible-workshop&lt;/code&gt;目录下运行命令测试：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-playbook -i hosts setup_server.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;成功执行完成后可访问&lt;a href=&quot;http://192.168.33.100/page&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.33.100/page&lt;/a&gt;和&lt;a href=&quot;http://192.168.33.101/page&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.33.101/page&lt;/a&gt;测试是否部署页面成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/ansible-practice/page_demo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Step-5-Ansible-Galaxy-Practice&quot;&gt;&lt;a href=&quot;#Step-5-Ansible-Galaxy-Practice&quot; class=&quot;headerlink&quot; title=&quot;Step 5. Ansible Galaxy Practice&quot;&gt;&lt;/a&gt;Step 5. Ansible Galaxy Practice&lt;/h2&gt;&lt;p&gt;通过Ansible Galaxy快速安装Jenkins。在&lt;a href=&quot;https://galaxy.ansible.com/list#/roles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Galaxy&lt;/a&gt;上搜索找到Jenkins对应的Role，比如选择&lt;a href=&quot;https://galaxy.ansible.com/geerlingguy/jenkins/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;geerlingguy.jenkins&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;下载Jenkins的role到本地&quot;&gt;&lt;a href=&quot;#下载Jenkins的role到本地&quot; class=&quot;headerlink&quot; title=&quot;下载Jenkins的role到本地&quot;&gt;&lt;/a&gt;下载Jenkins的role到本地&lt;/h4&gt;&lt;p&gt;首先下载role到本地：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-galaxy install geerlingguy.jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下载role安装成功后得到以下信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- downloading role &amp;apos;jenkins&amp;apos;, owned by geerlingguy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- downloading role from https://github.com/geerlingguy/ansible-role-jenkins/archive/2.1.1.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- extracting geerlingguy.jenkins to /usr/local/etc/ansible/roles/geerlingguy.jenkins&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- geerlingguy.jenkins was installed successfully&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- adding dependency: geerlingguy.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- downloading role &amp;apos;java&amp;apos;, owned by geerlingguy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- downloading role from https://github.com/geerlingguy/ansible-role-java/archive/1.4.0.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- extracting geerlingguy.java to /usr/local/etc/ansible/roles/geerlingguy.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- geerlingguy.java was installed successfully&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;特别注意其中的路径&lt;code&gt;/usr/local/etc/ansible/roles/geerlingguy.jenkins&lt;/code&gt;，会在接下来的role中用到。 &lt;/p&gt;
&lt;h4 id=&quot;创建安装Jenkins的playbook&quot;&gt;&lt;a href=&quot;#创建安装Jenkins的playbook&quot; class=&quot;headerlink&quot; title=&quot;创建安装Jenkins的playbook&quot;&gt;&lt;/a&gt;创建安装Jenkins的playbook&lt;/h4&gt;&lt;p&gt;在&lt;code&gt;ansible-workshop&lt;/code&gt;目录创建一个安装jenkins的playbook &lt;code&gt;setup_jenkins.yml&lt;/code&gt;，目前只把第一台虚拟机作为CI服务器:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- hosts: ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  become_method: sudo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  become: yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  roles:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - /usr/local/etc/ansible/roles/geerlingguy.jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中的role为之前安装的文件路径。&lt;/p&gt;
&lt;h4 id=&quot;运行命令执行安装&quot;&gt;&lt;a href=&quot;#运行命令执行安装&quot; class=&quot;headerlink&quot; title=&quot;运行命令执行安装&quot;&gt;&lt;/a&gt;运行命令执行安装&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-playbook -i hosts setup_jenkins.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可能会花较长的时间，请耐心等待。安装成功后可以访问Jenkins Home页面&lt;a href=&quot;http://192.168.33.100:8080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.33.100:8080&lt;/a&gt;或Jenkins CLI页面&lt;a href=&quot;http://192.168.33.100:8080/cli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.33.100:8080/cli&lt;/a&gt;，然后可以开始使用Jenkins了。&lt;br&gt;用户名: &lt;code&gt;admin&lt;/code&gt;   密码: &lt;code&gt;admin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/ansible-practice/jenkins.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Workshop结束语&quot;&gt;&lt;a href=&quot;#Workshop结束语&quot; class=&quot;headerlink&quot; title=&quot;Workshop结束语&quot;&gt;&lt;/a&gt;Workshop结束语&lt;/h4&gt;&lt;p&gt;Thanks everyone! You can halt your virtual machines and destroy them to reduce your computer resoures.&lt;br&gt;Make sure your are in &lt;code&gt;ansible-workshop&lt;/code&gt; directory and execute the below commands:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd vagrant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant halt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant destroy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ../vagrant2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant halt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant destroy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ansible.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.ansible.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://galaxy.ansible.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Galaxy Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://galaxy.ansible.com/geerlingguy/jenkins/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;geerlingguy.jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/book/yaowenjie/ansible-workshop/details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Workshop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/richardzone/ansible-training-workshop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Training Workshop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.vagrantup.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pip.pypa.io/en/stable/installing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      本文是一篇Workshop演练指南，Ansible Workshop Step by Step，旨在通过Workshop形式快速掌握Ansible的常用命令和基本用法，俗话说得好：Practice Makes Perfect！
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="DevOps" scheme="http://blog.waterstrong.me/tags/DevOps/"/>
    
      <category term="Jenkins" scheme="http://blog.waterstrong.me/tags/Jenkins/"/>
    
      <category term="Ansible" scheme="http://blog.waterstrong.me/tags/Ansible/"/>
    
      <category term="Workshop" scheme="http://blog.waterstrong.me/tags/Workshop/"/>
    
      <category term="Apache2" scheme="http://blog.waterstrong.me/tags/Apache2/"/>
    
  </entry>
  
  <entry>
    <title>Ansible基础篇</title>
    <link href="http://blog.waterstrong.me/ansible-basic/"/>
    <id>http://blog.waterstrong.me/ansible-basic/</id>
    <published>2016-06-26T11:56:40.000Z</published>
    <updated>2016-07-27T04:47:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是Ansible&quot;&gt;&lt;a href=&quot;#什么是Ansible&quot; class=&quot;headerlink&quot; title=&quot;什么是Ansible?&quot;&gt;&lt;/a&gt;什么是Ansible?&lt;/h2&gt;&lt;p&gt;Ansible是一个IT自动化工具（IT Automation Tool）。它能够很容易地实现管理配置、软件部署、编排任务(如持续部署)等自动化运维工作。其主要目标就是变得更加简单易使用，同时也考虑到安全和可靠性等。&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用Ansible&quot;&gt;&lt;a href=&quot;#为什么要使用Ansible&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用Ansible?&quot;&gt;&lt;/a&gt;为什么要使用Ansible?&lt;/h2&gt;&lt;h3 id=&quot;存在的问题及解决方案&quot;&gt;&lt;a href=&quot;#存在的问题及解决方案&quot; class=&quot;headerlink&quot; title=&quot;存在的问题及解决方案&quot;&gt;&lt;/a&gt;存在的问题及解决方案&lt;/h3&gt;&lt;p&gt;当需要对系统配置进行管理、维护以及部署时通常采用文档方式或Shell脚本。对于上百上千台机器集群进行管理时文档已经不适用，而Shell方式对维护人员要求较高，而且容易出错。总得来说传统方式会存在以下几个方面的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机器数量庞大，难于手动管理&lt;/li&gt;
&lt;li&gt;大量的重复运维工作，浪费人力&lt;/li&gt;
&lt;li&gt;复杂的系统，难于避免出错&lt;/li&gt;
&lt;li&gt;不可跨平台，难以复用和维护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此需要一个统一的管理工具，而且相对来说简单易用，而且能够支持跨平台，高可读性易于维护，高重用性提升效率，总之能够快速有效地完成自动化运维工作。而Ansible是众多自动化工具中较为出色的一款。&lt;/p&gt;
&lt;h3 id=&quot;自动化配置管理工具对比&quot;&gt;&lt;a href=&quot;#自动化配置管理工具对比&quot; class=&quot;headerlink&quot; title=&quot;自动化配置管理工具对比&quot;&gt;&lt;/a&gt;自动化配置管理工具对比&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tools&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;DSL&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ANSIBLE&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YAML&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Python，可维护性较高，架构简单，Windows平台支持有限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SALTSTACK&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;SLS，支持YAML&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Python，简单快速灵活，Windows平台支持有限，大规模多功能支持欠缺&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUPPET&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ruby&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ruby，成熟度高，学习曲线较陡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CHEF&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Ruby&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ruby，成熟度高，学习曲线较陡&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Ansible基本概念&quot;&gt;&lt;a href=&quot;#Ansible基本概念&quot; class=&quot;headerlink&quot; title=&quot;Ansible基本概念&quot;&gt;&lt;/a&gt;Ansible基本概念&lt;/h2&gt;&lt;h3 id=&quot;Ansible-CLI&quot;&gt;&lt;a href=&quot;#Ansible-CLI&quot; class=&quot;headerlink&quot; title=&quot;Ansible CLI&quot;&gt;&lt;/a&gt;Ansible CLI&lt;/h3&gt;&lt;p&gt;Ansible CLI 包含以下几个常用的指令：&lt;code&gt;ansible&lt;/code&gt;, &lt;code&gt;ansible-playbook&lt;/code&gt;, &lt;code&gt;ansible-doc&lt;/code&gt;以及&lt;code&gt;ansible-galaxy&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;特别注意在使用命令行时会遇到当在&lt;code&gt;known_hosts&lt;/code&gt;中新加入fingerprint时会弹出确认信息的问题，如果想要禁用确认，可以配置&lt;code&gt;/usr/local/etc/ansible/ansible.cfg&lt;/code&gt;或&lt;code&gt;~/.ansible.cfg&lt;/code&gt;并写入以下内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[defaults]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host_key_checking = False&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者直接在命令行中执行export命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export ANSIBLE_HOST_KEY_CHECKING=False&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以阅读更多关于&lt;a href=&quot;http://docs.ansible.com/ansible/intro_getting_started.html#host-key-checking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Host Key Checking&lt;/a&gt;的介绍。接下来分别介绍一下CLI的常用指令：&lt;/p&gt;
&lt;h4 id=&quot;ansible&quot;&gt;&lt;a href=&quot;#ansible&quot; class=&quot;headerlink&quot; title=&quot;$ ansible&quot;&gt;&lt;/a&gt;$ ansible&lt;/h4&gt;&lt;p&gt;ansible基本指令，用于ansible基本的操作，属于指令核心部分，其主要用于执行&lt;a href=&quot;http://docs.ansible.com/ansible/intro_adhoc.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ad-Hoc&lt;/a&gt;命令，即单条命令。默认命令后需要跟主机和选项部分，默认不指定模块时，使用的是command模块。&lt;/p&gt;
&lt;p&gt;以下为一些例子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# ping all nodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -m ping&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# as bruce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -m ping -u bruce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# as bruce, sudoing to root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -m ping -u bruce --sudo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# as bruce, sudoing to batman&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -m ping -u bruce --sudo --sudo-user batman&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# With latest version of ansible `sudo` is deprecated so use become&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# as bruce, sudoing to root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -m ping -u bruce -b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# as bruce, sudoing to batman&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -m ping -u bruce -b --become-user batman&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# run a live command on all nodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible all -a &amp;quot;/bin/echo hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;ansible-playbook&quot;&gt;&lt;a href=&quot;#ansible-playbook&quot; class=&quot;headerlink&quot; title=&quot;$ ansible-playbook&quot;&gt;&lt;/a&gt;$ ansible-playbook&lt;/h4&gt;&lt;p&gt;ansible执行Playbook的命令，该指令使用最为频繁。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-playbook -i inventory setup_server.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;ansible-doc&quot;&gt;&lt;a href=&quot;#ansible-doc&quot; class=&quot;headerlink&quot; title=&quot;$ ansible-doc&quot;&gt;&lt;/a&gt;$ ansible-doc&lt;/h4&gt;&lt;p&gt;该指令用于查看模块信息，常用参数有&lt;code&gt;-l&lt;/code&gt;和&lt;code&gt;-s&lt;/code&gt; ：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 列出所有已安装的模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible-doc -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 查看具体某模块，如command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ansible-doc -s command&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;ansible-galaxy&quot;&gt;&lt;a href=&quot;#ansible-galaxy&quot; class=&quot;headerlink&quot; title=&quot;$ ansible-galaxy&quot;&gt;&lt;/a&gt;$ ansible-galaxy&lt;/h4&gt;&lt;p&gt;用于生成ansible最佳实践目录的命令，通常用于下载已经写好的roles，可以到&lt;a href=&quot;https://galaxy.ansible.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Galaxy&lt;/a&gt;上搜索Roles，如&lt;code&gt;geerlingguy.jenkins&lt;/code&gt;，然后安装。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible-galaxy install geerlingguy.jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Inventory&quot;&gt;&lt;a href=&quot;#Inventory&quot; class=&quot;headerlink&quot; title=&quot;Inventory&quot;&gt;&lt;/a&gt;Inventory&lt;/h3&gt;&lt;p&gt;Inventory文件用来指定受控资源列表，也就是主机列表，可同时操作属于一个组的多台主机，组和主机之间的关系通过inventory文件配置。可以设置Hosts，指定Groups以及Groups中的Variables和Groups中的Groups。&lt;/p&gt;
&lt;h4 id=&quot;Hosts-and-Groups&quot;&gt;&lt;a href=&quot;#Hosts-and-Groups&quot; class=&quot;headerlink&quot; title=&quot;Hosts and Groups&quot;&gt;&lt;/a&gt;Hosts and Groups&lt;/h4&gt;&lt;p&gt;一个名为&lt;code&gt;hosts&lt;/code&gt;的inventory文件例子，包括Hosts和Groups:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mail.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[webservers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[dbservers]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;one.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;two.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;three.example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;Host-Variables&quot;&gt;&lt;a href=&quot;#Host-Variables&quot; class=&quot;headerlink&quot; title=&quot;Host Variables&quot;&gt;&lt;/a&gt;Host Variables&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[atlanta]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host1 http_port=80 maxRequestsPerChild=808&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host2 http_port=303 maxRequestsPerChild=909&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Group-Variables&quot;&gt;&lt;a href=&quot;#Group-Variables&quot; class=&quot;headerlink&quot; title=&quot;Group Variables&quot;&gt;&lt;/a&gt;Group Variables&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[atlanta]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[atlanta:vars]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ntp_server=ntp.atlanta.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proxy=proxy.atlanta.example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Groups-of-Groups-and-Group-Variables&quot;&gt;&lt;a href=&quot;#Groups-of-Groups-and-Group-Variables&quot; class=&quot;headerlink&quot; title=&quot;Groups of Groups, and Group Variables&quot;&gt;&lt;/a&gt;Groups of Groups, and Group Variables&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[atlanta]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[raleigh]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[southeast:children]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;atlanta&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;raleigh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[southeast:vars]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;some_server=foo.southeast.example.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;halon_system_timeout=30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self_destruct_countdown=60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;escape_pods=2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[usa:children]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;southeast&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;northeast&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;southwest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;northwest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，可以查阅一些可用的Inventory参数&lt;a href=&quot;http://docs.ansible.com/ansible/intro_inventory.html#list-of-behavioral-inventory-parameters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;List of Behavioral Inventory Parameters&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Modules&quot;&gt;&lt;a href=&quot;#Modules&quot; class=&quot;headerlink&quot; title=&quot;Modules&quot;&gt;&lt;/a&gt;Modules&lt;/h3&gt;&lt;p&gt;Module是Ansible中实际执行的命令，是具体任务的执行单元，可以理解为与系统中命令一一对应的模块. 如apt-get对应apt，wget对应get_url，分为Core Modules和Custom Modules。常用模块有：&lt;code&gt;ping&lt;/code&gt;, &lt;code&gt;setup&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;command&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt;, &lt;code&gt;apt&lt;/code&gt;以及&lt;code&gt;service&lt;/code&gt;等。&lt;/p&gt;
&lt;h4 id=&quot;ping&quot;&gt;&lt;a href=&quot;#ping&quot; class=&quot;headerlink&quot; title=&quot;ping&quot;&gt;&lt;/a&gt;ping&lt;/h4&gt;&lt;p&gt;测试主机是否连通，Ping Module是Ansible的一个核心Modules之一，经常用来测试服务是否能连通，以及验证配置是否正确。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ansible -i hosts all -m ping&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;setup&quot;&gt;&lt;a href=&quot;#setup&quot; class=&quot;headerlink&quot; title=&quot;setup&quot;&gt;&lt;/a&gt;setup&lt;/h4&gt;&lt;p&gt;Ansible有一些预定义的变量，定义了服务器的很多状态信息，可以使用setup动态获取，存储到本地的fact文件中供playbook调用。&lt;/p&gt;
&lt;h4 id=&quot;file&quot;&gt;&lt;a href=&quot;#file&quot; class=&quot;headerlink&quot; title=&quot;file&quot;&gt;&lt;/a&gt;file&lt;/h4&gt;&lt;p&gt;主要用于远程主机上的文件操作的Module。&lt;/p&gt;
&lt;h4 id=&quot;command&quot;&gt;&lt;a href=&quot;#command&quot; class=&quot;headerlink&quot; title=&quot;command&quot;&gt;&lt;/a&gt;command&lt;/h4&gt;&lt;p&gt;运行指定命令的Module。&lt;/p&gt;
&lt;h4 id=&quot;shell&quot;&gt;&lt;a href=&quot;#shell&quot; class=&quot;headerlink&quot; title=&quot;shell&quot;&gt;&lt;/a&gt;shell&lt;/h4&gt;&lt;p&gt;运行shell脚本，比如可直接在受控资源上执行的命令:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;shell: ps -ef | grep jenkins&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;apt&quot;&gt;&lt;a href=&quot;#apt&quot; class=&quot;headerlink&quot; title=&quot;apt&quot;&gt;&lt;/a&gt;apt&lt;/h4&gt;&lt;p&gt;用于安装软件的Module，即包管理器来管理软件包，对应于apt-get。&lt;/p&gt;
&lt;h4 id=&quot;service&quot;&gt;&lt;a href=&quot;#service&quot; class=&quot;headerlink&quot; title=&quot;service&quot;&gt;&lt;/a&gt;service&lt;/h4&gt;&lt;p&gt;用于管理服务的Module&lt;/p&gt;
&lt;h3 id=&quot;Ansible与YAML&quot;&gt;&lt;a href=&quot;#Ansible与YAML&quot; class=&quot;headerlink&quot; title=&quot;Ansible与YAML&quot;&gt;&lt;/a&gt;Ansible与YAML&lt;/h3&gt;&lt;p&gt;YAML是一种非常简单的数据描述语言，清晰易懂，利于阅读。YAML对缩进非常敏感，其中的基本数据类型有两种: Lists and Dictionaries。&lt;/p&gt;
&lt;p&gt;Ansible Playbooks使用YAML语言，对使用者相对友好。Ansible中使用YAML需要注意的是：在Ansible中使用&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;来引用变量时，必须加引号，如：&lt;code&gt;with_items: &amp;quot;&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;若有兴趣可阅读更多关于&lt;a href=&quot;http://docs.ansible.com/ansible/YAMLSyntax.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YAML Syntax&lt;/a&gt;的介绍。&lt;/p&gt;
&lt;h3 id=&quot;Playbooks-Roles-amp-Tasks&quot;&gt;&lt;a href=&quot;#Playbooks-Roles-amp-Tasks&quot; class=&quot;headerlink&quot; title=&quot;Playbooks, Roles &amp;amp; Tasks&quot;&gt;&lt;/a&gt;Playbooks, Roles &amp;amp; Tasks&lt;/h3&gt;&lt;p&gt;在Ansible中，最终被执行的自动化脚本叫做Playbooks，每个Playbook可能包含有多个Plays，每个Play可能包含有多个Tasks，每个Task是Ansible的最小执行单元，它都会利用相应的Module来执行对应的任务： &lt;code&gt;playbooks -&amp;gt; plays -&amp;gt; tasks -&amp;gt; modules -&amp;gt; variables&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果一个Playbook需要执行很多task，Playbook会变得非常庞大，而且其中的代码非常难以复用。通常Playbooks中会使用多个Roles来完成整个自动化任务，Role是Ansible代码复用的基本单位，它能够完整地实现一个独立任务。Role中会包含很多Tasks，每个Task是Ansible的最小执行单元。&lt;/p&gt;
&lt;h2 id=&quot;如何使用Ansible&quot;&gt;&lt;a href=&quot;#如何使用Ansible&quot; class=&quot;headerlink&quot; title=&quot;如何使用Ansible?&quot;&gt;&lt;/a&gt;如何使用Ansible?&lt;/h2&gt;&lt;p&gt;可以移步笔者的GitHub&lt;a href=&quot;https://github.com/waterstrong/ansible-workshop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Workshop Step by Step&lt;/a&gt;或另一篇博客&lt;a href=&quot;/ansible-practice&quot;&gt;Ansible实践篇&lt;/a&gt;来帮助一步步学习理解并使用Ansible，可以尝试一下，加深理解，主要包括以下几个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Waterstrong/ansible-workshop/blob/master/tutorials/STEP1.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Step 1. Set up the environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Waterstrong/ansible-workshop/blob/master/tutorials/STEP2.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Step 2. Inventory Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Waterstrong/ansible-workshop/blob/master/tutorials/STEP3.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Step 3. Playbooks, Roles and Tasks Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Waterstrong/ansible-workshop/blob/master/tutorials/STEP4.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Step 4. Install Apache2 Server Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Waterstrong/ansible-workshop/blob/master/tutorials/STEP5.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Step 5. Ansible Galaxy Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上内容就是对Ansible的基础介绍和入门部分，更多内容可参阅&lt;a href=&quot;https://www.ansible.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方网站&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.ansible.com/ansible/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/book/yaowenjie/ansible-workshop/details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Workshop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/richardzone/ansible-training-workshop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible Training Workshop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      Ansible是一个IT自动化工具（IT Automation Tool）。它能够很容易地实现管理配置、软件部署、编排任务(如持续部署)等自动化运维工作。
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="DevOps" scheme="http://blog.waterstrong.me/tags/DevOps/"/>
    
      <category term="Ansible" scheme="http://blog.waterstrong.me/tags/Ansible/"/>
    
      <category term="脚本" scheme="http://blog.waterstrong.me/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="自动化" scheme="http://blog.waterstrong.me/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java单元和集成测试配置</title>
    <link href="http://blog.waterstrong.me/java-unit-intg-test/"/>
    <id>http://blog.waterstrong.me/java-unit-intg-test/</id>
    <published>2016-05-11T13:47:36.000Z</published>
    <updated>2016-07-25T16:04:12.000Z</updated>
    
    <content type="html">&lt;p&gt;基于Spring Boot搭建一个Java工程，通过Gradle进行构建，使用IntelliJ IDE开发，对于在&lt;code&gt;build.gradle&lt;/code&gt;中配置Integration Test和Unit Test有多种方式。接下来分别介绍两种方式:&lt;/p&gt;
&lt;p&gt;假设在IntelliJ中创建好如下Tree结构:&lt;br&gt;&lt;img src=&quot;/assets/java-unit-intg-test/java_project_tree.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;方法一-use-another-source-set&quot;&gt;&lt;a href=&quot;#方法一-use-another-source-set&quot; class=&quot;headerlink&quot; title=&quot;方法一: use another source set&quot;&gt;&lt;/a&gt;方法一: use another source set&lt;/h3&gt;&lt;p&gt;Add into the source sets&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sourceSets &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        java.srcDirs = [&amp;apos;src/main/java&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resources.srcDirs = [&amp;apos;src/main/resources&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        java.srcDirs = [&amp;apos;src/test/unit/java&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resources.srcDirs = [&amp;apos;src/test/unit/resources&amp;apos;, &amp;apos;src/test/intg/resources&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    integrationTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        java.srcDirs = [&amp;apos;src/test/intg/java&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Add into the idea intelliJ&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;idea &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    module &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        testSourceDirs += sourceSets.integrationTest.java.srcDirs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Apply the dependencies for integration test&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile(&amp;quot;org.springframework.boot:spring-boot-starter-web&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile(&amp;quot;org.springframework.boot:spring-boot-starter-data-jpa&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testCompile(&amp;quot;com.jayway.jsonpath:json-path&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testCompile(&amp;quot;org.springframework.boot:spring-boot-starter-test&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    integrationTestCompile sourceSets.main.output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    integrationTestCompile sourceSets.test.output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    integrationTestCompile configurations.testCompile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    integrationTestRuntime configurations.testRuntime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Create the unit and integrationTest tasks&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task unitTest(dependsOn: test)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task integrationTest(type: Test) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testClassesDir = sourceSets.integrationTest.output.classesDir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    classpath = sourceSets.integrationTest.runtimeClasspath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;build.dependsOn integrationTest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方法二-use-the-same-source-set-as-test&quot;&gt;&lt;a href=&quot;#方法二-use-the-same-source-set-as-test&quot; class=&quot;headerlink&quot; title=&quot;方法二: use the same source set as test&quot;&gt;&lt;/a&gt;方法二: use the same source set as test&lt;/h3&gt;&lt;p&gt;Add into the source sets&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sourceSets &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        java.srcDirs = [&amp;apos;src/main/java&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resources.srcDirs = [&amp;apos;src/main/resources&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        java.srcDirs = [&amp;apos;src/test/unit/java&amp;apos;, &amp;apos;src/test/intg/java&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resources.srcDirs = [&amp;apos;src/test/unit/resources&amp;apos;, &amp;apos;src/test/intg/resources&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Exclude the test classes &lt;code&gt;*IntegrationTest.class&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exclude &amp;apos;**/*IntegrationTest.class&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Add the dependencies for test&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile(&amp;quot;org.springframework.boot:spring-boot-starter-web&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile(&amp;quot;org.springframework.boot:spring-boot-starter-data-jpa&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testCompile(&amp;quot;com.jayway.jsonpath:json-path&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testCompile(&amp;quot;org.springframework.boot:spring-boot-starter-test&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Create the unit and integrationTest tasks&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;task unitTest(dependsOn: test)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task integrationTest(type: Test) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    include &amp;apos;**/*IntegrationTest.class&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;build.dependsOn integrationTest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;集成测试实现DEMO&quot;&gt;&lt;a href=&quot;#集成测试实现DEMO&quot; class=&quot;headerlink&quot; title=&quot;集成测试实现DEMO&quot;&gt;&lt;/a&gt;集成测试实现DEMO&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@RunWith(SpringJUnit4ClassRunner.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@SpringApplicationConfiguration(classes = Application.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@WebAppConfiguration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Transactional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public abstract class ApplicationIntegrationTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected MockMvc mockMvc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class XXXControllerIntegrationTest extends ApplicationIntegrationTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Autowired&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private XXXController xxxController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Autowired&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private XXXRepository xxxRepository;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Before&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setUp() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mockMvc = MockMvcBuilders.standaloneSetup(xxxController).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void should_get_xxxs_by_book_xxx() throws Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xxxRepository.save(new XXX(&amp;quot;123456&amp;quot;, &amp;quot;This is a integ test&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mockMvc.perform(get(format(&amp;quot;/xxx/%s/yyys&amp;quot;, vvv)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .andExpect(status().isOk())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .andExpect(jsonPath(&amp;quot;$&amp;quot;, hasSize(1)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .andExpect(jsonPath(&amp;quot;$[0].uuid&amp;quot;).value(&amp;quot;123456&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .andExpect(jsonPath(&amp;quot;$[0].content&amp;quot;).value(&amp;quot;This is a integ test&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;单元测试实现DEMO&quot;&gt;&lt;a href=&quot;#单元测试实现DEMO&quot; class=&quot;headerlink&quot; title=&quot;单元测试实现DEMO&quot;&gt;&lt;/a&gt;单元测试实现DEMO&lt;/h3&gt;&lt;p&gt;单元测试采用JUnit和Mockito测试框架实现.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class DefaultXxxServiceTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @InjectMocks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private DefaultXxxService xxxService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Mock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private XxxRepository xxxRepository;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Before&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setUp() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MockitoAnnotations.initMocks(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void should_retrieve_xxxs_by_yyy_uuid() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String yyyUuid = &amp;quot;book123456&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Xxx&amp;gt; expectedXxxs = asList(new Xxx(), new Xxx());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        when(xxxRepository.findByYyy(yyyUuid)).thenReturn(expectedXxxs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Iterable&amp;lt;Xxx&amp;gt; xxxs = xxxService.retrieveXxxs(yyyUuid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assertThat(xxxs, is(expectedXxxs));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Run-unit-test&quot;&gt;&lt;a href=&quot;#Run-unit-test&quot; class=&quot;headerlink&quot; title=&quot;Run unit test&quot;&gt;&lt;/a&gt;Run unit test&lt;/h3&gt;&lt;p&gt;&lt;code&gt;./gradlew test&lt;/code&gt;, it depends on &lt;code&gt;build&lt;/code&gt; task.&lt;/p&gt;
&lt;h3 id=&quot;Run-integration-test&quot;&gt;&lt;a href=&quot;#Run-integration-test&quot; class=&quot;headerlink&quot; title=&quot;Run integration test&quot;&gt;&lt;/a&gt;Run integration test&lt;/h3&gt;&lt;p&gt;&lt;code&gt;./gradlew integrationTest&lt;/code&gt; or &lt;code&gt;./gradlew iT&lt;/code&gt;, it depends on &lt;code&gt;build&lt;/code&gt; task.&lt;/p&gt;
&lt;h3 id=&quot;Run-build-exclude-integration-test&quot;&gt;&lt;a href=&quot;#Run-build-exclude-integration-test&quot; class=&quot;headerlink&quot; title=&quot;Run build exclude integration test&quot;&gt;&lt;/a&gt;Run build exclude integration test&lt;/h3&gt;&lt;p&gt;&lt;code&gt;./gradlew build -x integrationTest&lt;/code&gt; or &lt;code&gt;./gradlew build -x iT&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      基于Spring Boot搭建一个Java工程，通过Gradle进行构建，使用IntelliJ IDE开发，对于在build.gradle中配置Integration Test和Unit Test有多种方式。
    
    </summary>
    
      <category term="Frameworks" scheme="http://blog.waterstrong.me/categories/Frameworks/"/>
    
    
      <category term="Java" scheme="http://blog.waterstrong.me/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://blog.waterstrong.me/tags/Spring-Boot/"/>
    
      <category term="Gradle" scheme="http://blog.waterstrong.me/tags/Gradle/"/>
    
      <category term="Unit Test" scheme="http://blog.waterstrong.me/tags/Unit-Test/"/>
    
      <category term="Integration Test" scheme="http://blog.waterstrong.me/tags/Integration-Test/"/>
    
  </entry>
  
  <entry>
    <title>JBoss Tips in Practice</title>
    <link href="http://blog.waterstrong.me/jboss-tips/"/>
    <id>http://blog.waterstrong.me/jboss-tips/</id>
    <published>2016-04-20T14:23:50.000Z</published>
    <updated>2016-06-12T15:25:05.000Z</updated>
    
    <content type="html">&lt;p&gt;JBoss是众多Java EE容器中的一个，它不但是Servlet容器，而且是EJB容器，弥补了Tomcat只是一个Servlet容器的缺憾。为了实现一些特定的功能, 需要针对JBoss的一些配置, 以下列出一些Tips供使用参考。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Tip1-IP-域名黑白名单&quot;&gt;&lt;a href=&quot;#Tip1-IP-域名黑白名单&quot; class=&quot;headerlink&quot; title=&quot;Tip1: IP/域名黑白名单&quot;&gt;&lt;/a&gt;Tip1: IP/域名黑白名单&lt;/h2&gt;&lt;p&gt;针对JBoss EAP5，为了实现Web容器级别的IP/域名黑白名单，需要到JBoss的server.xml文件中配置相应Valve规则并重启JBoss后生效。&lt;/p&gt;
&lt;p&gt;在文件&lt;code&gt;jboss-as/server/&amp;lt;instance_name&amp;gt;/deploy/jbossweb.sar/server.xml&lt;/code&gt;中的&lt;code&gt;&amp;lt;Host&amp;gt;&amp;lt;/Host&amp;gt;&lt;/code&gt;内添加如下配置:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Engine&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Host&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;Valve className=&amp;apos;org.apache.catalina.valves.RemoteAddrValve&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        allow=&amp;apos;192.168.[0-1].*, *.testing.com&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        deny=&amp;apos;127.0.0.1&amp;apos;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/Host&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/Engine&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;allow&lt;/code&gt;表明允许的IP地址正则表达式，&lt;code&gt;deny&lt;/code&gt;表明拒绝的IP地址正则表达式，特别注意的是逗号(&lt;code&gt;,&lt;/code&gt;)会被解析成&lt;code&gt;或&lt;/code&gt;，因此IP Regex中一定不要包含&lt;code&gt;逗号&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当然，除了可以设置服务器级别&lt;code&gt;server-level&lt;/code&gt;，也可以设置应用层级别&lt;code&gt;application-level&lt;/code&gt;，更多关于Web Server的配置可参见&lt;a href=&quot;http://www.datadisk.co.uk/html_docs/java_app/jboss5/jboss5_web_server.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Configuring the Web Server&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另外补充一下Valve的相关解释:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Valves are similar to filters, they can intercept any incoming and outgoing request. Valves are managed by the Engine, they access incoming/outgoing requests before they are handled by the servlet and JSP processing logic. Logically they can also be applied on a virtual host or web application basis.&lt;br&gt;Valves can add the following functionality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access logging&lt;/li&gt;
&lt;li&gt;Single sign-on for all Web applications&lt;/li&gt;
&lt;li&gt;Request filtering/blocking by IP address and or hostname&lt;/li&gt;
&lt;li&gt;Dumping of incoming/outgoing request headers for debugging purposes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Valves are nested components in the component model, they use the &lt;valve&gt; XML element in the server.xml file, they can be placed in the &lt;engine&gt;, &lt;host&gt; or &lt;context&gt; containers. The Java programming interface org.apache.catalina.Valve is used and well documented.&lt;/context&gt;&lt;/host&gt;&lt;/engine&gt;&lt;/valve&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想了解更多其他内容及详细解释请参见&lt;a href=&quot;http://www.datadisk.co.uk/html_docs/java_app/tomcat6/tomcat6_advanced.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Advanced Tomcat Features&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Tip2-自动清除work目录&quot;&gt;&lt;a href=&quot;#Tip2-自动清除work目录&quot; class=&quot;headerlink&quot; title=&quot;Tip2: 自动清除work目录&quot;&gt;&lt;/a&gt;Tip2: 自动清除work目录&lt;/h2&gt;&lt;p&gt;针对JBoss EAP5:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The work directory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Directory where compiled JSP .java and .class files reside&lt;/li&gt;
&lt;li&gt;Also contains cached TLDs&lt;/li&gt;
&lt;li&gt;Very useful for debugging problems in JSPs&lt;br&gt;Java ServerPages (.jsp files) are automatically compiled into Java Servlets (.java file) and then into Java byte-code (.class files) by Tomcat (the embedded servlet engine running within JBoss AS).&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;JBoss中的work目录是工作目录，即把jsp转换为class文件的工作目录, 其工作原理是当浏览器访问某个jsp页面时，JBoss会在work目录里把这个jsp页面转换成.java文件，然后编译为.class文件，最后容器通过ClassLoader类把这个.class类装载入内存，进行响应客户端的工作。&lt;/p&gt;
&lt;p&gt;通常情况下会定时检查容器内的jsp文件，读取每个文件的属性，当发现某个jsp文件发生改变时(文件的最后修改时间与上次检查时不相同)，容器会重新转换、编译这个jsp文件, 但是检查是定时的不是实时的，因此jsp文件修改后需要几分钟的时间来等修改过的jsp生效。为了即刻生效，通常的做法是重启JBoss之前或在修改jsp页面后立即清除work目录里的文件。&lt;/p&gt;
&lt;p&gt;一般情况下, 当停止JBoss服务时对work目录进行一次清理, 最简单快速的做法就是在JBoss相应的目录下配置自动清理选项:&lt;br&gt;修改文件&lt;code&gt;jboss-as/server/&amp;lt;instance_name&amp;gt;/deployers/jbossweb.deployer/META-INF/war-deployers-jboss-beans.xml&lt;/code&gt;中的:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--Flag to delete the Work Dir on Context Destroy --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;property name=&amp;quot;deleteWorkDirOnContextDestroy&amp;quot;&amp;gt;false&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--Flag to delete the Work Dir on Context Destroy --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;property name=&amp;quot;deleteWorkDirOnContextDestroy&amp;quot;&amp;gt;true&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      JBoss是众多Java EE容器中的一个，它不但是Servlet容器，而且是EJB容器，弥补了Tomcat只是一个Servlet容器的缺憾。为了实现一些特定的功能, 需要针对JBoss的一些配置, 将列出一些Tips供使用参考。
    
    </summary>
    
      <category term="Frameworks" scheme="http://blog.waterstrong.me/categories/Frameworks/"/>
    
    
      <category term="Java" scheme="http://blog.waterstrong.me/tags/Java/"/>
    
      <category term="Web容器" scheme="http://blog.waterstrong.me/tags/Web%E5%AE%B9%E5%99%A8/"/>
    
      <category term="JBoss" scheme="http://blog.waterstrong.me/tags/JBoss/"/>
    
      <category term="EJB" scheme="http://blog.waterstrong.me/tags/EJB/"/>
    
      <category term="Servlet" scheme="http://blog.waterstrong.me/tags/Servlet/"/>
    
      <category term="JSP" scheme="http://blog.waterstrong.me/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>Concourse CI 介绍</title>
    <link href="http://blog.waterstrong.me/concourse-ci/"/>
    <id>http://blog.waterstrong.me/concourse-ci/</id>
    <published>2016-04-19T05:02:02.000Z</published>
    <updated>2016-07-27T04:47:46.000Z</updated>
    
    <content type="html">&lt;p&gt;目前主流的CI/CD工具包括Concourse CI, Jenkins, Travis CI和GoCD，它们各自到底有什么优缺点，Concourse CI有什么优势和亮点能够跻身April ‘16的&lt;a href=&quot;https://www.thoughtworks.com/radar/tools/concourse-ci&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ThoughtWorks Tech Radar&lt;/a&gt;？&lt;/p&gt;
&lt;h3 id=&quot;Advantages-of-CI-CD&quot;&gt;&lt;a href=&quot;#Advantages-of-CI-CD&quot; class=&quot;headerlink&quot; title=&quot;Advantages of CI/CD&quot;&gt;&lt;/a&gt;Advantages of CI/CD&lt;/h3&gt;&lt;p&gt;首先还是快速介绍一下CI/CD，特别是为什么要采用CI/CD，有什么样的优势，只有在有意义的前提下，使用工具才能发挥作用，并且解决项目开发中的痛点问题。&lt;/p&gt;
&lt;h4 id=&quot;Continuous-Integration&quot;&gt;&lt;a href=&quot;#Continuous-Integration&quot; class=&quot;headerlink&quot; title=&quot;Continuous Integration&quot;&gt;&lt;/a&gt;Continuous Integration&lt;/h4&gt;&lt;p&gt;Continuous Integration(持续集成). Integrating, building, and testing code within the development environment.&lt;/p&gt;
&lt;h4 id=&quot;Continuous-Delivery&quot;&gt;&lt;a href=&quot;#Continuous-Delivery&quot; class=&quot;headerlink&quot; title=&quot;Continuous Delivery&quot;&gt;&lt;/a&gt;Continuous Delivery&lt;/h4&gt;&lt;p&gt;Continuous Delivery(持续交付). A software development discipline, build software that can be released to production at any time.&lt;/p&gt;
&lt;h4 id=&quot;CI-CD的好处&quot;&gt;&lt;a href=&quot;#CI-CD的好处&quot; class=&quot;headerlink&quot; title=&quot;CI/CD的好处&quot;&gt;&lt;/a&gt;CI/CD的好处&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Reduced Deployment Risk，降低部署风险。快速提交小部分修改进行部署和集成，从而降低了出现错误的概率，即使出现错误也能快速定位问题并修复。&lt;/li&gt;
&lt;li&gt;Believable Progress，可信的进度。如果直接部署到线上环境中，项目进展以及完成度相对于开发人员自己声称已经完成要更加的有可信度。&lt;/li&gt;
&lt;li&gt;User Feedback，用户反馈。众所周知，项目开发中最大的风险就是开发的软件不被用户接受，这样的软件是没有太大的用处和意义的，尽早和更加频繁地交付给用户并且快速获得用户反馈来获取有价值的内容，从而保证了开发的软件是被用户接受的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有关CI/CD的更多详细解释可以参见Martin Fowler博客文章&lt;a href=&quot;http://martinfowler.com/bliki/ContinuousDelivery.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Continuous Delivery&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;What-is-Concourse&quot;&gt;&lt;a href=&quot;#What-is-Concourse&quot; class=&quot;headerlink&quot; title=&quot;What is Concourse?&quot;&gt;&lt;/a&gt;What is Concourse?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://concourse.ci&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Concourse&lt;/a&gt; is a &lt;code&gt;CI/CD tool&lt;/code&gt; that treats &lt;code&gt;build pipelines and artifacts as first-class citizens&lt;/code&gt;.&lt;br&gt;It enables builds that &lt;code&gt;run in containers&lt;/code&gt;, has a &lt;code&gt;clean, usable UI and discourages snowflake&lt;/code&gt; build servers.&lt;br&gt;It aims to provide an &lt;code&gt;expressive system&lt;/code&gt; with as &lt;code&gt;few distinct moving parts&lt;/code&gt; as possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先感受一下Concourse的界面，这是Concourse项目本身的Pipelines:&lt;br&gt;&lt;img src=&quot;/assets/concourse-ci/concourse_pipeline.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Concourse CI是一款CI/CD工具，把构建pipeline和artifacts当作first-class citizens(可译作: 第一类公民)。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;First-class Citizens:&lt;/strong&gt; In programming language design, a first-class citizen (also type, object, entity, or value) in a given programming language is an entity which supports all the operations generally available to other entities. These operations typically include being passed as an argument, returned from a function, and assigned to a variable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;第一类公民：&lt;/em&gt; 即支持其他实体所有操作的实体，比如能够在运行时被动态创建，能够作为参数或返回值直接被其他实体消费或生成。举个例子，在C语言中，function就不是第一类公民，而在Javascript中function是第一类公民。其中，实体是指各种各样的数据类型和值，比如对象、类、函数、字面量等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Concourse CI本身就与容器结合，Build构建在容器中运行，隔离各个环境，避免不同环境之间相互污染情况发生。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表现系统意味着有更简洁清晰可用的UI，而尽量少的移动部件意味着模块组件统一化，并且不会有雪花式的配置，Concourse CI采用YAML文件配置Pipeline，并且通过版本控制管理起来，很容易地实现移植和恢复。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下图中展示了一个标准的Pipeline示例，其中的黑色框元素代表资源(Resources)，彩色框元素代表Jobs，会有不同的颜色代表Build的状态，流线代表了依赖和执行顺序，如Integration需要前面所有的Jobs执行成功并且提供相关Resources才能正确触发并执行。&lt;br&gt;&lt;img src=&quot;/assets/concourse-ci/standard_pipeline_demo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对Jobs简单的YML配置示例:&lt;br&gt;&lt;img src=&quot;/assets/concourse-ci/config_yml_demo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Why-is-Concourse&quot;&gt;&lt;a href=&quot;#Why-is-Concourse&quot; class=&quot;headerlink&quot; title=&quot;Why is Concourse?&quot;&gt;&lt;/a&gt;Why is Concourse?&lt;/h3&gt;&lt;p&gt;为什么会出现Concourse呢？它能带来什么新思路呢？相比目前已有的CI/CD工具有什么区别呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requires a CI/CD Tool, 首先当然是提供CI/CD的基本功能，需要一款CI/CD工具来解决项目开发中的一系列问题。&lt;/li&gt;
&lt;li&gt;Concourse vs GoCD/Jenkins/Travis CI，除此之外，还需要弥补目前CI/CD工具的一些不足，并加入一些新元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;vs-GoCD&quot;&gt;&lt;a href=&quot;#vs-GoCD&quot; class=&quot;headerlink&quot; title=&quot;vs. GoCD&quot;&gt;&lt;/a&gt;vs. GoCD&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/assets/concourse-ci/gocd_pipelines.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.go.cd/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GoCD&lt;/a&gt;属于老大级的，需要安装Server和Agent，其设计之初就是为了满足CI/CD的需求，把Build Pipelines和Artifacts作为First-class Citizens，因此也更好地支持自动化和流线式的build-test-release这样的CI/CD周期运作，同时，也支持更加复杂的工作流(Workflows)，包括并行和串行的，即使是很复杂的工作流也同样可以非常清晰直观地展示出来。&lt;/p&gt;
&lt;p&gt;除此之外，当然GoCD还有很多其他的优点，并且目前项目组也在使用。但是美中不足是GoCD配置操作的GUI很不人性化，使用过的人都知道，查看Jobs运行情况与配置Jobs的切换很麻烦，需要到首页分别点击Pipelines和Settings，而且每一项菜单层级很深，操作不友好，GoCD在架构设计上分为Pipelines -&amp;gt; Stages -&amp;gt; jobs -&amp;gt; tasks，层级嵌套显得有些复杂，不过这样的划分还好，只要操作上更加人性化就可以了。&lt;/p&gt;
&lt;p&gt;而Concourse针对GUI这一点进行了一些改进，并且引入了一种YML文件配置机制来实现对Job的配置，同样支持复杂的Workflow，也将Build Pipelines和Artifacts作为First-class Citizens，并且设计之初本身就与容器技术结合，每个Build都在Container中运行。&lt;/p&gt;
&lt;h4 id=&quot;vs-Jenkins&quot;&gt;&lt;a href=&quot;#vs-Jenkins&quot; class=&quot;headerlink&quot; title=&quot;vs. Jenkins&quot;&gt;&lt;/a&gt;vs. Jenkins&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/assets/concourse-ci/jenkins_dashboard.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/assets/concourse-ci/jenkins_plugins.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenkins&lt;/a&gt;作为使用最广泛，用户量最大的CI工具，必定有其可取之处，无论是在GUI操作上，插件生态系统管理，稳定性、可靠性、功能性以及扩展性等方面都表现得很出色，而且简单易学，入门上手快，当然Jenkins的优势还有很多，之前的项目上都一直在使用Jenkins，对于大多项目来说是完全满足条件的。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;但Jenkins也有其缺点，比如：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在配置Shell命令时，如果Pipeline规模扩大，构建和部署环境增多，那么就会复制粘贴很多这样的Shell命令，称为雪花式(Snowflakes)配置，增加维护成本；&lt;/li&gt;
&lt;li&gt;另外，Jenkins定义Job的顺序是以Job为关注点，从全局出发，比如定义A Job的前置Job是B，后置Job是C，当Jobs顺序情况变得复杂就很难再梳理清楚了；&lt;/li&gt;
&lt;li&gt;Jenkins并未将Build Pipelines和Artifacts视作First-class Citizens，如果需要实现Continuous Delivery是需要借助插件完成，而Jenkins本身并不直接支持CD的；&lt;/li&gt;
&lt;li&gt;此外，虽然Jenkins的插件生态系统管理得很好，一旦Workspace中有很多的插件，难免会造成一些插件问题导致Build环境被污染。&lt;/li&gt;
&lt;li&gt;针对Jenkins 2.0的Jenkinsfile，可以将pipeline定义为代码形式，即Pipeline As Code，也方便了很多，算是优点，不过也是其缺点，最大的问题在于这可能造成在GUI上进行了修改而未修改Jenkinsfile的不一致性，而且无法追踪到这样的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;针对Jenkins的一些问题，Concourse进行了一些改进，比如：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Snowflakes的情况就采用统一配置YML文件来解决，各Task各工程自己维护，有重复的内容通过提取文件多处引用即可；&lt;/li&gt;
&lt;li&gt;通过VCS将这样配置文件进行版本控制管理，在恢复或移植时更加方便，虽然Jenkins和GoCD也有XML配置文件，但通常用于备份，一般的做法也不会进行版本控制，更不会直接去修改文件来实现Pipeline配置；&lt;/li&gt;
&lt;li&gt;Concourse对于每个Job只定义有效的输入，即哪个Job在什么情况下输出的什么的资源是可以触发当前Job的，即使复杂的Pipeline顺序出现时，配置也很方便，每个Job只关心自己的有效输入，局部优化达到了全局优化，不会造成混乱的感觉；&lt;/li&gt;
&lt;li&gt;特别指出的是Concourse的每一个Job构建都在独立的Container中Build，对其他的环境没有影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;vs-Travis-CI&quot;&gt;&lt;a href=&quot;#vs-Travis-CI&quot; class=&quot;headerlink&quot; title=&quot;vs. Travis CI&quot;&gt;&lt;/a&gt;vs. Travis CI&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://travis-ci.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Travis CI&lt;/a&gt;其实各方面也都挺不错的，没有Snowflake配置，使用.travis.yml文件配置，在容器中运行Builds，与GitHub集成度很好，支持PR。&lt;/p&gt;
&lt;p&gt;但是也有一些缺点：如它不支持pipeline，只能支持简单的构建; 并且如果CI跑不过，需要设置多个Debug提交点来找到问题所在; 另外Travis CI是由个人发起的项目，并且目前只对开源软件免费。&lt;/p&gt;
&lt;p&gt;总体说来，对于公司的项目，更倾向于选择GoCD或Jenkins这样的产品，个人的开源项目倒是可以通过Travis CI快速搭建来感受一下。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Concourse-Concepts&quot;&gt;&lt;a href=&quot;#Concourse-Concepts&quot; class=&quot;headerlink&quot; title=&quot;Concourse Concepts&quot;&gt;&lt;/a&gt;Concourse Concepts&lt;/h3&gt;&lt;p&gt;Concourse的核心概念: resources, jobs, tasks. 通过这三个核心模块可以对任何的Pipeline进行建模，从简单的unit-&amp;gt;integration-&amp;gt;deploy-&amp;gt;ship到复杂的多基础设施, fanning out/in等。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Resources: 就是资源，最重要的概念之一，Concourse把需要交互的对象都视作一种资源，比如GitHub上的某个工程代码，AWS的S3存储，以及其他的外部服务等。更多资源类型可参见&lt;a href=&quot;http://concourse.ci/resource-types.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Customer Resource Types&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/assets/concourse-ci/concourse_resources.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jobs: Job是某个有计划有条件的工作任务，描述了一些依赖资源或手动触发的行为，当提交了代码就触发Build，或Unit Test通过后触发了Intg Test等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tasks: Task就是在隔离环境中依赖于资源的某个脚本执行，如build, test等，Job其实封装了Task，Job更侧重于描述什么情况下发生，而Task重点描述发生什么。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Concourse-Architecture&quot;&gt;&lt;a href=&quot;#Concourse-Architecture&quot; class=&quot;headerlink&quot; title=&quot;Concourse Architecture&quot;&gt;&lt;/a&gt;Concourse Architecture&lt;/h3&gt;&lt;p&gt;Concourse架构属于一种简单的分布式系统，其三大核心部件分别为: &lt;code&gt;ATC&lt;/code&gt;, &lt;code&gt;TSA&lt;/code&gt;和&lt;code&gt;Workers&lt;/code&gt;，接下来将分别进行介绍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/concourse-ci/architecture.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;ATC-web-UI-amp-build-scheduler&quot;&gt;&lt;a href=&quot;#ATC-web-UI-amp-build-scheduler&quot; class=&quot;headerlink&quot; title=&quot;ATC: web UI &amp;amp; build scheduler&quot;&gt;&lt;/a&gt;ATC: web UI &amp;amp; build scheduler&lt;/h4&gt;&lt;p&gt;ATC主要用于运行Web UI和API以及所有Pipeline构建计划的，属于Concourse的心脏，占据了极其重要的位置。采用PostgreSQL数据库存储Pipeline数据和构建日志。&lt;/p&gt;
&lt;p&gt;多个ATCs可以作为一个集群运行，各个ATC都共享一个数据库，ATC通过加锁机制在集群之间同步与传输数据。&lt;/p&gt;
&lt;p&gt;ATC默认监听&lt;code&gt;8080&lt;/code&gt;端口，通常与&lt;code&gt;TSA&lt;/code&gt;一起处于负载均衡(Load Balancer)之后，为了实现正常拦截(&lt;a href=&quot;http://concourse.ci/fly-intercept.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Intercept&lt;/a&gt;)构建(Build)的功能，需要确保Load Balancer被正确配置到了TCP或SSL转发，而非HTTP或HTTPS。&lt;/p&gt;
&lt;h4 id=&quot;TSA-worker-registration-amp-forwarding&quot;&gt;&lt;a href=&quot;#TSA-worker-registration-amp-forwarding&quot; class=&quot;headerlink&quot; title=&quot;TSA: worker registration &amp;amp; forwarding&quot;&gt;&lt;/a&gt;TSA: worker registration &amp;amp; forwarding&lt;/h4&gt;&lt;p&gt;TSA是&lt;code&gt;ATC&lt;/code&gt;定制的SSH服务器，仅用于安全地注册&lt;code&gt;Workers&lt;/code&gt;，仅支持两个命令&lt;code&gt;register-worker&lt;/code&gt;和&lt;code&gt;forward-worker&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;register-worker命令用于为ATC直接注册在同一私有网络中运行的worker。&lt;/li&gt;
&lt;li&gt;forward-worker命令用于通过TSA反向隧道worker的地址，然后为ATC注册转发连接。这样只要workers能够连接到TSA，就可以运行在任意网络且安全地实现注册功能，ATC也就可以安全地连接到worker，该方式把worker与外界环境进行隔离，只有通过授权后才能访问，从而提高了其安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TSA默认监听&lt;code&gt;2222&lt;/code&gt;端口，通常与ATC协同工作运行在Load Balancer的之后。&lt;/p&gt;
&lt;h4 id=&quot;Workers-container-runtime-amp-cache-management&quot;&gt;&lt;a href=&quot;#Workers-container-runtime-amp-cache-management&quot; class=&quot;headerlink&quot; title=&quot;Workers: container runtime &amp;amp; cache management&quot;&gt;&lt;/a&gt;Workers: container runtime &amp;amp; cache management&lt;/h4&gt;&lt;p&gt;Workers可以认为是一台通过&lt;code&gt;TSA&lt;/code&gt;进行自注册的正在运行&lt;a href=&quot;https://github.com/cloudfoundry-incubator/garden&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Garden&lt;/a&gt;和&lt;a href=&quot;https://github.com/concourse/baggageclaim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Baggageclaim&lt;/a&gt;服务的机器。&lt;/p&gt;
&lt;p&gt;Workers在自己所属机器上并没有配置重要的状态什么的，所有的内容都运行在容器中，更不需要关心相关依赖包安装到主机上在，这就是workers区别于其他非容器化(non-containerized)的CI解决方案，特别是当workers中的依赖包的状态成为了pipeline正常工作与否的关键因素，容器化显得尤为重要。&lt;/p&gt;
&lt;p&gt;每一个worker通过TSA注册自己，从而可以被Concourse集群发现并使用。Workers中的&lt;code&gt;Garden&lt;/code&gt;默认监听&lt;code&gt;7777&lt;/code&gt;端口，&lt;code&gt;Baggageclaim&lt;/code&gt;默认监听&lt;code&gt;7788&lt;/code&gt;端口。如果都在&lt;code&gt;ATC&lt;/code&gt;可达的同一个私有网络中，那么workers会绑定到所有地址&lt;code&gt;0.0.0.0&lt;/code&gt;，并且会直接注册自己，否则会绑定到&lt;code&gt;127.0.0.1&lt;/code&gt;，通过&lt;code&gt;TSA&lt;/code&gt;进行转发。&lt;/p&gt;
&lt;p&gt;以上就是Concourse的架构，更多细节可以参见&lt;a href=&quot;http://concourse.ci/architecture.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Concourse Architecture&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Concourse-Impacts&quot;&gt;&lt;a href=&quot;#Concourse-Impacts&quot; class=&quot;headerlink&quot; title=&quot;Concourse Impacts&quot;&gt;&lt;/a&gt;Concourse Impacts&lt;/h3&gt;&lt;p&gt;之所以要介绍Concourse，是因为Concourse带了一些新思路和想法，提供了另一个看待CI/CD的视角。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pluggable Resource Interface: 把操作对象看待资源，提供对资源访问的可接口，达到松耦合的目的&lt;/li&gt;
&lt;li&gt;Running builds in Containers Natively: 本身就支持在容器中运行构建，隔离不同环境&lt;/li&gt;
&lt;li&gt;Zero Snowflake-able Configuration: 没有雪花式的配置，可以重用相同的配置，通过版本控制管理，快速恢复和移植&lt;/li&gt;
&lt;li&gt;Submitting builds from the local file system up to run in CI: 通过本地配置文件提交构建到CI中运行，每个项目单独管理Build，降低维护成本&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cloudfoundry.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cloud Foundry&lt;/a&gt;: Run on diff architectures, diff platforms, against varying underlying IaaSs: Cloud Foundry是一款PaaS平台即服务产品，为了解决Cloud Foundry的CI/CD问题才开发出Concourse，些类项目需要运行在不同的架构，不同的平台以及不同的基础设施中，因此Pipeline会相当复杂，而Concourse在配置这样复杂的Pipeline的时候表现得更加令人满意。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总得来说，Concourse带来了新的思路，并且与当下流行的Container技术结合，同样在支持PaaS项目的CI/CD时显得略胜一筹。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Using-Concourse&quot;&gt;&lt;a href=&quot;#Using-Concourse&quot; class=&quot;headerlink&quot; title=&quot;Using Concourse&quot;&gt;&lt;/a&gt;Using Concourse&lt;/h3&gt;&lt;p&gt;使用Concourse不会过多作介绍，后续会有专门针对如何使用Concourse的详细教程，本博客中只简单介绍一下流程:&lt;/p&gt;
&lt;h4 id=&quot;Step1-Install-and-Setup&quot;&gt;&lt;a href=&quot;#Step1-Install-and-Setup&quot; class=&quot;headerlink&quot; title=&quot;Step1. Install and Setup&quot;&gt;&lt;/a&gt;Step1. Install and Setup&lt;/h4&gt;&lt;p&gt;通常安装和运行Concourse有三种方式，任选一种方式尝试安装并启动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local VM with Vagrant&lt;/li&gt;
&lt;li&gt;Standalone Binaries&lt;/li&gt;
&lt;li&gt;Clusters with BOSH&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先我们在本地采用最快捷的Vagrant方式安装，运行以下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant init concourse/lite  # creates ./Vagrantfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant up  # downloads the box and spins up the VM&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后Concourse服务已经开始运行了，通过&lt;a href=&quot;http://192.168.100.4:8080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;192.168.100.4:8080&lt;/a&gt;地址进行访问。&lt;br&gt;&lt;img src=&quot;/assets/concourse-ci/no_pipeline.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果提示需要更新升级，可以尝试运行以下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant box update --box concourse/lite # gets the newest Vagrant box&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant destroy                         # remove the old Vagrant box&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant up                              # re-create the machine with the newer box&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但针对线上环境，不推荐Vagrant方式安装，Vagrant用于学习目的，快速掌握Concourse工作方式还是不错的选择，如果针对线上产品的项目，可以尝试采用后两种方式安装，更多安装介绍请参见&lt;a href=&quot;http://concourse.ci/installing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Concourse Installing&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当安装Concourse完成后，还需要在本地下载&lt;a href=&quot;http://concourse.ci/fly-cli.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;the Fly CLI&lt;/a&gt;. 也可以访问Concourse主界面，然后点击Fly CLI链接进入下载页。&lt;/p&gt;
&lt;p&gt;针对Linux和Mac OS X系统，首先需要给下载的FLY CLI文件添加执行权限，然后安装到系统并添加到$PATH中：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;chmod +x fly&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;install fly /usr/local/bin/fly&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Step2-Using-yml-to-describe-pipeline&quot;&gt;&lt;a href=&quot;#Step2-Using-yml-to-describe-pipeline&quot; class=&quot;headerlink&quot; title=&quot;Step2. Using *.yml to describe pipeline&quot;&gt;&lt;/a&gt;Step2. Using *.yml to describe pipeline&lt;/h4&gt;&lt;p&gt;为了创建一个Pipeline，首先在创建名为&lt;code&gt;hello.yml&lt;/code&gt;的文件，并写入以下内容:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jobs:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- name: hello-world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  plan:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - task: say-hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    config:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      platform: linux&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      image_resource:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        type: docker-image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source: &amp;#123;repository: ubuntu&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      run:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        path: echo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        args: [&amp;quot;Hello, world!&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于定义Pipeline的更多内容可参见&lt;a href=&quot;http://concourse.ci/pipelines.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pipelines&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Step3-Push-to-Concourse&quot;&gt;&lt;a href=&quot;#Step3-Push-to-Concourse&quot; class=&quot;headerlink&quot; title=&quot;Step3. Push to Concourse&quot;&gt;&lt;/a&gt;Step3. Push to Concourse&lt;/h4&gt;&lt;p&gt;如果使用的是Vagrant安装方式，我们可以尝试登录到本地VirutalBox中：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fly -t lite login -c http://192.168.100.4:8080&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当前已经保存了名为&lt;code&gt;lite&lt;/code&gt;的目标，会在以后的多个命令行中使用，&lt;code&gt;-t&lt;/code&gt;代表目标名(Target Name)。&lt;/p&gt;
&lt;p&gt;当准备好&lt;code&gt;hello.yml&lt;/code&gt;后，可以通过以下命令设置Pipelilne：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fly -t lite set-pipeline -p hello-world -c hello.yml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后刷新Concourse主页面，可以看到已经设置好一个简单的Hello World的Pipeline了。&lt;br&gt;&lt;img src=&quot;/assets/concourse-ci/hello_demo_pipeline.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;该默认配置是暂停Pipeline，可以通过界面启动，也可以通过命令行方式启动：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fly -t lite unpause-pipeline -p hello-world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以通过命令查看当前Pipeline的配置：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fly -t lite get-pipeline -p hello-world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该Pipeline非常简单，只有单一的&lt;code&gt;Job&lt;/code&gt;，整个计划中只有一个&lt;code&gt;Task&lt;/code&gt;，可以看到&lt;code&gt;Task&lt;/code&gt;执行过程的快照：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/concourse-ci/hello_run_build.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;更多示例教程可以参见&lt;a href=&quot;http://concourse.ci/tutorials.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Concourse官网Demo&lt;/a&gt;或&lt;a href=&quot;https://github.com/starkandwayne/concourse-tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub的Concourse教程&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Concourse-Assess&quot;&gt;&lt;a href=&quot;#Concourse-Assess&quot; class=&quot;headerlink&quot; title=&quot;Concourse Assess&quot;&gt;&lt;/a&gt;Concourse Assess&lt;/h3&gt;&lt;p&gt;虽然列举出了很多Concourse的优点和创新思路，但也有一些Concerns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concerns 1: 与其他CI/CD以GUI进行配置的方式不同，虽然Build和Pipeline的UI可视化效果很不错，但在配置上采用了YML文件，且需要使用FLY命令行的方式进行交互，因此要求记住一些规则、关键字和相关命令，这样势必增加了学习成本。&lt;/li&gt;
&lt;li&gt;Concerns 2: 因为Concourse作为新产品新工具，稳定性、易用行、扩展性等各方面还有待市场和用户的大量验证，当然，如果Concourse确实能够带来更多方便和更多新思路，并且解决了用户的真正痛点问题，那么，相信其未来一定是非常光明的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于目前选择用哪款工具，其实需要根据团队和项目的情况来平衡选择的，有兴趣喜欢尝鲜的同学倒是可以折腾下，还是很有意思的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[1] &lt;a href=&quot;https://concourse.ci&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://concourse.ci&lt;/a&gt;&lt;br&gt;[2] &lt;a href=&quot;https://www.go.cd/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.go.cd/&lt;/a&gt;&lt;br&gt;[3] &lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://jenkins.io/&lt;/a&gt;&lt;br&gt;[4] &lt;a href=&quot;https://travis-ci.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://travis-ci.com/&lt;/a&gt;&lt;br&gt;[5] &lt;a href=&quot;https://en.wikipedia.org/wiki/First-class_citizen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/First-class_citizen&lt;/a&gt;&lt;br&gt;[6] &lt;a href=&quot;https://github.com/starkandwayne/concourse-tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/starkandwayne/concourse-tutorial&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      目前主流的CI/CD工具包括Concourse CI, Jenkins, Travis CI和GoCD，它们各自到底有什么优缺点，Concourse CI有什么优势和亮点能够跻身Tech Radar?
    
    </summary>
    
      <category term="Tools" scheme="http://blog.waterstrong.me/categories/Tools/"/>
    
    
      <category term="DevOps" scheme="http://blog.waterstrong.me/tags/DevOps/"/>
    
      <category term="CI/CD" scheme="http://blog.waterstrong.me/tags/CI-CD/"/>
    
      <category term="ConcourseCI" scheme="http://blog.waterstrong.me/tags/ConcourseCI/"/>
    
      <category term="Jenkins" scheme="http://blog.waterstrong.me/tags/Jenkins/"/>
    
      <category term="TravisCI" scheme="http://blog.waterstrong.me/tags/TravisCI/"/>
    
      <category term="GoCD" scheme="http://blog.waterstrong.me/tags/GoCD/"/>
    
  </entry>
  
  <entry>
    <title>AWS EC2搭建VPN服务器</title>
    <link href="http://blog.waterstrong.me/aws-ec2-vpn/"/>
    <id>http://blog.waterstrong.me/aws-ec2-vpn/</id>
    <published>2016-04-13T15:30:52.000Z</published>
    <updated>2016-06-11T13:29:32.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h3&gt;&lt;p&gt;主要介绍如何在12个月免费的AWS EC2中搭建基于PPTP协议的VPN服务用于翻越GFW，平时Google搜索一下也很方便，会涉及CentOS, RedHat和Ubuntu操作系统。虽然自己有用其他翻Wall软件，也有我司的VPN服务帐号，但还是想折腾一下，说不定还可以出售给小白同学。&lt;/p&gt;
&lt;p&gt;而且自己搭建VPN有诸多好处:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;暂时免费，只要不超出AWS免费流量和时间限制;&lt;/li&gt;
&lt;li&gt;速度有保障，可以选择最快地区的AWS EC2进行搭建;&lt;/li&gt;
&lt;li&gt;自己的帐号自己管理，流量也自己控制，安全有保障。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;AWS EC2已经在另一篇Blog中有相关介绍，有兴趣可以参见&lt;a href=&quot;/aws-ec2-basic&quot;&gt;AWS EC2入门篇&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;VPN: Virtual Private Network, 虚拟专用网络，是一种远程访问技术，主要功能是在公用网络上建立专用网络，进行加密通讯，支持跨平台。&lt;br&gt;PPTP: Point to Point Tunneling Protocol, 点对点隧道协议，是PPP协议的基础上的增强型安全协议，支持多协议VPN，默认端口号1723。利于PPTP可以快速搭建自己的VPN，并且在很多的移动设备上也支持PPTP，同时PPTP速度也较快，资源消耗也小。&lt;/p&gt;
&lt;p&gt;简单介绍了之后，可以尝试以下步骤在服务器上搭建一个VPN服务。&lt;/p&gt;
&lt;h3 id=&quot;Step1-安装PPTP&quot;&gt;&lt;a href=&quot;#Step1-安装PPTP&quot; class=&quot;headerlink&quot; title=&quot;Step1 - 安装PPTP&quot;&gt;&lt;/a&gt;Step1 - 安装PPTP&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;On Ubuntu 14.04 x64:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo su  # 登录服务器后切换到超级管理员&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt-get update -y  # 更新源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt-get install pptpd -y  # 安装pptpd, 同时会自动安装依赖组件ppp和iptables&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;On CentOS or Red Hat Linux 6.x x64:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo su  # 登录服务器后切换到超级管理员&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum update -y  # 更新源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install pptpd -y  # 安装pptpd, 同时会自动安装依赖组件ppp和iptables&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;如果找不到源，返回&lt;code&gt;No package pptpd available&lt;/code&gt;，如Amazon AMI Linux，可以采用以下方法解决: &lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方法一: 下载rpm包直接安装（推荐）&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 针对EL6.x版本:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget -c http://poptop.sourceforge.net/yum/stable/packages/pptpd-1.4.0-1.el6.x86_64.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 针对EL7.x版本:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget -c http://dl.fedoraproject.org/pub/epel/7/x86_64/p/pptpd-1.4.0-2.el7.x86_64.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rpm -ivh pptpd-1.4.0-1.el6.x86_64.rpm  # 安装显示安装进度--install--verbose--hash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;方法二: 需要添加新的源&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum repolist  # 查看yum源列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 只针对EL7版本:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum localinstall http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum makecache  # 将服务器上的软件包信息下载到本地缓存, 以提高搜索和安装软件的速度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum repolist  # 可以再次查看新加入的列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install pptpd -y  # 再次执行安装pptpd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 可用 yum-config-manager --disable &amp;lt;repoid&amp;gt; 删除源&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Step2-配置PPTP&quot;&gt;&lt;a href=&quot;#Step2-配置PPTP&quot; class=&quot;headerlink&quot; title=&quot;Step2 - 配置PPTP&quot;&gt;&lt;/a&gt;Step2 - 配置PPTP&lt;/h3&gt;&lt;p&gt;编辑&lt;code&gt;/etc/pptpd.conf&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/pptpd.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;搜索&lt;code&gt;localip&lt;/code&gt;并去掉以下字段前的注释符&lt;code&gt;#&lt;/code&gt;，保存并退出&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;localip 192.168.0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;remoteip 192.168.0.234-238,192.168.0.245&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;localip&lt;/code&gt;表示VPN服务器使用的地址，而&lt;code&gt;remoteip&lt;/code&gt;表示分配给VPN客户端的地址范围，当然也可以自定义设置范围。&lt;/p&gt;
&lt;h3 id=&quot;Step3-添加DNS解析&quot;&gt;&lt;a href=&quot;#Step3-添加DNS解析&quot; class=&quot;headerlink&quot; title=&quot;Step3 - 添加DNS解析&quot;&gt;&lt;/a&gt;Step3 - 添加DNS解析&lt;/h3&gt;&lt;p&gt;针对&lt;code&gt;Ubuntu&lt;/code&gt;系统，编辑&lt;code&gt;/etc/ppp/pptpd-options&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/ppp/pptpd-options&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;针对&lt;code&gt;CentOS/RedHat&lt;/code&gt;，编辑&lt;code&gt;/etc/ppp/options.pptpd&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/ppp/options.pptpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在文件中搜索&lt;code&gt;ms-dns&lt;/code&gt;，去掉以下字段前的注释符&lt;code&gt;#&lt;/code&gt;，并修改为以下值后保存退出&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ms-dns 8.8.8.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ms-dns 8.8.4.4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上两条配置指定了使用Google Public DNS服务器。&lt;/p&gt;
&lt;h3 id=&quot;Step4-添加VPN用户&quot;&gt;&lt;a href=&quot;#Step4-添加VPN用户&quot; class=&quot;headerlink&quot; title=&quot;Step4 - 添加VPN用户&quot;&gt;&lt;/a&gt;Step4 - 添加VPN用户&lt;/h3&gt;&lt;p&gt;编辑&lt;code&gt;/etc/ppp/chap-secrets&lt;/code&gt;，添加用户名和密码条目，格式为&lt;code&gt;[username] [service] [password] [ip]&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# client	server  	secret		IP addresses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vpnuser01	pptpd   	123456		*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，用户名和密码可自行设置，服务名应为&lt;code&gt;pptpd&lt;/code&gt;，IP表明允许登录的ip列表，如果允许所有ip可以设置为&lt;code&gt;*&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Step5-开启IPv4转发&quot;&gt;&lt;a href=&quot;#Step5-开启IPv4转发&quot; class=&quot;headerlink&quot; title=&quot;Step5 - 开启IPv4转发&quot;&gt;&lt;/a&gt;Step5 - 开启IPv4转发&lt;/h3&gt;&lt;p&gt;为了支持IP数据包的转发，需要开启IPv4转发功能。&lt;br&gt;编辑&lt;code&gt;/etc/sysctl.conf&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/sysctl.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;搜索并找到以下字段，去掉注释并修改为以下值：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;net.ipv4.ip_forward = 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;= 1&lt;/code&gt;表明开启了服务器内核支持IP数据包转发功能，允许通过PPTP协议在公有IP和私有IPs之间进行数据包转发。&lt;/p&gt;
&lt;p&gt;使得修改生效，需要执行：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sysctl -p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Step6-创建NAT规则&quot;&gt;&lt;a href=&quot;#Step6-创建NAT规则&quot; class=&quot;headerlink&quot; title=&quot;Step6 - 创建NAT规则&quot;&gt;&lt;/a&gt;Step6 - 创建NAT规则&lt;/h3&gt;&lt;p&gt;创建网络地址转换，添加防火墙规则到iptables中，在终端执行以下命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE  # 将所有目标IP包转向eth0接口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service iptables save  # 添加规则后重启会失效，所以需要保存，若不支持，可添加到rc.local文件中开机自动设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 也可使用命令 iptables-save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service iptables restart  # 重启iptables，貌似针对Ubuntu无效(忽略)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;pptpd默认监听1723端口，可以通过以下命令查看：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;netstat -nap | grep pptpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(可选)如果端口没有开启则开启相关端口:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -I INPUT -p tcp –dport 1723 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -I INPUT -p tcp –dport 47 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -I INPUT -p UDP --dport 53 -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -I INPUT -p gre -j ACCEPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service iptables save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Step7-启动PPTP服务&quot;&gt;&lt;a href=&quot;#Step7-启动PPTP服务&quot; class=&quot;headerlink&quot; title=&quot;Step7 - 启动PPTP服务&quot;&gt;&lt;/a&gt;Step7 - 启动PPTP服务&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;chkconfig pptpd on  # 设置开机启动VPN服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service pptpd restart  # 重启VPN服务, 当然可以用stop/start来停止/启动服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service pptpd status  # 查看VPN服务当前运行状态&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到服务已经启动:&lt;br&gt;&lt;img src=&quot;/assets/aws-ec2-vpn/linux_pptpd_started.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;针对Ubuntu，即使运行start命令，但查看status还是显示&lt;code&gt;pptpd is not running&lt;/code&gt;，可以编辑&lt;code&gt;/etc/init.d/pptpd&lt;/code&gt;文件，搜索&lt;code&gt;status&lt;/code&gt;找到该行&lt;code&gt;status_of_proc &amp;quot;$PIDFILE&amp;quot; &amp;quot;$DAEMON&amp;quot; &amp;quot;$NAME&amp;quot; &amp;amp;&amp;amp; exit 0 || exit $?&lt;/code&gt;，并添加&lt;code&gt;-p&lt;/code&gt;参数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;status_of_proc -p &amp;quot;$PIDFILE&amp;quot; &amp;quot;$DAEMON&amp;quot; &amp;quot;$NAME&amp;quot; &amp;amp;&amp;amp; exit 0 || exit $?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;针对VPN日志，在CentOS中，VPN服务器默认会写日志到&lt;code&gt;/var/log/messages&lt;/code&gt;中; 在Ubuntu中，VPN服务器默认会写日志到&lt;code&gt;/var/log/syslog&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;以上步骤完成配置正确后，可以利用自己的终端设备连接到VPN上网了。&lt;/p&gt;
&lt;h3 id=&quot;Step8-使用VPN服务&quot;&gt;&lt;a href=&quot;#Step8-使用VPN服务&quot; class=&quot;headerlink&quot; title=&quot;Step8 - 使用VPN服务&quot;&gt;&lt;/a&gt;Step8 - 使用VPN服务&lt;/h3&gt;&lt;h4 id=&quot;在Mac-OS-X上配置VPN&quot;&gt;&lt;a href=&quot;#在Mac-OS-X上配置VPN&quot; class=&quot;headerlink&quot; title=&quot;在Mac OS X上配置VPN&quot;&gt;&lt;/a&gt;在Mac OS X上配置VPN&lt;/h4&gt;&lt;p&gt;System Preferences(系统设置) -&amp;gt; Network(网络):&lt;br&gt;&lt;img src=&quot;/assets/aws-ec2-vpn/mac_system_network.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择左下角的&lt;code&gt;+&lt;/code&gt;号添加VPN，选择PPTP类型，点击create创建:&lt;br&gt;&lt;img src=&quot;/assets/aws-ec2-vpn/mac_new_vpn.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Advanced(高级) -&amp;gt; Options(选项) -&amp;gt; 勾选Session Options中的所有项 -&amp;gt; OK保存:&lt;br&gt;&lt;img src=&quot;/assets/aws-ec2-vpn/mac_vpn_options.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;填写VPN相关服务器地址、用户名、密码等信息 -&amp;gt; 点击Apply应用所有修改 -&amp;gt; 点击connect连接VPN服务:&lt;br&gt;&lt;img src=&quot;/assets/aws-ec2-vpn/mac_vpn_connected.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中Server Address绑定了子域名&lt;code&gt;aws.vpn.xxx&lt;/code&gt;，在需要更改服务主机时只需要重定位DNS即可，Client终端配置不需要更改，当然要做负载时也很方便，同时也利用记忆。&lt;/p&gt;
&lt;h4 id=&quot;在iPhone-6s上配置VPN&quot;&gt;&lt;a href=&quot;#在iPhone-6s上配置VPN&quot; class=&quot;headerlink&quot; title=&quot;在iPhone 6s上配置VPN&quot;&gt;&lt;/a&gt;在iPhone 6s上配置VPN&lt;/h4&gt;&lt;p&gt;首先进入Settings设置，选择VPN项（也可以借助第三方软件，如AnyConnect）:&lt;br&gt;&lt;img src=&quot;/assets/aws-ec2-vpn/6s_vpn_setting.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择PPTP类型，填写服务器地址、用户名、密码等，然后保存:&lt;br&gt;&lt;img src=&quot;/assets/aws-ec2-vpn/6s_new_vpn.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击connect连接VPN服务:&lt;br&gt;&lt;img src=&quot;/assets/aws-ec2-vpn/6s_vpn_connected.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;进入已连接的VPN查看分配的IP，连接时间等详细信息，当然也可以删除VPN:&lt;br&gt;&lt;img src=&quot;/assets/aws-ec2-vpn/6s_vpn_detail.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;测试访问Google，在手机浏览器输入&lt;code&gt;www.google.com&lt;/code&gt;，使用4G数据流量，连接正常，速度没有明显差异:&lt;br&gt;&lt;img src=&quot;/assets/aws-ec2-vpn/6s_test_vpn.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然，其他设备上也是类似配置，都是一些基础的操作，也该收工了。OK, Just Enjoy~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      主要介绍如何在12个月免费的AWS EC2中搭建基于PPTP协议的VPN服务用于翻越GFW，平时Google搜索一下也很方便，会涉及CentOS, RedHat和Ubuntu操作系统。
    
    </summary>
    
      <category term="Platforms" scheme="http://blog.waterstrong.me/categories/Platforms/"/>
    
    
      <category term="Linux" scheme="http://blog.waterstrong.me/tags/Linux/"/>
    
      <category term="DevOps" scheme="http://blog.waterstrong.me/tags/DevOps/"/>
    
      <category term="AWS EC2" scheme="http://blog.waterstrong.me/tags/AWS-EC2/"/>
    
      <category term="VPN" scheme="http://blog.waterstrong.me/tags/VPN/"/>
    
      <category term="PPTP" scheme="http://blog.waterstrong.me/tags/PPTP/"/>
    
      <category term="CentOS" scheme="http://blog.waterstrong.me/tags/CentOS/"/>
    
      <category term="RedHat" scheme="http://blog.waterstrong.me/tags/RedHat/"/>
    
      <category term="Ubuntu" scheme="http://blog.waterstrong.me/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
